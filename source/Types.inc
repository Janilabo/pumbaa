type
  XArrHelp = type helper for XArr
    function Add(const item: XVar; const duplicates: Boolean = True): XArr; overload; cdecl;
    function Add(const items: XArr; const duplicates: Boolean = True): XArr; overload; cdecl;
    function AllEqual: Boolean; overload; cdecl;
    function AllSame: Boolean; overload; cdecl;
    function AllUnique: Boolean; overload; cdecl;
    function Append(const item: XVar; const duplicates: Boolean = True): Integer; overload; cdecl;
    function Append(const items: XArr; const duplicates: Boolean = True): Integer; overload; cdecl;
    function Build(const item: XVar; const aSize: Integer = 1): XArr; overload; cdecl;
    function BuiltWith(const allowed: XArr): Boolean; overload; cdecl;
    function BuiltWithout(const forbidden: XArr): Boolean; overload; cdecl;
    function Clear: Boolean; cdecl;
    function Clone(const index: Integer = 0; const count: Integer = 2147483647): XArr; cdecl;
    function Clone(const ID: TIntegerArray): XArr; overload; cdecl;
    function Combine(const b: XArr): XArr; overload; cdecl;
    function Contains(const item: XVar; const index: Integer = 0): Boolean; cdecl;
    function Copy(const index: Integer = 0; const count: Integer = 2147483647): XArr; overload; cdecl;
    function Create(const item: XVar): XArr; overload; cdecl;
    function Create(const aSize: Integer; const item: XVar): XArr; overload; cdecl;
    function Delete(const index: Integer = 0): Boolean; overload; cdecl;
    function Delete(const ID: TIntegerArray): Integer; overload; cdecl;
    function Differ(const target: XArr): Boolean; overload; cdecl;
    function Distribute(const parts: Integer): X2DArr; overload; cdecl;
    function Dump(const items: XArr; const index: Integer = 0): Integer; overload; cdecl;
    function Dupe: XArr; overload; cdecl;
    function Duplicate(const xTimes: Integer = 1): XArr; overload; cdecl;
    function Empty: Boolean; overload; cdecl;
    function Equal(const target: XArr): Boolean; overload; cdecl;
    function Excessive: Boolean; overload; cdecl; 
    function Exch(const aIndex, bIndex: Integer): Boolean; overload; cdecl;
    function Exchange(const aIndex, bIndex: Integer): Boolean; overload; cdecl;
    function Extend(const item: XVar): XArr; overload; cdecl;
    function Extend(const items: XArr): XArr; overload; cdecl;
    function Extract(const item: XVar; const index: Integer = 0): XArr; overload; cdecl;
    function Extract(const items: XArr; const index: Integer = 0): XArr; overload; cdecl;
    function ExtractEvery(const X: Integer = 1; const index: Integer = 0): XArr; overload; cdecl;
    function Fill(const item: XVar; const index: Integer = 0; const count: Integer = 2147483647): XArr; overload; cdecl;
    function Fill(const items: XArr; const index: Integer = 0; const count: Integer = 2147483647): XArr; overload; cdecl;
    function Filter(const item: XVar; const index: Integer = 0): XArr; overload; cdecl;
    function Filter(const items: XArr; const index: Integer = 0): XArr; overload; cdecl;
    function FilterEvery(const X: Integer = 1; const index: Integer = 0): XArr; overload; cdecl;
    function Find(const ID: TRange; const item: XVar): Integer; overload; cdecl;
    function Find(const ID: TIntegerArray; const item: XVar): Integer; overload; cdecl;
    function Find(const ID: TRange; const items: XArr): Integer; overload; cdecl;
    function Find(const ID: TIntegerArray; const items: XArr): Integer; overload; cdecl;
    function Flip: Boolean; overload; cdecl;
    function FromLeft(const count: Integer; const index: Integer = 2147483647): XArr; overload; cdecl;
    function FromRight(const count: Integer; const index: Integer = 0): XArr; overload; cdecl;
    function Get: XArr; overload; cdecl;
    function Get(const ID: TIntegerArray): XArr; overload; cdecl;
    function Get(const ID: TRange): XArr; overload; cdecl;
    function Group: X2DArr; overload; cdecl;
    function Holds(const chain: XArr): Boolean; overload; cdecl;
    function IDs(const ascending: Boolean = True): TIntegerArray; overload; cdecl;
    function IDs(const ID: TIntegerArray): XArr; overload; cdecl;
    function IDs(const ID: TIntegerArray; const item: XVar): XArr; overload; cdecl;
    function IDs(const ID: TIntegerArray; const items: XArr): XArr; overload; cdecl;
    function Includes(const item: XVar; const index: Integer = 2147483647): Boolean; cdecl;
    function Keep(const items: XArr; const index: Integer = 0): Integer; overload; cdecl;
    function LeastFrequent: XVar; overload; cdecl;
    function Len: Integer; overload; cdecl;
    function Len(const aSize: Integer): Integer; overload; cdecl;
    function Len(const aSize: Integer; const null: XVar): Integer; overload; cdecl;
    function Loc(const item: XVar; const index: Integer = 2147483647): Integer; overload; cdecl;
    function Loc(const items: XArr; const index: Integer = 2147483647): Integer; overload; cdecl;
    function Location(const item: XVar; const index: Integer = 2147483647): Integer; overload; cdecl;
    function Location(const items: XArr; const index: Integer = 2147483647): Integer; overload; cdecl;
    function Locations(const item: XVar; const index: Integer = 2147483647): TIntegerArray; overload; cdecl;
    function Locations(const items: XArr; const index: Integer = 2147483647): TIntegerArray; overload; cdecl;
    function Mix(const shuffles: Integer = 1): Boolean; overload; cdecl;
    function MostFrequent: XVar; overload; cdecl;
    function Move(const oldIndex, newIndex: Integer): Boolean; overload; cdecl;
    function Next(const index: Integer; const count: Integer = 2147483647): XArr; overload; cdecl;
    function Oversize(const limit: Integer): Boolean; overload; cdecl;
    function Partition(const pSize: Integer): X2DArr; overload; cdecl;
    function Pick(const ID: TIntegerArray): XArr; overload; cdecl;
    function Pop: XVar; overload; cdecl;
    function Pop(const null: XVar): XVar; overload; cdecl;
    function Pos(const item: XVar; const index: Integer = 0): Integer; overload; cdecl;
    function Pos(const items: XArr; const index: Integer = 0): Integer; overload; cdecl;
    function Position(const item: XVar; const index: Integer = 0): Integer; overload; cdecl;
    function Position(const items: XArr; const index: Integer = 0): Integer; overload; cdecl;
    function Positions(const item: XVar; const index: Integer = 0): TIntegerArray; overload; cdecl;
    function Positions(const items: XArr; const index: Integer = 0): TIntegerArray; overload; cdecl;
    function Previous(const index: Integer; const count: Integer = 2147483647): XArr; overload; cdecl;
    function Push(const item: XVar): Integer; overload; cdecl;
    function Push(const items: XArr): Integer; overload; cdecl;
    function Put(const ID: TIntegerArray; const item: XVar): XArr; overload; cdecl;
    function Put(const ID: TIntegerArray; const items: XArr): XArr; overload; cdecl;
    function Put(const index: Integer; const items: XArr): XArr; overload; cdecl;
    function Remove(const item: XVar; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl;
    function Remove(const item: XVar; const all: Boolean): Integer; overload; cdecl;
    function Remove(const items: XArr; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl;
    function Remove(const items: XArr; const all: Boolean): Integer; overload; cdecl;
    function Resize(const aChange: Integer): Integer; overload; cdecl;
    function Resize(const aChange: Integer; const null: XVar): Integer; overload; cdecl;
    function Reverse: Boolean; overload; cdecl;
    function Reversed: XArr; overload; cdecl;
    function Scan(const ID: TRange; const item: XVar; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl;
    function Scan(const ID: TIntegerArray; const item: XVar; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl;
    function Scan(const ID: TRange; const items: XArr; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl;
    function Scan(const ID: TIntegerArray; const items: XArr; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl;
    function Shift: XVar; overload; cdecl;
    function Shift(const sCount: Integer): XArr; overload; cdecl;
    function Size(const aSize: Integer): Integer; overload; cdecl;
    function Size: Integer; overload; cdecl;
    function SizeBetween(const sMin, sMax: Integer): Boolean; overload; cdecl;
    function SizeMax(const target: Integer): Boolean; overload; cdecl;
    function SizeMin(const target: Integer): Boolean; overload; cdecl;
    function SubarrayLocation(const pattern: XArr): Integer; overload; cdecl;
    function SubarrayLocations(const pattern: XArr): TIntegerArray; overload; cdecl;
    function SubarrayPosition(const pattern: XArr): Integer; overload; cdecl;
    function SubarrayPositions(const pattern: XArr): TIntegerArray; overload; cdecl;
    function Swap(var b: XArr): Integer; overload; cdecl;
    function Trade(var b: XArr): Integer; overload; cdecl;
    function Undersize(const limit: Integer): Boolean; overload; cdecl;
    function Unique: Integer; overload; cdecl;
    function Uniqued: XArr; overload; cdecl;
    function Uniques: TIntegerArray; overload; cdecl;
    function Unshift(const item: XVar): Integer; overload; cdecl;
    function Unshift(const items: XArr): Integer; overload; cdecl;
    {$IFDEF Integer}
    function Descend: Boolean; cdecl;
    function Ascend: Boolean; cdecl;
    function Bounds: TRange; overload; cdecl;
    function Bounds(var aSize: Integer): TRange; overload; cdecl;
    function Range: TRange; cdecl;
    function Undupe: Integer; cdecl;
    function Unduped: TIntegerArray; cdecl;
    function Numberline: TIntegerArray; cdecl;
    function Lowest: Integer; cdecl;
    function Highest: Integer; cdecl;
    function Mini(const ascending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl;
    function Mini(const start: Integer; const ascending: Boolean = True): Integer; overload; cdecl;
    function Maxi(const ascending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl;
    function Maxi(const start: Integer; const ascending: Boolean = True): Integer; overload; cdecl;
    function Sum: Int64; cdecl;
    function Density: Double; cdecl;
    function Mean: Double; cdecl;
    function Mode: Integer; cdecl;
    function Median: Double; cdecl;
    function Middle: Double; cdecl;
    function Center: Integer; cdecl;
    function MostFreq(const null: Integer = -2147483648): Integer; cdecl;
    function LeastFreq(const null: Integer = -2147483648): Integer; cdecl;
    function BubbleSort(const ascending: Boolean = True): Integer; cdecl;
    function BubbleSort2(const ascending: Boolean = True): Integer; cdecl;
    function BubbleSortOptimized(const ascending: Boolean = True): Integer; cdecl;
    function QuickSort(const ascending: Boolean = True): Integer; cdecl;
    function QuickSort3W(const ascending: Boolean = True): Integer; cdecl;
    function QSort(const ascending: Boolean = True): Integer; cdecl;
    function CoctailSort(const ascending: Boolean = True): Integer; cdecl;
    function CoctailSort2(const ascending: Boolean = True): Integer; cdecl;
    function CombSort(const ascending: Boolean = True): Integer; cdecl;
    function GnomeSort(const ascending: Boolean = True): Integer; cdecl;
    function GnomeSortOptimized(const ascending: Boolean = True): Integer; cdecl;
    function HeapSort(const ascending: Boolean = True): Integer; cdecl;
    function InsertionSort(const ascending: Boolean = True): Integer; cdecl;
    function SelectionSort(const ascending: Boolean = True): Integer; cdecl;
    function SelectionSortBidirectional(const ascending: Boolean = True): Integer; cdecl;
    function SelectionSortBidirectional2(const ascending: Boolean = True): Integer; cdecl;
    function PancakeSort(const ascending: Boolean = True): Integer; cdecl;
    function MergeSort(const ascending: Boolean = True): Integer; cdecl;
    function MergeSortBU(const ascending: Boolean = True): Integer; cdecl;
    function ShellSort(const ascending: Boolean = True): Integer; cdecl;
    function BSort(const ascending: Boolean = True): Integer; cdecl;
    function BinarySort(const ascending: Boolean = True): Integer; cdecl;
    function BinarySorted(const ascending: Boolean = True): TIntegerArray; cdecl;
    function BinaryBoundL(const x: Integer; const ascending: Boolean = True): Integer; cdecl;
    function BinaryBoundR(const x: Integer; const ascending: Boolean = True): Integer; cdecl;
    function BinaryPosL(const x: Integer; const ascending: Boolean = True): Integer; cdecl;
    function BinaryPosR(const x: Integer; const ascending: Boolean = True): Integer; cdecl;
    function BinarySearch(const x: Integer; const ascending: Boolean = True): Integer; cdecl;
    function BinaryContains(const x: Integer; const ascending: Boolean = True): Boolean; cdecl;
    function BinaryLocate(const x: Integer; const ascending: Boolean = True): TRange; cdecl;
    function BinaryLocation(const x: Integer; const ascending: Boolean = True): TRange; cdecl;
    function BinaryAppend(const x: Integer; const ascending: Boolean = True): Integer; cdecl;
    function BinaryAdd(const x: Integer; const ascending: Boolean = True): TIntegerArray; cdecl;
    function BinarySearchF(const x: TRange; const ascending: Boolean = True): Integer; cdecl;
    function BinarySearchL(const x: TRange; const ascending: Boolean = True): Integer; cdecl;
    function BinaryUnique(const ascending: Boolean = True): Integer; cdecl;
    function BinaryUniqued(const ascending: Boolean = True): TIntegerArray; cdecl;
    function Split(const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl;
    function Split(const diff: Integer): T2DIntegerArray; overload; cdecl;
    function Sblit(const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl;
    function Sblit(const diff: Integer): T2DIntegerArray; overload; cdecl;
    function Group(const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl;
    function Group(const diff: Integer): T2DIntegerArray; overload; cdecl;
    function Groub(const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl;
    function Groub(const diff: Integer): T2DIntegerArray; overload; cdecl;
    function Invert: TIntegerArray; cdecl;
	{$ENDIF}
    {$IFDEF TPoint}
    function Bounds: TBox; overload; cdecl;
    function Bounds(var width, height: Integer): TBox; overload; cdecl;
    function Undupe: Integer; cdecl;
    function Unduped: TPointArray; cdecl;
    function Invert: TPointArray; cdecl;
    function Edge(const scan8W: Boolean = False): TPointArray; cdecl;
    function FloodFill(const start: TPoint; const area: TBox; const scan8W: Boolean = False): TPointArray; overload; cdecl;
    function FloodFill(const start: TPoint; const scan8W: Boolean = False): TPointArray; overload; cdecl;
    {$ENDIF}	
    {$IFDEF TRange}
    function TIA: TIntegerArray; cdecl;
    function T2DIA: T2DIntegerArray; cdecl;
    {$ENDIF}	
  end;
  X2DArrHelp = type helper for X2DArr
    function Blank: Boolean; overload; cdecl;
    function Empty: Boolean; overload; cdecl;
    function Size(var lengths: TIntegerArray): Int64; overload; cdecl;
    function Size: Int64; overload; cdecl;
    function Size(const aSize: Integer): Int64; overload; cdecl;
    function Size(const size1D, size2D: Integer): Int64; overload; cdecl;
    function Merge: XArr; overload; cdecl;  
  end;