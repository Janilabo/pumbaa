function Integer_Even(const x: Integer): Boolean; cdecl; inline; begin Result := x.Even; end;
function Integer_Odd(const x: Integer): Boolean; cdecl; inline; begin Result := x.Odd; end;
function Integer_Increase(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Increase(N); end;
function Integer_Decrease(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Decrease(N); end;
function Integer_Increment(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Increment(N); end;
function Integer_Decrement(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Decrement(N); end;
function Integer_DigitCount(const x: Integer): Integer; cdecl; begin Result := x.DigitCount; end;
function Integer_Digitz(const x: Integer): TIntegerArray; cdecl; begin Result := x.Digitz; end;
function Integer_Digits(const x: Integer): TIntegerArray; cdecl; begin Result := x.Digits; end;
function Integer_NegA(const x: Integer): Integer; cdecl; inline; begin Result := x.NegA; end;
function Integer_Neg(const x: Integer): Integer; cdecl; inline; begin Result := x.Neg; end;
function Integer_Negative(const x: Integer): Boolean; cdecl; inline; begin Result := x.Negative; end;
function Integer_Positive(const x: Integer): Boolean; cdecl; inline; begin Result := x.Positive; end;
function Integer_Neutral(const x: Integer): Boolean; cdecl; inline; begin Result := x.Neutral; end;
function Integer_Compare(const x, T: Integer): Integer; cdecl; inline; begin Result := x.Compare(T); end;
function Integer_Distance(const x, T: Integer): Integer; cdecl; inline; begin Result := x.Distance(T); end;
function Integer_Difference(const x, T: Integer): Integer; cdecl; inline; begin Result := x.Difference(T); end;
function Integer_Opposite(const x: Integer): Integer; cdecl; inline; begin Result := x.Opposite; end;
function Integer_Sign(const x: Integer): Integer; cdecl; inline; begin Result := x.Sign; end;
function Integer_Shuffle(const x: Integer): Integer; cdecl; begin Result := x.Shuffle; end;
function Integer_Oversize(const x, limit: Integer): Boolean; cdecl; inline; begin Result := x.Oversize(limit); end;
function Integer_Undersize(const x, limit: Integer): Boolean; cdecl; inline; begin Result := x.Undersize(limit); end;

function Int64_Even(const x: Int64): Boolean; cdecl; inline; begin Result := x.Even; end;
function Int64_Odd(const x: Int64): Boolean; cdecl; inline; begin Result := x.Odd; end;
function Int64_Increase(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Increase(N); end;
function Int64_Decrease(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Decrease(N); end;
function Int64_Increment(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Increment(N); end;
function Int64_Decrement(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Decrement(N); end;
function Int64_DigitCount(const x: Int64): Integer; cdecl; begin Result := x.DigitCount; end;
function Int64_Digitz(const x: Int64): TIntegerArray; cdecl; begin Result := x.Digitz; end;
function Int64_Digits(const x: Int64): TIntegerArray; cdecl; begin Result := x.Digits; end;
function Int64_Compare(const x, T: Int64): Integer; cdecl; inline; begin Result := x.Compare(T); end;
function Int64_Distance(const x, T: Int64): Int64; cdecl; inline; begin Result := x.Distance(T); end;
function Int64_Difference(const x, T: Int64): Int64; cdecl; inline; begin Result := x.Difference(T); end;
function Int64_Opposite(const x: Int64): Int64; cdecl; inline; begin Result := x.Opposite; end;
function Int64_Sign(const x: Int64): Integer; cdecl; inline; begin Result := x.Sign; end;
function Int64_Shuffle(const x: Int64): Int64; cdecl; begin Result := x.Shuffle; end;
function Int64_Oversize(const x, limit: Int64): Boolean; cdecl; inline; begin Result := x.Oversize(limit); end;
function Int64_Undersize(const x, limit: Int64): Boolean; cdecl; inline; begin Result := x.Undersize(limit); end;

function Double_Increase(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Increase(N); end;
function Double_Decrease(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Decrease(N); end;
function Double_Increment(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Increment(N); end;
function Double_Decrement(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Decrement(N); end;
function Double_Digits(const x: Double): TIntegerArray; cdecl; begin Result := x.Digits; end;
function Double_NegA(const x: Double): Double; cdecl; inline; begin Result := x.NegA; end;
function Double_Neg(const x: Double): Double; cdecl; inline; begin Result := x.Neg; end;
function Double_Negative(const x: Double): Boolean; cdecl; inline; begin Result := x.Negative; end;
function Double_Positive(const x: Double): Boolean; cdecl; inline; begin Result := x.Positive; end;
function Double_Neutral(const x: Double): Boolean; cdecl; inline; begin Result := x.Neutral; end;
function Double_MinDecimal(const x: Double): Double; cdecl; begin Result := x.MinDecimal; end;
function Double_MaxDecimal(const x: Double): Double; cdecl; begin Result := x.MaxDecimal; end;
function Double_Accuracy(const x: Double; const a: Int32): Double; cdecl; begin Result := x.Accuracy(a); end;
function Double_Compare(const x, T: Double): Int32; cdecl; inline; begin Result := x.Compare(T); end; 
function Double_Distance(const x, T: Double): Double; cdecl; inline; begin Result := x.Distance(T); end;
function Double_Difference(const x, T: Double): Double; cdecl; inline; begin Result := x.Difference(T); end;
function Double_Opposite(const x: Double): Double; cdecl; inline; begin Result := x.Opposite; end;
function Double_Sign(const x: Double): Int32; cdecl; inline; begin Result := x.Sign; end;
function Double_FixDegrees(const x: Double): Double; cdecl; begin Result := x.FixDegrees; end;
function Double_Degrees(const x: Double): Double; cdecl; begin Result := x.Degrees; end;
function Double_FixRadians(const x: Double): Double; cdecl; begin Result := x.FixRadians; end;
function Double_Radians(const x: Double; const compass: Boolean = False): Double; cdecl; begin Result := x.Radians(compass); end;
function Double_Percent(const x, position: Double): Double; cdecl; inline; begin Result := x.Percent(position); end;
function Double_Percentage(const x, percent: Double): Double; cdecl; inline; begin Result := x.Percentage(percent); end;
function Double_Oversize(const x, limit: Double): Boolean; cdecl; begin Result := x.Oversize(limit); end;
function Double_Undersize(const x, limit: Double): Boolean; cdecl; begin Result := x.Undersize(limit); end;

function Boolean_ToString(const x: Boolean): string; cdecl; begin Result := x.ToString; end;
function Boolean_ToInteger(const x: Boolean): Integer; cdecl; begin Result := x.ToInteger; end;
function Boolean_AsInteger(const x: Boolean): Integer; cdecl; begin Result := x.AsInteger; end;
function Boolean_Toggle(const x: Boolean): Boolean; cdecl; begin Result := x.Toggle; end;
function Boolean_Opposite(const x: Boolean): Boolean; cdecl; begin Result := x.Opposite; end;
function Boolean_Switch(var x: Boolean): Boolean; cdecl; begin Result := x.Switch; end;
function Boolean_Flip(var x: Boolean): Boolean; cdecl; begin Result := x.Flip; end;
function Boolean_Shuffle(var x: Boolean): Boolean; cdecl; begin Result := x.Shuffle; end;
function Boolean_Select1(const x: Boolean; const bTrue, bFalse: Integer): Integer; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select2(const x: Boolean; const bTrue, bFalse: Int64): Int64; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select3(const x: Boolean; const bTrue, bFalse: Double): Double; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select4(const x: Boolean; const bTrue, bFalse: string): string; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select5(const x: Boolean; const bTrue, bFalse: Char): Char; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select6(const x: Boolean; const bTrue, bFalse: Boolean): Boolean; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select7(const x: Boolean; const bTrue, bFalse: TPoint): TPoint; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select8(const x: Boolean; const bTrue, bFalse: TBox): TBox; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select9(const x: Boolean; const bTrue, bFalse: TRange): TRange; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Evaluate1(const x: Boolean; const bTrue, bFalse: Integer): Integer; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate2(const x: Boolean; const bTrue, bFalse: Int64): Int64; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate3(const x: Boolean; const bTrue, bFalse: Double): Double; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate4(const x: Boolean; const bTrue, bFalse: string): string; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate5(const x: Boolean; const bTrue, bFalse: Char): Char; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate6(const x: Boolean; const bTrue, bFalse: Boolean): Boolean; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate7(const x: Boolean; const bTrue, bFalse: TPoint): TPoint; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate8(const x: Boolean; const bTrue, bFalse: TBox): TBox; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate9(const x: Boolean; const bTrue, bFalse: TRange): TRange; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Enable(var x: Boolean): Boolean; cdecl; begin Result := x.Enable; end;
function Boolean_Disable(var x: Boolean): Boolean; cdecl; begin Result := x.Disable; end;
function Boolean_SetFalse(var x: Boolean): Integer; cdecl; begin Result := x.SetFalse; end;
function Boolean_SetTrue(var x: Boolean): Integer; cdecl; begin Result := x.SetTrue; end;
function Boolean_SwitchOn(var x: Boolean; const state: Boolean): Boolean; cdecl; begin Result := x.SwitchOn(state); end;
function Boolean_SwitchOff(var x: Boolean; const state: Boolean): Boolean; cdecl; begin Result := x.SwitchOff(state); end;

function String_Chars(const str: string): TCharArray; cdecl; begin Result := str.Chars; end;
function String_At(const str: string; const s: string; const index: Integer = 1): Boolean; cdecl; inline; begin Result := str.At(s, index); end;
function String_Get(const str: string; const index: Integer; const count: Integer): string; cdecl; inline; begin Result := str.Get(index, count); end;
function String_Pick(const str: string; const index: Integer; const count: Integer = 2147483647): string; cdecl; begin Result := str.Pick(index, count); end;
function String_Pos(const str: string; const s: string; const index: Integer = 1): Integer; cdecl; begin Result := str.Pos(s, index); end;
function String_Loc(const str: string; const s: string; const index: Integer = 2147483647): Integer; cdecl; begin Result := str.Loc(s, index); end;
function String_Find(const str: string; const s: string; const index: Integer = 1): Integer; cdecl; begin Result := str.Find(s, index); end;
function String_Location(const str: string; const s: string; const index: Integer = 2147483647): Integer; cdecl; begin Result := str.Location(s, index); end;
function String_Position(const str: string; const s: string; const index: Integer = 1): Integer; cdecl; begin Result := str.Position(s, index); end;
function String_Contains(const str: string; const s: string; const index: Integer = 1): Boolean; cdecl; begin Result := str.Contains(s, index); end;
function String_Includes(const str: string; const s: string; const index: Integer = 2147483647): Boolean; cdecl; begin Result := str.Includes(s, index); end;
function String_Between(const str: string; const s1, s2: string; const index: Integer = 1): string; cdecl; begin Result := str.Between(s1, s2, index); end;
function String_Count(const str: string; const s: string; const overlap: Boolean = True; const index: Integer = 1): Integer; cdecl; begin Result := str.Count(s, overlap, index); end;
function String_Amount(const str: string; const s: string; const overlap: Boolean = True; const index: Integer = 2147483647): Integer; cdecl; begin Result := str.Amount(s, overlap, index); end;
function String_FromLeft(const str: string; const count: Integer; const index: Integer = 1): string; cdecl; begin Result := str.FromLeft(count, index); end;
function String_FromRight(const str: string; const count: Integer; const index: Integer = 2147483647): string; cdecl; begin Result := str.FromRight(count, index); end;
function String_Explode1(const str: string; const d: string; const limit: Integer = -1): TStringArray; overload; cdecl; begin Result := str.Explode(d, limit); end;
function String_Explode2(const str: string; const d: TStringArray; const limit: Integer = -1): TStringArray; overload; cdecl; begin Result := str.Explode(d, limit); end;
function String_Slice(const str: string; const a, b: Integer): string; cdecl; begin Result := str.Slice(a, b); end;
function String_Chunk(const str: string; const a, b: Integer): string; cdecl; begin Result := str.Chunk(a, b); end;
function String_Reverse(var str: string): Boolean; cdecl; begin Result := str.Reverse; end;
function String_Flip(const str: string): string; cdecl; begin Result := str.Flip; end;
function String_Reversed(const str: string): string; cdecl; begin Result := str.Reversed; end;
function String_StartsWith(const str: string; const s: string): Boolean; cdecl; begin Result := str.StartsWith(s); end;
function String_EndsWith(const str: string; const s: string): Boolean; cdecl; begin Result := str.EndsWith(s); end;
function String_StartWith(var str: string; const s: string; const index: Integer = 1): Boolean; cdecl; begin Result := str.StartWith(s, index); end;
function String_EndWith(var str: string; const s: string; const index: Integer = 2147483647): Boolean; cdecl; begin Result := str.EndWith(s, index); end;
function String_After1(const str: string; const s: string; const index: Integer = 1): string; overload; cdecl; begin Result := str.After(s, index); end;
function String_After2(const str: string; const index: Integer; const count: Integer = 2147483647): string; overload; cdecl; begin Result := str.After(index, count); end;
function String_Ahead1(const str: string; const s: string; const index: Integer = 2147483647): string; overload; cdecl; begin Result := str.Ahead(s, index); end;
function String_Ahead2(const str: string; const index: Integer; const count: Integer = 2147483647): string; overload; cdecl; begin Result := str.Ahead(index, count); end;
function String_Before1(const str: string; const s: string; const index: Integer = 1): string; overload; cdecl; begin Result := str.Before(s, index); end;
function String_Before2(const str: string; const index: Integer; const count: Integer = 2147483647): string; overload; cdecl; begin Result := str.Before(index, count); end;
function String_Behind1(const str: string; const s: string; const index: Integer = 2147483647): string; overload; cdecl; begin Result := str.Behind(s, index); end;
function String_Behind2(const str: string; const index: Integer; const count: Integer = 2147483647): string; overload; cdecl; begin Result := str.Behind(index, count); end;
function String_Center(const str: string; const size: Integer; const fill: Char = #32): string; cdecl; begin Result := str.Center(size, fill); end;
function String_Stuff(const str: string; const s: string; const iFrom, iCount: Integer): string; cdecl; begin Result := str.Stuff(s, iFrom, iCount); end;
function String_Duplicate(const str: string; const x: Integer = 2): string; cdecl; begin Result := str.Duplicate(x); end;
function String_Duplicated(const str: string; const x: Integer; const glue: string): string; cdecl; begin Result := str.Duplicated(x, glue); end;
function String_Compare(const str: string; const s: string): Integer; cdecl; inline; begin Result := str.Compare(s); end;
function String_Quotatation(const str: string): string; cdecl; begin Result := str.Quotatation; end;
function String_PregQuote(const str: string; const regex: string = '.\+*?[^]$(){}=!<>|:-'): string; cdecl; begin Result := str.PregQuote(regex); end;
function String_TrimLeft(const str: string; const t: Char = #32): string; cdecl; begin Result := str.TrimLeft(t); end;
function String_TrimRight(const str: string; const t: Char = #32): string; cdecl; begin Result := str.TrimRight(t); end;
function String_Trim(const str: string; const t: Char = #32): string; cdecl; begin Result := str.Trim(t); end;
function String_ToTRange(const str: string): TRange; cdecl; begin Result := str.ToTRange; end;
function String_IDs1(const str: string): TIntegerArray; overload; cdecl; begin Result := str.IDs; end;
function String_IDs2(const str: string; const ID: TIntegerArray): TCharArray; overload; cdecl; begin Result := str.IDs(ID); end;
function String_IDs3(const str: string; const ID: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := str.IDs(ID, item); end;
function String_IDs4(const str: string; const ID: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := str.IDs(ID, items); end; 
function String_Exch(var str: string; const aIndex, bIndex: Integer): Boolean; cdecl; begin Result := str.Exch(aIndex, bIndex); end;
function String_Exchange(var str: string; const aIndex, bIndex: Integer): Boolean; cdecl; begin Result := str.Exchange(aIndex, bIndex); end;

function TPoint_Create1(const X, Y: Integer): TPoint; overload; cdecl; var pt: TPoint; begin Result := pt.Create(X, Y); end;
function TPoint_Create2(const value: Integer): TPoint; overload; cdecl; var pt: TPoint; begin Result := pt.Create(value); end;
function TPoint_Create3: TPoint; overload; cdecl; var pt: TPoint; begin Result := pt.Create; end;
function TPoint_Build(const X, Y: Integer): TPoint; cdecl; inline; var pt: TPoint; begin Result := pt.Build(X, Y); end;
function TPoint_Inside(const pt: TPoint; const bx: TBox): Boolean; cdecl; inline; begin Result := pt.Inside(bx); end;
function TPoint_InCircle(const pt, center: TPoint; const radius: Double): Boolean; cdecl; inline; begin Result := pt.InCircle(center, radius); end;
function TPoint_InEllipse(const pt, center: TPoint; const XRadius, YRadius: Double): Boolean; cdecl; inline; begin Result := pt.InEllipse(center, XRadius, YRadius); end;
function TPoint_AngleDegrees(const pt, target: TPoint; const compass: Boolean = False): Double; cdecl; begin Result := pt.AngleDegrees(target); end;
function TPoint_AngleRadians(const pt, target: TPoint): Double; cdecl; begin Result := pt.AngleRadians(target); end;
function TPoint_DistEuclidean(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistEuclidean(target); end;
function TPoint_DistEuclidean2(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistEuclidean2(target); end;
function TPoint_DistSquaredEuclidean(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistSquaredEuclidean(target); end;
function TPoint_DistManhattan(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistManhattan(target); end;
function TPoint_DistChebyshev(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistChebyshev(target); end;
function TPoint_Grid(const pt: TPoint; const rows, columns: Integer; const spaceVertical: Integer = 0; const spaceHorizontal: Integer = 0): TPointArray; cdecl; begin Result := pt.Grid(rows, columns, spaceVertical, spaceHorizontal); end;
function TPoint_Row(const pt: TPoint; const cells: Integer; const space: Integer = 0): TPointArray; cdecl; begin Result := pt.Row(cells, space); end;
function TPoint_Column(const pt: TPoint; const cells: Integer; const space: Integer = 0): TPointArray; cdecl; begin Result := pt.Column(cells, space); end;

function TBox_Create1(const minX, minY, maxX, maxY: Integer): TBox; overload; cdecl; var bx: TBox; begin Result.Create(minX, minY, maxX, maxY); end;
function TBox_Create2(const top, bottom: TPoint): TBox; overload; cdecl; var bx: TBox; begin Result.Create(top, bottom); end;
function TBox_Create3(const XValue, YValue: Integer): TBox; overload; cdecl; var bx: TBox; begin Result.Create(XValue, YValue); end;
function TBox_Create4(const target: TPoint): TBox; overload; cdecl; begin Result.Create(target); end;
function TBox_Create5(const value: Integer = 0): TBox; overload; cdecl; begin Result.Create(value); end; 
function TBox_Build1(const minX, minY, maxX, maxY: Integer): TBox; overload; cdecl; begin Result.Build(minX, minY, maxX, maxY); end;
function TBox_Build2(const top, bottom: TPoint): TBox; overload; cdecl; begin Result.Build(top, bottom); end;
function TBox_Build3(const valueX, valueY: Integer): TBox; overload; cdecl; begin Result.Build(valueX, valueY); end;
function TBox_Build4(const target: TPoint): TBox; overload; cdecl; begin Result.Build(target); end;
function TBox_Build5(const value: Integer = 0): TBox; overload; cdecl; begin Result.Build(value); end;
function TBox_Make1(const pt: TPoint; const radius: Integer = 0): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Make(pt, radius); end;
function TBox_Make2(const pt: TPoint; const wRadius, hRadius: Integer): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Make(pt, wRadius, hRadius); end;
function TBox_Form1(const pt: TPoint; const size: Integer = 1): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Form(pt, size); end;
function TBox_Form2(const pt: TPoint; const width, height: Integer): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Form(pt, width, height); end;
function TBox_Size(const bx: TBox; var width, height: Integer): Integer; cdecl; inline; begin Result := bx.Size(width, height); end;
function TBox_Area(const bx: TBox): Integer; cdecl; inline; begin Result := bx.Area; end;
function TBox_Diagonal(const bx: TBox): Double; cdecl; begin Result := bx.Diagonal; end;
function TBox_Width1(const bx: TBox): Integer; overload; cdecl; begin Result := bx.Width; end;
function TBox_Width2(var bx: TBox; const w: Integer): Integer; overload; cdecl; begin Result := bx.Width(w); end;
function TBox_Height1(const bx: TBox): Integer; overload; cdecl; begin Result := bx.Height; end;
function TBox_Height2(var bx: TBox; const h: Integer): Integer; overload; cdecl; begin Result := bx.Height(h); end;
function TBox_Expand(const bx: TBox; const change: Integer = 1): TBox; cdecl; begin Result := bx.Expand(change); end;
function TBox_Shrink(const bx: TBox; const change: Integer = 1): TBox; cdecl; begin Result := bx.Shrink(change); end;
function TBox_Resize(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.Resize(change); end;
function TBox_ResizeVertically(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeVertically(change); end;
function TBox_ResizeHorizontally(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeHorizontally(change); end;
function TBox_ResizeTop(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeTop(change); end;
function TBox_ResizeBottom(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeBottom(change); end;
function TBox_ResizeLeft(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeLeft(change); end;
function TBox_ResizeRight(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeRight(change); end;
function TBox_ResizeTopLeft(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeTopLeft(change); end;
function TBox_ResizeTopRight(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeTopRight(change); end;
function TBox_ResizeBottomRight(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeBottomRight(change); end;
function TBox_ResizeBottomLeft(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeBottomLeft(change); end;
function TBox_Equal(const bx: TBox; const b: TBox): Boolean; cdecl; inline; begin Result := bx.Equal(b); end;
function TBox_Contains1(const bx: TBox; const pt: TPoint): Boolean; overload; cdecl; begin Result := bx.Contains(pt); end;
function TBox_Contains2(const bx: TBox; const b: TBox): Boolean; overload; cdecl; begin Result := bx.Contains(b); end;
function TBox_Inside1(const bx: TBox; const target: TBox): Boolean; overload; cdecl; begin Result := bx.Inside(target); end;
function TBox_Inside2(const bx: TBox; const targets: TBoxArray): Boolean; overload; cdecl; begin Result := bx.Inside(targets); end;
function TBox_Center(const bx: TBox): TPoint; cdecl; begin Result := bx.Center; end;
function TBox_Envelope(const bx: TBox; const b: TBox): TBox; cdecl; begin Result := bx.Envelope(b); end;
function TBox_Overlap(const bx: TBox; const b: TBox): Boolean; cdecl; inline; begin Result := bx.Overlap(b); end;
function TBox_Intersect1(const bx: TBox; const b: TBox): TBox; overload; cdecl; begin Result := b.Intersect(b); end;
function TBox_Intersect2(const bx: TBox; const b: TBox; var iArea: TBox): Boolean; overload; cdecl; begin Result := bx.Intersect(b, iArea); end;
function TBox_Union(const bx: TBox; const b: TBox): TBox; cdecl; begin Result := bx.Union(b); end;
function TBox_Valid(const bx: TBox): Boolean; cdecl; inline; begin Result := bx.Valid; end;
function TBox_Invalid(const bx: TBox): Boolean; cdecl; begin Result := bx.Invalid; end;
function TBox_Similar1(const bx: TBox; const b: TBox; const maxWDiff, maxHDiff: Integer): Boolean; overload; cdecl; begin Result := bx.Similar(b, maxWDiff, maxHDiff); end;
function TBox_Similar2(const bx: TBox; const b: TBox; const diff: Integer): Boolean; overload; cdecl; begin Result := bx.Similar(b, diff); end;
function TBox_Fix(var bx: TBox): Boolean; cdecl; begin Result := bx.Fix; end;
function TBox_Constraint(var bx: TBox; const area: TBox): Boolean; cdecl; begin Result := bx.Constraint(area); end;
function TBox_Clip(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.Clip(area); end;
function TBox_Restrict(var bx: TBox; const area: TBox): Boolean; cdecl; begin Result := bx.Restrict(area); end;
function TBox_Clamp(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.Clamp(area); end;
function TBox_Points(const bx: TBox): TPointArray; cdecl; begin Result := bx.Points; end;
function TBox_TPA(const bx: TBox): TPointArray; cdecl; begin Result := bx.TPA; end;
function TBox_Grid(const bx: TBox; const rows, columns: Integer; const spaceVertical: Integer = 0; const spaceHorizontal: Integer = 0): TBoxArray; cdecl; begin Result := bx.Grid(rows, columns, spaceVertical, spaceHorizontal); end;
function TBox_Row(const bx: TBox; const cells: Integer; const space: Integer = 0): TBoxArray; cdecl; begin Result := bx.Row(cells, space); end;
function TBox_Column(const bx: TBox; const cells: Integer; const space: Integer = 0): TBoxArray; cdecl; begin Result := bx.Column(cells, space); end;
function TBox_CornerPoints(const bx: TBox): TPointArray; cdecl; begin Result := bx.CornerPoints; end;
function TBox_Corners(const bx: TBox): TPointArray; cdecl; begin Result := bx.Corners; end;
function TBox_SimilarSize1(const bx: TBox; const b: TBox; const widthDifferency, heightDifferency: Integer): Boolean; overload; cdecl; begin Result := bx.SimilarSize(b, widthDifferency, heightDifferency); end;
function TBox_SimilarSize2(const bx: TBox; const b: TBox; const differency: Integer): Boolean; overload; cdecl; begin Result := bx.SimilarSize(b, differency); end;
function TBox_Centered(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.Centered(area); end;
function TBox_CenterVertically(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.CenterVertically(area); end;
function TBox_CenterHorizontally(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.CenterHorizontally(area); end;

function TRange_Neutral(const range: TRange): Boolean; cdecl; begin Result := range.Neutral; end;
function TRange_Ascend(const range: TRange): TRange; cdecl; begin Result := range.Ascend; end;
function TRange_Ascending(const range: TRange): Boolean; cdecl; begin Result := range.Ascending; end;
function TRange_Descend(const range: TRange): TRange; cdecl; begin Result := range.Descend; end;
function TRange_Descending(const range: TRange): Boolean; cdecl; begin Result := range.Descending; end;
function TRange_Increasing(const range: TRange): Boolean; cdecl; begin Result := range.Increasing; end;
function TRange_Decreasing(const range: TRange): Boolean; cdecl; begin Result := range.Decreasing; end;
function TRange_Create1(const rStart, rStop: Integer): TRange; overload; cdecl; var range: TRange; begin Result := range.Create(rStart, rStop); end;
function TRange_Create2(const value: Integer): TRange; overload; cdecl; var range: TRange; begin Result := range.Create(value); end;
function TRange_Create3: TRange; overload; cdecl; var range: TRange; begin Result := range.Create; end;
function TRange_Build(const rStart: Integer = 0; const rStop: Integer = 0): Integer; cdecl; var range: TRange; begin Result := range.Build(rStart, rStop); end;
function TRange_Grab(const range: TRange): TRange; cdecl; begin Result := range.Grab; end;
function TRange_Size(const range: TRange): Integer; cdecl; begin Result := range.Size; end;
function TRange_Length(const range: TRange): Integer; cdecl; begin Result := range.Length; end;
function TRange_Lowest(const range: TRange): Integer; cdecl; begin Result := range.Lowest; end;
function TRange_Minimum(const range: TRange): Integer; cdecl; begin Result := range.Minimum; end;
function TRange_Highest(const range: TRange): Integer; cdecl; begin Result := range.Highest; end;
function TRange_Maximum(const range: TRange): Integer; cdecl; begin Result := range.Maximum; end;
function TRange_Digits(const range: TRange): TIntegerArray; cdecl; begin Result := range.Digits; end;
function TRange_Ints(const range: TRange): TIntegerArray; cdecl; begin Result := range.Ints; end;
function TRange_Values(const range: TRange): TIntegerArray; cdecl; begin Result := range.Values; end;
function TRange_TIA(const range: TRange): TIntegerArray; cdecl; begin Result := range.TIA; end;
function TRange_Normalize(const range: TRange): TRange; cdecl; begin Result := range.Normalize; end;
function TRange_Overlapping(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Overlapping(b); end;
function TRange_Overlap(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Overlap(b); end;
function TRange_Intersect1(const range: TRange; const b: TRange): TRange; overload; cdecl; begin Result := range.Intersect(b); end;
function TRange_Intersect2(const range: TRange; const b: TRange; var iZone: TRange): Boolean; overload; cdecl; begin range.Intersect(b, iZone); end;
function TRange_Union(const range: TRange; const b: TRange): TRange; cdecl; begin Result := range.Union(b); end;
function TRange_Shift(const range: TRange; const delta: Integer): TRange; cdecl; begin Result := range.Shift(delta); end;
function TRange_Contains1(const range: TRange; const x: Integer): Boolean; overload; cdecl; begin Result := range.Contains(x); end;
function TRange_Contains2(const range: TRange; const x: TRange): Boolean; overload; cdecl; begin Result := range.Contains(x); end;
function TRange_Reversed(const range: TRange): TRange; cdecl; begin Result := range.Reversed; end;
function TRange_Reverse(var range: TRange): Boolean; cdecl; begin Result := range.Reverse; end;
function TRange_Equals(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Equals(b); end;
function TRange_Differs(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Differs(b); end;
function TRange_Equal(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Equal(b); end;
function TRange_Differ(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Differ(b); end;
function TRange_Clamp(const range: TRange; const zone: TRange): TRange; cdecl; begin Result := range.Clamp(zone); end;
function TRange_ClampMax(const range: TRange; const maxValue: Integer): TRange; cdecl; begin Result := range.ClampMax(maxValue); end;
function TRange_ClampMin(const range: TRange; const minValue: Integer): TRange; cdecl; begin Result := range.ClampMin(minValue); end;
function TRange_Restrict(var range: TRange; const zone: TRange): Boolean; cdecl; begin Result := range.Restrict(zone); end;
function TRange_RestrictMin(var range: TRange; const minValue: Integer): Boolean; cdecl; begin Result := range.RestrictMin(minValue); end;
function TRange_RestrictMax(var range: Trange; const maxValue: Integer): Boolean; cdecl; begin Result := range.RestrictMax(maxValue); end;
function TRange_Clip(const range: TRange; const zone: TRange): TRange; cdecl; begin Result := range.Clip(zone); end;
function TRange_ClipMin(const range: TRange; const minValue: Integer): TRange; cdecl; begin Result := range.ClipMin(minValue); end;
function TRange_ClipMax(const range: TRange; const maxValue: Integer): TRange; cdecl; begin Result := range.ClipMax(maxValue); end;
function TRange_Distribute(const range: TRange; const parts: Integer): TRangeArray; cdecl; begin Result := range.Distribute(parts); end;
function TRange_Partition(const range: TRange; const size: Integer): TRangeArray; cdecl; begin Result := range.Partition(size); end;
function TRange_Divide(const range: TRange; const size: Integer): TRangeArray; cdecl; begin Result := range.Divide(size); end;
function TRange_Touch(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Touch(b); end;
function TRange_Touches(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Touches(b); end;
function TRange_Distance(const range: TRange; const b: TRange): Integer; cdecl; begin Result := range.Distance(b); end;
function TRange_DistHausdorff(const range: TRange; const b: TRange): Integer; cdecl; begin Result := range.DistHausdorff(b); end;
function TRange_Digit(const range: TRange; const x: Integer): Boolean; cdecl; inline; begin Result := range.Digit(x); end;
function TRange_Value(const range: TRange; const x: Integer): Boolean; cdecl; inline; begin Result := range.Value(x); end;
function TRange_Middle(const range: TRange): Double; cdecl; begin Result := range.Middle; end;
function TRange_Center(const range: TRange): Integer; cdecl; begin Result := range.Center; end;
function TRange_Str(const range: TRange): string; cdecl; begin Result := range.Str; end;

function TIntegerArray_Descending(const arr: TIntegerArray): Boolean; cdecl; begin Result := arr.Descending; end;
function TIntegerArray_Ascending(const arr: TIntegerArray): Boolean; cdecl; begin Result := arr.Ascending; end;
function TIntegerArray_Bounds1(const arr: TIntegerArray): TRange; overload; cdecl; begin Result := arr.Bounds; end;
function TIntegerArray_Bounds2(const arr: TIntegerArray; var aSize: Integer): TRange; overload; cdecl; begin Result := arr.Bounds(aSize); end;
function TIntegerArray_Range(const arr: TIntegerArray): TRange; cdecl; begin Result := arr.Range; end;
function TIntegerArray_Undupe(var arr: TIntegerArray): Integer; cdecl; begin Result := arr.Undupe; end;
function TIntegerArray_Unduped(const arr: TIntegerArray): TIntegerArray; cdecl; begin Result := arr.Unduped; end;
function TIntegerArray_Numberline(const arr: TIntegerArray): TIntegerArray; cdecl; begin Result := arr.Numberline; end;
function TIntegerArray_Lowest(const arr: TIntegerArray): Integer; cdecl; begin Result := arr.Lowest; end;
function TIntegerArray_Highest(const arr: TIntegerArray): Integer; cdecl; begin Result := arr.Highest; end;
function TIntegerArray_Mini1(const arr: TIntegerArray; const aAscending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Mini(aAscending, start); end;
function TIntegerArray_Mini2(const arr: TIntegerArray; const start: Integer; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Mini(start, aAscending); end;
function TIntegerArray_Maxi1(const arr: TIntegerArray; const aAscending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Maxi(aAscending, start); end;
function TIntegerArray_Maxi2(const arr: TIntegerArray; const start: Integer; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Maxi(aAscending, start); end;
function TIntegerArray_Sum(const arr: TIntegerArray): Int64; cdecl; begin Result := arr.Sum; end;
function TIntegerArray_Density(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Density; end;
function TIntegerArray_Mean(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Mean; end;
function TIntegerArray_Mode(const arr: TIntegerArray): Integer; cdecl; begin Result := arr.Mode; end;
function TIntegerArray_Median(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Median; end;
function TIntegerArray_Middle(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Middle; end;
function TIntegerArray_Center(const arr: TIntegerArray): Integer; cdecl; begin Result := arr.Center; end;
function TIntegerArray_MostFrequent(const arr: TIntegerArray; const null: Integer = -2147483648): Integer; cdecl; begin Result := arr.MostFreq(null); end;
function TIntegerArray_LeastFrequent(const arr: TIntegerArray; const null: Integer = -2147483648): Integer; cdecl; begin Result := arr.LeastFreq(null); end;
function TIntegerArray_BubbleSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BubbleSort(aAscending); end;
function TIntegerArray_BubbleSort2(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BubbleSort2(aAscending); end;
function TIntegerArray_BubbleSortOptimized(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BubbleSortOptimized(aAscending); end;
function TIntegerArray_QuickSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.QuickSort(aAscending); end;
function TIntegerArray_QuickSort3W(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.QuickSort3W(aAscending); end;
function TIntegerArray_QSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.QSort(aAscending); end;
function TIntegerArray_CoctailSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.CoctailSort(aAscending); end;
function TIntegerArray_CoctailSort2(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.CoctailSort2(aAscending); end;
function TIntegerArray_CombSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.CombSort(aAscending); end;
function TIntegerArray_GnomeSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.GnomeSort(aAscending); end;
function TIntegerArray_GnomeSortOptimized(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.GnomeSortOptimized(aAscending); end;
function TIntegerArray_HeapSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.HeapSort(aAscending); end;
function TIntegerArray_InsertionSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.InsertionSort(aAscending); end;
function TIntegerArray_SelectionSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.SelectionSort(aAscending); end;
function TIntegerArray_SelectionSortBidirectional(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.SelectionSortBidirectional(aAscending); end;
function TIntegerArray_SelectionSortBidirectional2(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.SelectionSortBidirectional2(aAscending); end;
function TIntegerArray_PancakeSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.PancakeSort(aAscending); end;
function TIntegerArray_MergeSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.MergeSort(aAscending); end;
function TIntegerArray_MergeSortBU(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.MergeSortBU(aAscending); end;
function TIntegerArray_ShellSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.ShellSort(aAscending); end;
function TIntegerArray_BSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BSort(aAscending); end;
function TIntegerArray_BinarySort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySort(aAscending); end;
function TIntegerArray_BinarySorted(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; cdecl; begin Result := arr.BinarySorted(aAscending); end;
function TIntegerArray_BinaryBoundL(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryBoundL(x, aAscending); end;
function TIntegerArray_BinaryBoundR(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryBoundR(x, aAscending); end;
function TIntegerArray_BinaryPosL(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryPosL(x, aAscending); end;
function TIntegerArray_BinaryPosR(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryPosR(x, aAscending); end;
function TIntegerArray_BinarySearch(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearch(x, aAscending); end;
function TIntegerArray_BinaryContains(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Boolean; cdecl; begin Result := arr.BinaryContains(x, aAscending); end;
function TIntegerArray_BinaryLocate(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryLocate(x, aAscending); end;
function TIntegerArray_BinaryLocation(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryLocation(x, aAscending); end;
function TIntegerArray_BinaryAppend(var arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryAppend(x, aAscending); end;
function TIntegerArray_BinaryAdd(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): TIntegerArray; cdecl; begin Result := arr.BinaryAdd(x, aAscending); end;
function TIntegerArray_BinarySearchF(const arr: TIntegerArray; const x: TRange; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearchF(x, aAscending); end;
function TIntegerArray_BinarySearchL(const arr: TIntegerArray; const x: TRange; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearchL(x, aAscending); end;
function TIntegerArray_BinaryUnique(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryUnique(aAscending); end;
function TIntegerArray_BinaryUniqued(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; cdecl; begin Result := arr.BinaryUniqued(aAscending); end;
function TIntegerArray_Split1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Split(minDiff, maxDiff); end;
function TIntegerArray_Split2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Split(diff); end;
function TIntegerArray_Sblit1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Sblit(minDiff, maxDiff); end;
function TIntegerArray_Sblit2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Sblit(diff); end;
function TIntegerArray_Group1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Group(minDiff, maxDiff); end;
function TIntegerArray_Group2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Group(diff); end;
function TIntegerArray_Groub1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Groub(minDiff, maxDiff); end;
function TIntegerArray_Groub2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Groub(diff); end;
function TIntegerArray_Invert(const arr: TIntegerArray): TIntegerArray; cdecl; begin Result := arr.Invert; end;
function TIntegerArray_Init(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := T1D.Init(arr); end;

function TPointArray_Bounds1(const arr: TPointArray): TBox; overload; cdecl; begin Result := arr.Bounds; end;
function TPointArray_Bounds2(const arr: TPointArray; var width, height: Integer): TBox; overload; cdecl; begin Result := arr.Bounds(width, height); end;
function TPointArray_Undupe(var arr: TPointArray): Integer; cdecl; begin Result := arr.Undupe; end;
function TPointArray_Unduped(const arr: TPointArray): TPointArray; cdecl; begin Result := arr.Unduped; end;
function TPointArray_Invert(const arr: TPointArray): TPointArray; cdecl; begin Result := arr.Invert; end;
function TPointArray_Edge(const arr: TPointArray; const scan8W: Boolean = False): TPointArray; cdecl; begin Result := arr.Edge(scan8W); end;
function TPointArray_FloodFill1(const arr: TPointArray; const start: TPoint; const area: TBox; const scan8W: Boolean = False): TPointArray; overload; cdecl; begin Result := arr.FloodFill(start, area, scan8W); end;
function TPointArray_FloodFill2(const arr: TPointArray; const start: TPoint; const scan8W: Boolean = False): TPointArray; overload; cdecl; begin Result := arr.FloodFill(start, scan8W); end;

function TRangeArray_TIA(const arr: TRangeArray): TIntegerArray; cdecl; begin Result := arr.TIA; end;
function TRangeArray_T2DIA(const arr: TRangeArray): T2DIntegerArray; cdecl; begin Result := arr.T2DIA; end;

function TArray_Add1(const arr: TIntegerArray; const item: Integer; const duplicates: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add2(const arr: TDoubleArray; const item: Double; const duplicates: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add3(const arr: TStringArray; const item: string; const duplicates: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add4(const arr: TCharArray; const item: Char; const duplicates: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add5(const arr: TBooleanArray; const item: Boolean; const duplicates: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add6(const arr: TPointArray; const item: TPoint; const duplicates: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add7(const arr: TBoxArray; const item: TBox; const duplicates: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add8(const arr: TRangeArray; const item: TRange; const duplicates: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add9(const arr: TIntegerArray; const items: TIntegerArray; const duplicates: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add10(const arr: TDoubleArray; const items: TDoubleArray; const duplicates: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add11(const arr: TStringArray; const items: TStringArray; const duplicates: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add12(const arr: TCharArray; const items: TCharArray; const duplicates: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add13(const arr: TBooleanArray; const items: TBooleanArray; const duplicates: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add14(const arr: TPointArray; const items: TPointArray; const duplicates: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add15(const arr: TBoxArray; const items: TBoxArray; const duplicates: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add16(const arr: TRangeArray; const items: TRangeArray; const duplicates: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;

function TArray_AllEqual1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;

function TArray_AllSame1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;

function TArray_AllUnique1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;

function TArray_Append1(var arr: TIntegerArray; const item: Integer; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append2(var arr: TDoubleArray; const item: Double; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append3(var arr: TStringArray; const item: string; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append4(var arr: TCharArray; const item: Char; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append5(var arr: TBooleanArray; const item: Boolean; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append6(var arr: TPointArray; const item: TPoint; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append7(var arr: TBoxArray; const item: TBox; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append8(var arr: TRangeArray; const item: TRange; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append9(var arr: TIntegerArray; const items: TIntegerArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append10(var arr: TDoubleArray; const items: TDoubleArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append11(var arr: TStringArray; const items: TStringArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append12(var arr: TCharArray; const items: TCharArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append13(var arr: TBooleanArray; const items: TBooleanArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append14(var arr: TPointArray; const items: TPointArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append15(var arr: TBoxArray; const items: TBoxArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append16(var arr: TRangeArray; const items: TRangeArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := arr.Append(items, duplicates); end;

function TArray_Build1(const item: Integer; const aSize: Integer = 1): TIntegerArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build2(const item: Double; const aSize: Integer = 1): TDoubleArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build3(const item: string; const aSize: Integer = 1): TStringArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build4(const item: Char; const aSize: Integer = 1): TCharArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build5(const item: Boolean; const aSize: Integer = 1): TBooleanArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build6(const item: TPoint; const aSize: Integer = 1): TPointArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build7(const item: TBox; const aSize: Integer = 1): TBoxArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build8(const item: TRange; const aSize: Integer = 1): TRangeArray; overload; cdecl; begin Result.Build(item, aSize); end;

function TArray_BuiltWith1(const arr, allowed: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(allowed); end;
function TArray_BuiltWith2(const arr, allowed: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(allowed); end;
function TArray_BuiltWith3(const arr, allowed: TStringArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(allowed); end;
function TArray_BuiltWith4(const arr, allowed: TCharArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(allowed); end;
function TArray_BuiltWith5(const arr, allowed: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(allowed); end;
function TArray_BuiltWith6(const arr, allowed: TPointArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(allowed); end;
function TArray_BuiltWith7(const arr, allowed: TBoxArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(allowed); end;
function TArray_BuiltWith8(const arr, allowed: TRangeArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(allowed); end;

function TArray_BuiltWithout1(const arr, forbidden: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout2(const arr, forbidden: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout3(const arr, forbidden: TStringArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout4(const arr, forbidden: TCharArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout5(const arr, forbidden: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout6(const arr, forbidden: TPointArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout7(const arr, forbidden: TBoxArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout8(const arr, forbidden: TRangeArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;

function TArray_Clear1(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear2(var arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear3(var arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear4(var arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear5(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear6(var arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear7(var arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear8(var arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;

function TArray_Clone1(const arr: TIntegerArray; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone2(const arr: TDoubleArray; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone3(const arr: TStringArray; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone4(const arr: TCharArray; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone5(const arr: TBooleanArray; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone6(const arr: TPointArray; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone7(const arr: TBoxArray; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone8(const arr: TRangeArray; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone9(const arr: TIntegerArray; const ID: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone10(const arr: TDoubleArray; const ID: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone11(const arr: TStringArray; const ID: TIntegerArray): TStringArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone12(const arr: TCharArray; const ID: TIntegerArray): TCharArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone13(const arr: TBooleanArray; const ID: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone14(const arr: TPointArray; const ID: TIntegerArray): TPointArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone15(const arr: TBoxArray; const ID: TIntegerArray): TBoxArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone16(const arr: TRangeArray; const ID: TIntegerArray): TRangeArray; overload; cdecl; begin Result := arr.Clone(ID); end;

function TArray_Combine1(const arr, b: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine2(const arr, b: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine3(const arr, b: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine4(const arr, b: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine5(const arr, b: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine6(const arr, b: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine7(const arr, b: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine8(const arr, b: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Combine(b); end;

function TArray_Contains1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains3(const arr: TStringArray; const item: string; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains4(const arr: TCharArray; const item: Char; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;

function TArray_Copy1(const arr: TIntegerArray; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy2(const arr: TDoubleArray; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy3(const arr: TStringArray; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy4(const arr: TCharArray; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy5(const arr: TBooleanArray; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy6(const arr: TPointArray; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy7(const arr: TBoxArray; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy8(const arr: TRangeArray; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Copy(index, count); end;

function TArray_Create1(const item: Integer): TIntegerArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create2(const item: Double): TDoubleArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create3(const item: string): TStringArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create4(const item: Char): TCharArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create5(const item: Boolean): TBooleanArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create6(const item: TPoint): TPointArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create7(const item: TBox): TBoxArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create8(const item: TRange): TRangeArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create9(const aSize: Integer; const item: Integer): TIntegerArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create10(const aSize: Integer; const item: Double): TDoubleArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create11(const aSize: Integer; const item: string): TStringArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create12(const aSize: Integer; const item: Char): TCharArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create13(const aSize: Integer; const item: Boolean): TBooleanArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create14(const aSize: Integer; const item: TPoint): TPointArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create15(const aSize: Integer; const item: TBox): TBoxArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create16(const aSize: Integer; const item: TRange): TRangeArray; overload; cdecl; begin Result.Create(aSize, item); end;

function TArray_Deduplicate1(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Deduplicate; end;
function TArray_Deduplicate2(var arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Deduplicate; end;
function TArray_Deduplicate3(var arr: TStringArray): Integer; overload; cdecl; begin Result := arr.Deduplicate; end;
function TArray_Deduplicate4(var arr: TCharArray): Integer; overload; cdecl; begin Result := arr.Deduplicate; end;
function TArray_Deduplicate5(var arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Deduplicate; end;
function TArray_Deduplicate6(var arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Deduplicate; end;
function TArray_Deduplicate7(var arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.Deduplicate; end;
function TArray_Deduplicate8(var arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.Deduplicate; end;

function TArray_Delete1(var arr: TIntegerArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete2(var arr: TDoubleArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete3(var arr: TStringArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete4(var arr: TCharArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete5(var arr: TBooleanArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete6(var arr: TPointArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete7(var arr: TBoxArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete8(var arr: TRangeArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete9(var arr: TIntegerArray; const ID: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete10(var arr: TDoubleArray; const ID: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete11(var arr: TStringArray; const ID: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete12(var arr: TCharArray; const ID: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete13(var arr: TBooleanArray; const ID: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete14(var arr: TPointArray; const ID: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete15(var arr: TBoxArray; const ID: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete16(var arr: TRangeArray; const ID: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Delete(ID); end;

function TArray_Differ1(const arr, target: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ2(const arr, target: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ3(const arr, target: TStringArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ4(const arr, target: TCharArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ5(const arr, target: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ6(const arr, target: TPointArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ7(const arr, target: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ8(const arr, target: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;

function TArray_Distribute1(const arr: TIntegerArray; const parts: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute2(const arr: TDoubleArray; const parts: Integer): T2DDoubleArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute3(const arr: TStringArray; const parts: Integer): T2DStringArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute4(const arr: TCharArray; const parts: Integer): T2DCharArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute5(const arr: TBooleanArray; const parts: Integer): T2DBooleanArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute6(const arr: TPointArray; const parts: Integer): T2DPointArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute7(const arr: TBoxArray; const parts: Integer): T2DBoxArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute8(const arr: TRangeArray; const parts: Integer): T2DRangeArray; overload; cdecl; begin Result := arr.Distribute(parts); end;

function TArray_Dump1(var arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump2(var arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump3(var arr: TStringArray; const items: TStringArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump4(var arr: TCharArray; const items: TCharArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump5(var arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump6(var arr: TPointArray; const items: TPointArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump7(var arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump8(var arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Dump(items, index); end;

function TArray_Dupe1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Dupe; end;

function TArray_Duplicate1(const arr: TIntegerArray; const xTimes: Integer = 1): TIntegerArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate2(const arr: TDoubleArray; const xTimes: Integer = 1): TDoubleArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate3(const arr: TStringArray; const xTimes: Integer = 1): TStringArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate4(const arr: TCharArray; const xTimes: Integer = 1): TCharArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate5(const arr: TBooleanArray; const xTimes: Integer = 1): TBooleanArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate6(const arr: TPointArray; const xTimes: Integer = 1): TPointArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate7(const arr: TBoxArray; const xTimes: Integer = 1): TBoxArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate8(const arr: TRangeArray; const xTimes: Integer = 1): TRangeArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;

function TArray_Empty1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;

function TArray_Equal1(const arr, target: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal2(const arr, target: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal3(const arr, target: TStringArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal4(const arr, target: TCharArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal5(const arr, target: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal6(const arr, target: TPointArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal7(const arr, target: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal8(const arr, target: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;

function TArray_Erase1(var arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase2(var arr: TDoubleArray; const item: Double; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase3(var arr: TStringArray; const item: string; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase4(var arr: TCharArray; const item: Char; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase5(var arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase6(var arr: TPointArray; const item: TPoint; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase7(var arr: TBoxArray; const item: TBox; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase8(var arr: TRangeArray; const item: TRange; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase9(var arr: TIntegerArray; const item: Integer; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase10(var arr: TDoubleArray; const item: Double; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase11(var arr: TStringArray; const item: string; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase12(var arr: TCharArray; const item: Char; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase13(var arr: TBooleanArray; const item: Boolean; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase14(var arr: TPointArray; const item: TPoint; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase15(var arr: TBoxArray; const item: TBox; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase16(var arr: TRangeArray; const item: TRange; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase17(var arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase18(var arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase19(var arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase20(var arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase21(var arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase22(var arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase23(var arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase24(var arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase25(var arr: TIntegerArray; const items: TIntegerArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase26(var arr: TDoubleArray; const items: TDoubleArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase27(var arr: TStringArray; const items: TStringArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase28(var arr: TCharArray; const items: TCharArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase29(var arr: TBooleanArray; const items: TBooleanArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase30(var arr: TPointArray; const items: TPointArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase31(var arr: TBoxArray; const items: TBoxArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase32(var arr: TRangeArray; const items: TRangeArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Erase(items, all); end;

function TArray_Excessive1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;

function TArray_Exch1(var arr: TIntegerArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch2(var arr: TDoubleArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch3(var arr: TStringArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch4(var arr: TCharArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch5(var arr: TBooleanArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch6(var arr: TPointArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch7(var arr: TBoxArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch8(var arr: TRangeArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;

function TArray_Exchange1(var arr: TIntegerArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange2(var arr: TDoubleArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange3(var arr: TStringArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange4(var arr: TCharArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange5(var arr: TBooleanArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange6(var arr: TPointArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange7(var arr: TBoxArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange8(var arr: TRangeArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;

function TArray_Extend1(const arr: TIntegerArray; const item: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend2(const arr: TDoubleArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend3(const arr: TStringArray; const item: string): TStringArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend4(const arr: TCharArray; const item: Char): TCharArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend5(const arr: TBooleanArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend6(const arr: TPointArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend7(const arr: TBoxArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend8(const arr: TRangeArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend9(const arr: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend10(const arr: TDoubleArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend11(const arr: TStringArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend12(const arr: TCharArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend13(const arr: TBooleanArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend14(const arr: TPointArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend15(const arr: TBoxArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend16(const arr: TRangeArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Extend(items); end;

function TArray_Extract1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract3(const arr: TStringArray; const item: string; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract4(const arr: TCharArray; const item: Char; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Extract(items, index); end;

function TArray_ExtractEvery1(const arr: TIntegerArray; const X: Integer = 1; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery2(const arr: TDoubleArray; const X: Integer = 1; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery3(const arr: TStringArray; const X: Integer = 1; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery4(const arr: TCharArray; const X: Integer = 1; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery5(const arr: TBooleanArray; const X: Integer = 1; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery6(const arr: TPointArray; const X: Integer = 1; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery7(const arr: TBoxArray; const X: Integer = 1; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery8(const arr: TRangeArray; const X: Integer = 1; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;

function TArray_Fill1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill2(const arr: TDoubleArray; const item: Double; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill3(const arr: TStringArray; const item: string; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill4(const arr: TCharArray; const item: Char; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill6(const arr: TPointArray; const item: TPoint; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill7(const arr: TBoxArray; const item: TBox; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill8(const arr: TRangeArray; const item: TRange; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;

function TArray_Filter1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter3(const arr: TStringArray; const item: string; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter4(const arr: TCharArray; const item: Char; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Filter(items, index); end;

function TArray_FilterEvery1(const arr: TIntegerArray; const X: Integer = 1; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery2(const arr: TDoubleArray; const X: Integer = 1; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery3(const arr: TStringArray; const X: Integer = 1; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery4(const arr: TCharArray; const X: Integer = 1; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery5(const arr: TBooleanArray; const X: Integer = 1; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery6(const arr: TPointArray; const X: Integer = 1; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery7(const arr: TBoxArray; const X: Integer = 1; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery8(const arr: TRangeArray; const X: Integer = 1; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;

function TArray_Find1(const arr: TIntegerArray; const ID: TRange; const item: Integer): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find2(const arr: TDoubleArray; const ID: TRange; const item: Double): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find3(const arr: TStringArray; const ID: TRange; const item: string): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find4(const arr: TCharArray; const ID: TRange; const item: Char): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find5(const arr: TBooleanArray; const ID: TRange; const item: Boolean): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find6(const arr: TPointArray; const ID: TRange; const item: TPoint): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find7(const arr: TBoxArray; const ID: TRange; const item: TBox): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find8(const arr: TRangeArray; const ID: TRange; const item: TRange): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find9(const arr: TIntegerArray; const ID: TIntegerArray; const item: Integer): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find10(const arr: TDoubleArray; const ID: TIntegerArray; const item: Double): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find11(const arr: TStringArray; const ID: TIntegerArray; const item: string): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find12(const arr: TCharArray; const ID: TIntegerArray; const item: Char): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find13(const arr: TBooleanArray; const ID: TIntegerArray; const item: Boolean): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find14(const arr: TPointArray; const ID: TIntegerArray; const item: TPoint): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find15(const arr: TBoxArray; const ID: TIntegerArray; const item: TBox): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find16(const arr: TRangeArray; const ID: TIntegerArray; const item: TRange): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find17(const arr: TIntegerArray; const ID: TRange; const items: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find18(const arr: TDoubleArray; const ID: TRange; const items: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find19(const arr: TStringArray; const ID: TRange; const items: TStringArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find20(const arr: TCharArray; const ID: TRange; const items: TCharArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find21(const arr: TBooleanArray; const ID: TRange; const items: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find22(const arr: TPointArray; const ID: TRange; const items: TPointArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find23(const arr: TBoxArray; const ID: TRange; const items: TBoxArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find24(const arr: TRangeArray; const ID: TRange; const items: TRangeArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find25(const arr: TIntegerArray; const ID: TIntegerArray; const items: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find26(const arr: TDoubleArray; const ID: TIntegerArray; const items: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find27(const arr: TStringArray; const ID: TIntegerArray; const items: TStringArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find28(const arr: TCharArray; const ID: TIntegerArray; const items: TCharArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find29(const arr: TBooleanArray; const ID: TIntegerArray; const items: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find30(const arr: TPointArray; const ID: TIntegerArray; const items: TPointArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find31(const arr: TBoxArray; const ID: TIntegerArray; const items: TBoxArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find32(const arr: TRangeArray; const ID: TIntegerArray; const items: TRangeArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;

function TArray_Flip1(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip2(var arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip3(var arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip4(var arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip5(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip6(var arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip7(var arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip8(var arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;

function TArray_FromLeft1(const arr: TIntegerArray; const count: Integer; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft2(const arr: TDoubleArray; const count: Integer; const index: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft3(const arr: TStringArray; const count: Integer; const index: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft4(const arr: TCharArray; const count: Integer; const index: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft5(const arr: TBooleanArray; const count: Integer; const index: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft6(const arr: TPointArray; const count: Integer; const index: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft7(const arr: TBoxArray; const count: Integer; const index: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft8(const arr: TRangeArray; const count: Integer; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;

function TArray_FromRight1(const arr: TIntegerArray; const count: Integer; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight2(const arr: TDoubleArray; const count: Integer; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight3(const arr: TStringArray; const count: Integer; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight4(const arr: TCharArray; const count: Integer; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight5(const arr: TBooleanArray; const count: Integer; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight6(const arr: TPointArray; const count: Integer; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight7(const arr: TBoxArray; const count: Integer; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight8(const arr: TRangeArray; const count: Integer; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;

function TArray_Get1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get9(const arr: TIntegerArray; const ID: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get10(const arr: TDoubleArray; const ID: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get11(const arr: TStringArray; const ID: TIntegerArray): TStringArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get12(const arr: TCharArray; const ID: TIntegerArray): TCharArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get13(const arr: TBooleanArray; const ID: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get14(const arr: TPointArray; const ID: TIntegerArray): TPointArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get15(const arr: TBoxArray; const ID: TIntegerArray): TBoxArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get16(const arr: TRangeArray; const ID: TIntegerArray): TRangeArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get17(const arr: TIntegerArray; const ID: TRange): TIntegerArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get18(const arr: TDoubleArray; const ID: TRange): TDoubleArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get19(const arr: TStringArray; const ID: TRange): TStringArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get20(const arr: TCharArray; const ID: TRange): TCharArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get21(const arr: TBooleanArray; const ID: TRange): TBooleanArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get22(const arr: TPointArray; const ID: TRange): TPointArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get23(const arr: TBoxArray; const ID: TRange): TBoxArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get24(const arr: TRangeArray; const ID: TRange): TRangeArray; overload; cdecl; begin Result := arr.Get(ID); end;

function TArray_Group1(const arr: TIntegerArray): T2DIntegerArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group2(const arr: TDoubleArray): T2DDoubleArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group3(const arr: TStringArray): T2DStringArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group4(const arr: TCharArray): T2DCharArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group5(const arr: TBooleanArray): T2DBooleanArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group6(const arr: TPointArray): T2DPointArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group7(const arr: TBoxArray): T2DBoxArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group8(const arr: TRangeArray): T2DRangeArray; overload; cdecl; begin Result := arr.Group; end;

function TArray_Holds1(const arr, chain: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds2(const arr, chain: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds3(const arr, chain: TStringArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds4(const arr, chain: TCharArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds5(const arr, chain: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds6(const arr, chain: TPointArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds7(const arr, chain: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds8(const arr, chain: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;

function TArray_IDs1(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs2(const arr: TDoubleArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs3(const arr: TStringArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs4(const arr: TCharArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs5(const arr: TBooleanArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs6(const arr: TPointArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs7(const arr: TBoxArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs8(const arr: TRangeArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs9(const arr: TIntegerArray; const ID: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs10(const arr: TDoubleArray; const ID: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs11(const arr: TStringArray; const ID: TIntegerArray): TStringArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs12(const arr: TCharArray; const ID: TIntegerArray): TCharArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs13(const arr: TBooleanArray; const ID: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs14(const arr: TPointArray; const ID: TIntegerArray): TPointArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs15(const arr: TBoxArray; const ID: TIntegerArray): TBoxArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs16(const arr: TRangeArray; const ID: TIntegerArray): TRangeArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs17(const arr: TIntegerArray; const ID: TIntegerArray; const item: Integer): TIntegerArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs18(const arr: TDoubleArray; const ID: TIntegerArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs19(const arr: TStringArray; const ID: TIntegerArray; const item: string): TStringArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs20(const arr: TCharArray; const ID: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs21(const arr: TBooleanArray; const ID: TIntegerArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs22(const arr: TPointArray; const ID: TIntegerArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs23(const arr: TBoxArray; const ID: TIntegerArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs24(const arr: TRangeArray; const ID: TIntegerArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs25(const arr: TIntegerArray; const ID: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs26(const arr: TDoubleArray; const ID: TIntegerArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs27(const arr: TStringArray; const ID: TIntegerArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs28(const arr: TCharArray; const ID: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs29(const arr: TBooleanArray; const ID: TIntegerArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs30(const arr: TPointArray; const ID: TIntegerArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs31(const arr: TBoxArray; const ID: TIntegerArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs32(const arr: TRangeArray; const ID: TIntegerArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;

function TArray_Includes1(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes2(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes3(const arr: TStringArray; const item: string; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes4(const arr: TCharArray; const item: Char; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes6(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes7(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes8(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;

function TArray_Keep1(var arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep2(var arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep3(var arr: TStringArray; const items: TStringArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep4(var arr: TCharArray; const items: TCharArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep5(var arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep6(var arr: TPointArray; const items: TPointArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep7(var arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep8(var arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Keep(items, index); end;

function TArray_LeastFrequent1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent2(const arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent3(const arr: TStringArray): string; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent4(const arr: TCharArray): Char; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent6(const arr: TPointArray): TPoint; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent7(const arr: TBoxArray): TBox; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent8(const arr: TRangeArray): TRange; overload; cdecl; begin Result := arr.LeastFrequent; end;

function TArray_Len1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len2(const arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len3(const arr: TStringArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len4(const arr: TCharArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len5(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len6(const arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len7(const arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len8(const arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len9(var arr: TIntegerArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Len(aSize); end;
function TArray_Len10(var arr: TDoubleArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Len(aSize); end;
function TArray_Len11(var arr: TStringArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Len(aSize); end;
function TArray_Len12(var arr: TCharArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Len(aSize); end;
function TArray_Len13(var arr: TBooleanArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Len(aSize); end;
function TArray_Len14(var arr: TPointArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Len(aSize); end;
function TArray_Len15(var arr: TBoxArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Len(aSize); end;
function TArray_Len16(var arr: TRangeArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Len(aSize); end;
function TArray_Len17(var arr: TIntegerArray; const aSize: Integer; const null: Integer): Integer; overload; cdecl; begin Result := arr.Len(aSize, null); end;
function TArray_Len18(var arr: TDoubleArray; const aSize: Integer; const null: Double): Integer; overload; cdecl; begin Result := arr.Len(aSize, null); end;
function TArray_Len19(var arr: TStringArray; const aSize: Integer; const null: string): Integer; overload; cdecl; begin Result := arr.Len(aSize, null); end;
function TArray_Len20(var arr: TCharArray; const aSize: Integer; const null: Char): Integer; overload; cdecl; begin Result := arr.Len(aSize, null); end;
function TArray_Len21(var arr: TBooleanArray; const aSize: Integer; const null: Boolean): Integer; overload; cdecl; begin Result := arr.Len(aSize, null); end;
function TArray_Len22(var arr: TPointArray; const aSize: Integer; const null: TPoint): Integer; overload; cdecl; begin Result := arr.Len(aSize, null); end;
function TArray_Len23(var arr: TBoxArray; const aSize: Integer; const null: TBox): Integer; overload; cdecl; begin Result := arr.Len(aSize, null); end;
function TArray_Len24(var arr: TRangeArray; const aSize: Integer; const null: TRange): Integer; overload; cdecl; begin Result := arr.Len(aSize, null); end;

function TArray_Loc1(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc2(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc3(const arr: TStringArray; const item: string; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc4(const arr: TCharArray; const item: Char; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc6(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc7(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc8(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc11(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc12(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc14(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;

function TArray_Location1(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location2(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location3(const arr: TStringArray; const item: string; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location4(const arr: TCharArray; const item: Char; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location6(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location7(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location8(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location11(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location12(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location14(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;

function TArray_Locations1(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations2(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations3(const arr: TStringArray; const item: string; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations4(const arr: TCharArray; const item: Char; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations6(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations7(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations8(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations11(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations12(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations14(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;

function TArray_Mix1(var arr: TIntegerArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(shuffles); end;
function TArray_Mix2(var arr: TDoubleArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(shuffles); end;
function TArray_Mix3(var arr: TStringArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(shuffles); end;
function TArray_Mix4(var arr: TCharArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(shuffles); end;
function TArray_Mix5(var arr: TBooleanArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(shuffles); end;
function TArray_Mix6(var arr: TPointArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(shuffles); end;
function TArray_Mix7(var arr: TBoxArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(shuffles); end;
function TArray_Mix8(var arr: TRangeArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(shuffles); end;

function TArray_MostFrequent1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent2(const arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent3(const arr: TStringArray): string; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent4(const arr: TCharArray): Char; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent6(const arr: TPointArray): TPoint; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent7(const arr: TBoxArray): TBox; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent8(const arr: TRangeArray): TRange; overload; cdecl; begin Result := arr.MostFrequent; end;

function TArray_Move1(var arr: TIntegerArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Move(oldIndex, newIndex); end;
function TArray_Move2(var arr: TDoubleArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Move(oldIndex, newIndex); end;
function TArray_Move3(var arr: TStringArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Move(oldIndex, newIndex); end;
function TArray_Move4(var arr: TCharArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Move(oldIndex, newIndex); end;
function TArray_Move5(var arr: TBooleanArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Move(oldIndex, newIndex); end;
function TArray_Move6(var arr: TPointArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Move(oldIndex, newIndex); end;
function TArray_Move7(var arr: TBoxArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Move(oldIndex, newIndex); end;
function TArray_Move8(var arr: TRangeArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Move(oldIndex, newIndex); end;

function TArray_Next1(const arr: TIntegerArray; const index: Integer; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next2(const arr: TDoubleArray; const index: Integer; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next3(const arr: TStringArray; const index: Integer; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next4(const arr: TCharArray; const index: Integer; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next5(const arr: TBooleanArray; const index: Integer; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next6(const arr: TPointArray; const index: Integer; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next7(const arr: TBoxArray; const index: Integer; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next8(const arr: TRangeArray; const index: Integer; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Next(index, count); end;

function TArray_Oversize1(const arr: TIntegerArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize2(const arr: TDoubleArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize3(const arr: TStringArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize4(const arr: TCharArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize5(const arr: TBooleanArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize6(const arr: TPointArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize7(const arr: TBoxArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize8(const arr: TRangeArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;

function TArray_Partition1(const arr: TIntegerArray; const pSize: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition2(const arr: TDoubleArray; const pSize: Integer): T2DDoubleArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition3(const arr: TStringArray; const pSize: Integer): T2DStringArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition4(const arr: TCharArray; const pSize: Integer): T2DCharArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition5(const arr: TBooleanArray; const pSize: Integer): T2DBooleanArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition6(const arr: TPointArray; const pSize: Integer): T2DPointArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition7(const arr: TBoxArray; const pSize: Integer): T2DBoxArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition8(const arr: TRangeArray; const pSize: Integer): T2DRangeArray; overload; cdecl; begin Result := arr.Partition(pSize); end;

function TArray_Pick1(var arr: TIntegerArray; const ID: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Pick(ID); end;
function TArray_Pick2(var arr: TDoubleArray; const ID: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := arr.Pick(ID); end;
function TArray_Pick3(var arr: TStringArray; const ID: TIntegerArray): TStringArray; overload; cdecl; begin Result := arr.Pick(ID); end;
function TArray_Pick4(var arr: TCharArray; const ID: TIntegerArray): TCharArray; overload; cdecl; begin Result := arr.Pick(ID); end;
function TArray_Pick5(var arr: TBooleanArray; const ID: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := arr.Pick(ID); end;
function TArray_Pick6(var arr: TPointArray; const ID: TIntegerArray): TPointArray; overload; cdecl; begin Result := arr.Pick(ID); end;
function TArray_Pick7(var arr: TBoxArray; const ID: TIntegerArray): TBoxArray; overload; cdecl; begin Result := arr.Pick(ID); end;
function TArray_Pick8(var arr: TRangeArray; const ID: TIntegerArray): TRangeArray; overload; cdecl; begin Result := arr.Pick(ID); end;

function TArray_Pop1(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop2(var arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop3(var arr: TStringArray): string; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop4(var arr: TCharArray): Char; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop5(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop6(var arr: TPointArray): TPoint; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop7(var arr: TBoxArray): TBox; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop8(var arr: TRangeArray): TRange; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop9(var arr: TIntegerArray; const null: Integer): Integer; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop10(var arr: TDoubleArray; const null: Double): Double; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop11(var arr: TStringArray; const null: string): string; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop12(var arr: TCharArray; const null: Char): Char; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop13(var arr: TBooleanArray; const null: Boolean): Boolean; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop14(var arr: TPointArray; const null: TPoint): TPoint; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop15(var arr: TBoxArray; const null: TBox): TBox; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop16(var arr: TRangeArray; const null: TRange): TRange; overload; cdecl; begin Result := arr.Pop(null); end;

function TArray_Populate1(var arr: TIntegerArray; const items: TIntegerArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate2(var arr: TDoubleArray; const items: TDoubleArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate3(var arr: TStringArray; const items: TStringArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate4(var arr: TCharArray; const items: TCharArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate5(var arr: TBooleanArray; const items: TBooleanArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate6(var arr: TPointArray; const items: TPointArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate7(var arr: TBoxArray; const items: TBoxArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate8(var arr: TRangeArray; const items: TRangeArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate9(var arr: TIntegerArray; const item: Integer; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate10(var arr: TDoubleArray; const item: Double; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate11(var arr: TStringArray; const item: string; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate12(var arr: TCharArray; const item: Char; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate13(var arr: TBooleanArray; const item: Boolean; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate14(var arr: TPointArray; const item: TPoint; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate15(var arr: TBoxArray; const item: TBox; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate16(var arr: TRangeArray; const item: TRange; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;

function TArray_Pos1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos3(const arr: TStringArray; const item: string; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos4(const arr: TCharArray; const item: Char; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;

function TArray_Position1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position3(const arr: TStringArray; const item: string; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position4(const arr: TCharArray; const item: Char; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;

function TArray_Positions1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions3(const arr: TStringArray; const item: string; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions4(const arr: TCharArray; const item: Char; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;

function TArray_Previous1(const arr: TIntegerArray; const index: Integer; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous2(const arr: TDoubleArray; const index: Integer; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous3(const arr: TStringArray; const index: Integer; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous4(const arr: TCharArray; const index: Integer; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous5(const arr: TBooleanArray; const index: Integer; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous6(const arr: TPointArray; const index: Integer; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous7(const arr: TBoxArray; const index: Integer; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous8(const arr: TRangeArray; const index: Integer; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Previous(index, count); end;

function TArray_Put1(const arr: TIntegerArray; const ID: TIntegerArray; const item: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put2(const arr: TDoubleArray; const ID: TIntegerArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put3(const arr: TStringArray; const ID: TIntegerArray; const item: string): TStringArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put4(const arr: TCharArray; const ID: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put5(const arr: TBooleanArray; const ID: TIntegerArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put6(const arr: TPointArray; const ID: TIntegerArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put7(const arr: TBoxArray; const ID: TIntegerArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put8(const arr: TRangeArray; const ID: TIntegerArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put9(const arr: TIntegerArray; const ID: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put10(const arr: TDoubleArray; const ID: TIntegerArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put11(const arr: TStringArray; const ID: TIntegerArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put12(const arr: TCharArray; const ID: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put13(const arr: TBooleanArray; const ID: TIntegerArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put14(const arr: TPointArray; const ID: TIntegerArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put15(const arr: TBoxArray; const ID: TIntegerArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put16(const arr: TRangeArray; const ID: TIntegerArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put17(const arr: TIntegerArray; const index: Integer; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put18(const arr: TDoubleArray; const index: Integer; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put19(const arr: TStringArray; const index: Integer; const items: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put20(const arr: TCharArray; const index: Integer; const items: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put21(const arr: TBooleanArray; const index: Integer; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put22(const arr: TPointArray; const index: Integer; const items: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put23(const arr: TBoxArray; const index: Integer; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put24(const arr: TRangeArray; const index: Integer; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Put(index, items); end; 

function TArray_Push1(var arr: TIntegerArray; const item: Integer): Integer; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push2(var arr: TDoubleArray; const item: Double): Integer; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push3(var arr: TStringArray; const item: string): Integer; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push4(var arr: TCharArray; const item: Char): Integer; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push5(var arr: TBooleanArray; const item: Boolean): Integer; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push6(var arr: TPointArray; const item: TPoint): Integer; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push7(var arr: TBoxArray; const item: TBox): Integer; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push8(var arr: TRangeArray; const item: TRange): Integer; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push9(var arr: TIntegerArray; const items: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push10(var arr: TDoubleArray; const items: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push11(var arr: TStringArray; const items: TStringArray): Integer; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push12(var arr: TCharArray; const items: TCharArray): Integer; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push13(var arr: TBooleanArray; const items: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push14(var arr: TPointArray; const items: TPointArray): Integer; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push15(var arr: TBoxArray; const items: TBoxArray): Integer; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push16(var arr: TRangeArray; const items: TRangeArray): Integer; overload; cdecl; begin Result := arr.Push(items); end;

function TArray_Remove1(var arr: TIntegerArray; const item: Integer; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove2(var arr: TDoubleArray; const item: Double; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove3(var arr: TStringArray; const item: string; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove4(var arr: TCharArray; const item: Char; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove5(var arr: TBooleanArray; const item: Boolean; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove6(var arr: TPointArray; const item: TPoint; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove7(var arr: TBoxArray; const item: TBox; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove8(var arr: TRangeArray; const item: TRange; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove9(var arr: TIntegerArray; const item: Integer; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove10(var arr: TDoubleArray; const item: Double; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove11(var arr: TStringArray; const item: string; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove12(var arr: TCharArray; const item: Char; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove13(var arr: TBooleanArray; const item: Boolean; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove14(var arr: TPointArray; const item: TPoint; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove15(var arr: TBoxArray; const item: TBox; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove16(var arr: TRangeArray; const item: TRange; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove17(var arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove18(var arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove19(var arr: TStringArray; const items: TStringArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove20(var arr: TCharArray; const items: TCharArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove21(var arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove22(var arr: TPointArray; const items: TPointArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove23(var arr: TBoxArray; const items: TBoxArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove24(var arr: TRangeArray; const items: TRangeArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove25(var arr: TIntegerArray; const items: TIntegerArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove26(var arr: TDoubleArray; const items: TDoubleArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove27(var arr: TStringArray; const items: TStringArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove28(var arr: TCharArray; const items: TCharArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove29(var arr: TBooleanArray; const items: TBooleanArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove30(var arr: TPointArray; const items: TPointArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove31(var arr: TBoxArray; const items: TBoxArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove32(var arr: TRangeArray; const items: TRangeArray; const all: Boolean): Integer; overload; cdecl; begin Result := arr.Remove(items, all); end;

function TArray_Resize1(var arr: TIntegerArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize2(var arr: TDoubleArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize3(var arr: TStringArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize4(var arr: TCharArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize5(var arr: TBooleanArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize6(var arr: TPointArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize7(var arr: TBoxArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize8(var arr: TRangeArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize9(var arr: TIntegerArray; const aChange: Integer; const null: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize10(var arr: TDoubleArray; const aChange: Integer; const null: Double): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize11(var arr: TStringArray; const aChange: Integer; const null: string): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize12(var arr: TCharArray; const aChange: Integer; const null: Char): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize13(var arr: TBooleanArray; const aChange: Integer; const null: Boolean): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize14(var arr: TPointArray; const aChange: Integer; const null: TPoint): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize15(var arr: TBoxArray; const aChange: Integer; const null: TBox): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize16(var arr: TRangeArray; const aChange: Integer; const null: TRange): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;

function TArray_Reverse1(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse2(var arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse3(var arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse4(var arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse5(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse6(var arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse7(var arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse8(var arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;

function TArray_Reversed1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Reversed; end;

function TArray_Scan1(const arr: TIntegerArray; const ID: TRange; const item: Integer; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan2(const arr: TDoubleArray; const ID: TRange; const item: Double; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan3(const arr: TStringArray; const ID: TRange; const item: string; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan4(const arr: TCharArray; const ID: TRange; const item: Char; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan5(const arr: TBooleanArray; const ID: TRange; const item: Boolean; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan6(const arr: TPointArray; const ID: TRange; const item: TPoint; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan7(const arr: TBoxArray; const ID: TRange; const item: TBox; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan8(const arr: TRangeArray; const ID: TRange; const item: TRange; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan9(const arr: TIntegerArray; const ID: TIntegerArray; const item: Integer; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan10(const arr: TDoubleArray; const ID: TIntegerArray; const item: Double; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan11(const arr: TStringArray; const ID: TIntegerArray; const item: string; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan12(const arr: TCharArray; const ID: TIntegerArray; const item: Char; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan13(const arr: TBooleanArray; const ID: TIntegerArray; const item: Boolean; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan14(const arr: TPointArray; const ID: TIntegerArray; const item: TPoint; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan15(const arr: TBoxArray; const ID: TIntegerArray; const item: TBox; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan16(const arr: TRangeArray; const ID: TIntegerArray; const item: TRange; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan17(const arr: TIntegerArray; const ID: TRange; const items: TIntegerArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan18(const arr: TDoubleArray; const ID: TRange; const items: TDoubleArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan19(const arr: TStringArray; const ID: TRange; const items: TStringArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan20(const arr: TCharArray; const ID: TRange; const items: TCharArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan21(const arr: TBooleanArray; const ID: TRange; const items: TBooleanArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan22(const arr: TPointArray; const ID: TRange; const items: TPointArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan23(const arr: TBoxArray; const ID: TRange; const items: TBoxArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan24(const arr: TRangeArray; const ID: TRange; const items: TRangeArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan25(const arr: TIntegerArray; const ID: TIntegerArray; const items: TIntegerArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan26(const arr: TDoubleArray; const ID: TIntegerArray; const items: TDoubleArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan27(const arr: TStringArray; const ID: TIntegerArray; const items: TStringArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan28(const arr: TCharArray; const ID: TIntegerArray; const items: TCharArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan29(const arr: TBooleanArray; const ID: TIntegerArray; const items: TBooleanArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan30(const arr: TPointArray; const ID: TIntegerArray; const items: TPointArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan31(const arr: TBoxArray; const ID: TIntegerArray; const items: TBoxArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan32(const arr: TRangeArray; const ID: TIntegerArray; const items: TRangeArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;

function TArray_Shift1(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift2(var arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift3(var arr: TStringArray): string; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift4(var arr: TCharArray): Char; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift5(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift6(var arr: TPointArray): TPoint; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift7(var arr: TBoxArray): TBox; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift8(var arr: TRangeArray): TRange; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift9(var arr: TIntegerArray; const sCount: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift10(var arr: TDoubleArray; const sCount: Integer): TDoubleArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift11(var arr: TStringArray; const sCount: Integer): TStringArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift12(var arr: TCharArray; const sCount: Integer): TCharArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift13(var arr: TBooleanArray; const sCount: Integer): TBooleanArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift14(var arr: TPointArray; const sCount: Integer): TPointArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift15(var arr: TBoxArray; const sCount: Integer): TBoxArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift16(var arr: TRangeArray; const sCount: Integer): TRangeArray; overload; cdecl; begin Result := arr.Shift(sCount); end;

function TArray_Size1(var arr: TIntegerArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size2(var arr: TDoubleArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size3(var arr: TStringArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size4(var arr: TCharArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size5(var arr: TBooleanArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size6(var arr: TPointArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size7(var arr: TBoxArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size8(var arr: TRangeArray; const aSize: Integer): Integer; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size9(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size10(const arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size11(const arr: TStringArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size12(const arr: TCharArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size13(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size14(const arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size15(const arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size16(const arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.Size; end;

function TArray_SizeBetween1(const arr: TIntegerArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween2(const arr: TDoubleArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween3(const arr: TStringArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween4(const arr: TCharArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween5(const arr: TBooleanArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween6(const arr: TPointArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween7(const arr: TBoxArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween8(const arr: TRangeArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;

function TArray_SizeMax1(const arr: TIntegerArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax2(const arr: TDoubleArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax3(const arr: TStringArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax4(const arr: TCharArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax5(const arr: TBooleanArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax6(const arr: TPointArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax7(const arr: TBoxArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax8(const arr: TRangeArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;

function TArray_SizeMin1(const arr: TIntegerArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin2(const arr: TDoubleArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin3(const arr: TStringArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin4(const arr: TCharArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin5(const arr: TBooleanArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin6(const arr: TPointArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin7(const arr: TBoxArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin8(const arr: TRangeArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;

function TArray_SubarrayLocation1(const arr: TIntegerArray; const pattern: TIntegerArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation2(const arr: TDoubleArray; const pattern: TDoubleArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation3(const arr: TStringArray; const pattern: TStringArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation4(const arr: TCharArray; const pattern: TCharArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation5(const arr: TBooleanArray; const pattern: TBooleanArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation6(const arr: TPointArray; const pattern: TPointArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation7(const arr: TBoxArray; const pattern: TBoxArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation8(const arr: TRangeArray; const pattern: TRangeArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;

function TArray_SubarrayLocations1(const arr: TIntegerArray; const pattern: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations2(const arr: TDoubleArray; const pattern: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations3(const arr: TStringArray; const pattern: TStringArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations4(const arr: TCharArray; const pattern: TCharArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations5(const arr: TBooleanArray; const pattern: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations6(const arr: TPointArray; const pattern: TPointArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations7(const arr: TBoxArray; const pattern: TBoxArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations8(const arr: TRangeArray; const pattern: TRangeArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;

function TArray_SubarrayPosition1(const arr: TIntegerArray; const pattern: TIntegerArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition2(const arr: TDoubleArray; const pattern: TDoubleArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition3(const arr: TStringArray; const pattern: TStringArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition4(const arr: TCharArray; const pattern: TCharArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition5(const arr: TBooleanArray; const pattern: TBooleanArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition6(const arr: TPointArray; const pattern: TPointArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition7(const arr: TBoxArray; const pattern: TBoxArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition8(const arr: TRangeArray; const pattern: TRangeArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;

function TArray_SubarrayPositions1(const arr: TIntegerArray; const pattern: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions2(const arr: TDoubleArray; const pattern: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions3(const arr: TStringArray; const pattern: TStringArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions4(const arr: TCharArray; const pattern: TCharArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions5(const arr: TBooleanArray; const pattern: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions6(const arr: TPointArray; const pattern: TPointArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions7(const arr: TBoxArray; const pattern: TBoxArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions8(const arr: TRangeArray; const pattern: TRangeArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;

function TArray_Swap1(var arr, b: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Swap(b); end;
function TArray_Swap2(var arr, b: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Swap(b); end;
function TArray_Swap3(var arr, b: TStringArray): Integer; overload; cdecl; begin Result := arr.Swap(b); end;
function TArray_Swap4(var arr, b: TCharArray): Integer; overload; cdecl; begin Result := arr.Swap(b); end;
function TArray_Swap5(var arr, b: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Swap(b); end;
function TArray_Swap6(var arr, b: TPointArray): Integer; overload; cdecl; begin Result := arr.Swap(b); end;
function TArray_Swap7(var arr, b: TBoxArray): Integer; overload; cdecl; begin Result := arr.Swap(b); end;
function TArray_Swap8(var arr, b: TRangeArray): Integer; overload; cdecl; begin Result := arr.Swap(b); end;

function TArray_Trade1(var arr, b: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade2(var arr, b: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade3(var arr, b: TStringArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade4(var arr, b: TCharArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade5(var arr, b: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade6(var arr, b: TPointArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade7(var arr, b: TBoxArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade8(var arr, b: TRangeArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;

function TArray_Undersize1(const arr: TIntegerArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize2(const arr: TDoubleArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize3(const arr: TStringArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize4(const arr: TCharArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize5(const arr: TBooleanArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize6(const arr: TPointArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize7(const arr: TBoxArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize8(const arr: TRangeArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;

function TArray_Unique1(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique2(var arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique3(var arr: TStringArray): Integer; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique4(var arr: TCharArray): Integer; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique5(var arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique6(var arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique7(var arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique8(var arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.Unique; end;

function TArray_Uniqued1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Uniqued; end;

function TArray_Uniques1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques2(const arr: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques3(const arr: TStringArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques4(const arr: TCharArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques5(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques6(const arr: TPointArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques7(const arr: TBoxArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques8(const arr: TRangeArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;

function TArray_Unshift1(var arr: TIntegerArray; const item: Integer): Integer; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift2(var arr: TDoubleArray; const item: Double): Integer; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift3(var arr: TStringArray; const item: string): Integer; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift4(var arr: TCharArray; const item: Char): Integer; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift5(var arr: TBooleanArray; const item: Boolean): Integer; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift6(var arr: TPointArray; const item: TPoint): Integer; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift7(var arr: TBoxArray; const item: TBox): Integer; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift8(var arr: TRangeArray; const item: TRange): Integer; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift9(var arr: TIntegerArray; const items: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift10(var arr: TDoubleArray; const items: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift11(var arr: TStringArray; const items: TStringArray): Integer; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift12(var arr: TCharArray; const items: TCharArray): Integer; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift13(var arr: TBooleanArray; const items: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift14(var arr: TPointArray; const items: TPointArray): Integer; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift15(var arr: TBoxArray; const items: TBoxArray): Integer; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift16(var arr: TRangeArray; const items: TRangeArray): Integer; overload; cdecl; begin Result := arr.Unshift(items); end;

function T2DArray_Blank1(const arr: T2DIntegerArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank2(const arr: T2DDoubleArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank3(const arr: T2DStringArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank4(const arr: T2DCharArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank5(const arr: T2DBooleanArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank6(const arr: T2DPointArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank7(const arr: T2DBoxArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank8(const arr: T2DRangeArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;

function T2DArray_Create1(const size1D, size2D: Integer; const item: Integer): T2DIntegerArray; overload; cdecl; begin Result := T2D.Create(size1D, size2D, item); end;
function T2DArray_Create2(const size1D, size2D: Integer; const item: Double): T2DDoubleArray; overload; cdecl; begin Result := T2D.Create(size1D, size2D, item); end;
function T2DArray_Create3(const size1D, size2D: Integer; const item: string): T2DStringArray; overload; cdecl; begin Result := T2D.Create(size1D, size2D, item); end;
function T2DArray_Create4(const size1D, size2D: Integer; const item: Char): T2DCharArray; overload; cdecl; begin Result := T2D.Create(size1D, size2D, item); end;
function T2DArray_Create5(const size1D, size2D: Integer; const item: Boolean): T2DBooleanArray; overload; cdecl; begin Result := T2D.Create(size1D, size2D, item); end;
function T2DArray_Create6(const size1D, size2D: Integer; const item: TPoint): T2DPointArray; overload; cdecl; begin Result := T2D.Create(size1D, size2D, item); end;
function T2DArray_Create7(const size1D, size2D: Integer; const item: TBox): T2DBoxArray; overload; cdecl; begin Result := T2D.Create(size1D, size2D, item); end;
function T2DArray_Create8(const size1D, size2D: Integer; const item: TRange): T2DRangeArray; overload; cdecl; begin Result := T2D.Create(size1D, size2D, item); end;

function T2DArray_Empty1(const arr: T2DIntegerArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty2(const arr: T2DDoubleArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty3(const arr: T2DStringArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty4(const arr: T2DCharArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty5(const arr: T2DBooleanArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty6(const arr: T2DPointArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty7(const arr: T2DBoxArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty8(const arr: T2DRangeArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;

function T2DArray_Size1(const arr: T2DIntegerArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size2(const arr: T2DDoubleArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size3(const arr: T2DStringArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size4(const arr: T2DCharArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size5(const arr: T2DBooleanArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size6(const arr: T2DPointArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size7(const arr: T2DBoxArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size8(const arr: T2DRangeArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size9(const arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size10(const arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size11(const arr: T2DStringArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size12(const arr: T2DCharArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size13(const arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size14(const arr: T2DPointArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size15(const arr: T2DBoxArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size16(const arr: T2DRangeArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size17(var arr: T2DIntegerArray; const aSize: Integer): Int64; overload; cdecl; begin Result := arr.Size(aSize); end;
function T2DArray_Size18(var arr: T2DDoubleArray; const aSize: Integer): Int64; overload; cdecl; begin Result := arr.Size(aSize); end;
function T2DArray_Size19(var arr: T2DStringArray; const aSize: Integer): Int64; overload; cdecl; begin Result := arr.Size(aSize); end;
function T2DArray_Size20(var arr: T2DCharArray; const aSize: Integer): Int64; overload; cdecl; begin Result := arr.Size(aSize); end;
function T2DArray_Size21(var arr: T2DBooleanArray; const aSize: Integer): Int64; overload; cdecl; begin Result := arr.Size(aSize); end;
function T2DArray_Size22(var arr: T2DPointArray; const aSize: Integer): Int64; overload; cdecl; begin Result := arr.Size(aSize); end;
function T2DArray_Size23(var arr: T2DBoxArray; const aSize: Integer): Int64; overload; cdecl; begin Result := arr.Size(aSize); end;
function T2DArray_Size24(var arr: T2DRangeArray; const aSize: Integer): Int64; overload; cdecl; begin Result := arr.Size(aSize); end;
function T2DArray_Size25(var arr: T2DIntegerArray; const size1D, size2D: Integer): Int64; overload; cdecl; begin Result := arr.Size(size1D, size2D); end;
function T2DArray_Size26(var arr: T2DDoubleArray; const size1D, size2D: Integer): Int64; overload; cdecl; begin Result := arr.Size(size1D, size2D); end;
function T2DArray_Size27(var arr: T2DStringArray; const size1D, size2D: Integer): Int64; overload; cdecl; begin Result := arr.Size(size1D, size2D); end;
function T2DArray_Size28(var arr: T2DCharArray; const size1D, size2D: Integer): Int64; overload; cdecl; begin Result := arr.Size(size1D, size2D); end;
function T2DArray_Size29(var arr: T2DBooleanArray; const size1D, size2D: Integer): Int64; overload; cdecl; begin Result := arr.Size(size1D, size2D); end;
function T2DArray_Size30(var arr: T2DPointArray; const size1D, size2D: Integer): Int64; overload; cdecl; begin Result := arr.Size(size1D, size2D); end;
function T2DArray_Size31(var arr: T2DBoxArray; const size1D, size2D: Integer): Int64; overload; cdecl; begin Result := arr.Size(size1D, size2D); end;
function T2DArray_Size32(var arr: T2DRangeArray; const size1D, size2D: Integer): Int64; overload; cdecl; begin Result := arr.Size(size1D, size2D); end;

function T2DArray_Merge1(const arr: T2DIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge2(const arr: T2DDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge3(const arr: T2DStringArray): TStringArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge4(const arr: T2DCharArray): TCharArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge5(const arr: T2DBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge6(const arr: T2DPointArray): TPointArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge7(const arr: T2DBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge8(const arr: T2DRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Merge; end;
