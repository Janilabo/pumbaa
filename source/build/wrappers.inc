function Integer_Even(const x: Integer): Boolean; cdecl; inline; begin Result := x.Even; end;
function Integer_Odd(const x: Integer): Boolean; cdecl; inline; begin Result := x.Odd; end;
function Integer_Increase(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Increase(N); end;
function Integer_Decrease(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Decrease(N); end;
function Integer_Increment(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Increment(N); end;
function Integer_Decrement(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Decrement(N); end;
function Integer_DigitCount(const x: Integer): Integer; cdecl; begin Result := x.DigitCount; end;
function Integer_Digitz(const x: Integer): TIntegerArray; cdecl; begin Result := x.Digitz; end;
function Integer_Digits(const x: Integer): TIntegerArray; cdecl; begin Result := x.Digits; end;
function Integer_NegA(const x: Integer): Integer; cdecl; inline; begin Result := x.NegA; end;
function Integer_Neg(const x: Integer): Integer; cdecl; inline; begin Result := x.Neg; end;
function Integer_Negative(const x: Integer): Boolean; cdecl; inline; begin Result := x.Negative; end;
function Integer_Positive(const x: Integer): Boolean; cdecl; inline; begin Result := x.Positive; end;
function Integer_Neutral(const x: Integer): Boolean; cdecl; inline; begin Result := x.Neutral; end;
function Integer_Compare(const x, T: Integer): Integer; cdecl; inline; begin Result := x.Compare(T); end;
function Integer_Distance(const x, T: Integer): Integer; cdecl; inline; begin Result := x.Distance(T); end;
function Integer_Difference(const x, T: Integer): Integer; cdecl; inline; begin Result := x.Difference(T); end;
function Integer_Opposite(const x: Integer): Integer; cdecl; inline; begin Result := x.Opposite; end;
function Integer_Sign(const x: Integer): Integer; cdecl; inline; begin Result := x.Sign; end;
function Integer_Shuffle(const x: Integer): Integer; cdecl; begin Result := x.Shuffle; end;
function Integer_Oversize(const x, limit: Integer): Boolean; cdecl; inline; begin Result := x.Oversize(limit); end;
function Integer_Undersize(const x, limit: Integer): Boolean; cdecl; inline; begin Result := x.Undersize(limit); end;

function Int64_Even(const x: Int64): Boolean; cdecl; inline; begin Result := x.Even; end;
function Int64_Odd(const x: Int64): Boolean; cdecl; inline; begin Result := x.Odd; end;
function Int64_Increase(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Increase(N); end;
function Int64_Decrease(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Decrease(N); end;
function Int64_Increment(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Increment(N); end;
function Int64_Decrement(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Decrement(N); end;
function Int64_DigitCount(const x: Int64): Integer; cdecl; begin Result := x.DigitCount; end;
function Int64_Digitz(const x: Int64): TIntegerArray; cdecl; begin Result := x.Digitz; end;
function Int64_Digits(const x: Int64): TIntegerArray; cdecl; begin Result := x.Digits; end;
function Int64_Compare(const x, T: Int64): Integer; cdecl; inline; begin Result := x.Compare(T); end;
function Int64_Distance(const x, T: Int64): Int64; cdecl; inline; begin Result := x.Distance(T); end;
function Int64_Difference(const x, T: Int64): Int64; cdecl; inline; begin Result := x.Difference(T); end;
function Int64_Opposite(const x: Int64): Int64; cdecl; inline; begin Result := x.Opposite; end;
function Int64_Sign(const x: Int64): Integer; cdecl; inline; begin Result := x.Sign; end;
function Int64_Shuffle(const x: Int64): Int64; cdecl; begin Result := x.Shuffle; end;
function Int64_Oversize(const x, limit: Int64): Boolean; cdecl; inline; begin Result := x.Oversize(limit); end;
function Int64_Undersize(const x, limit: Int64): Boolean; cdecl; inline; begin Result := x.Undersize(limit); end;

function Double_Increase(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Increase(N); end;
function Double_Decrease(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Decrease(N); end;
function Double_Increment(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Increment(N); end;
function Double_Decrement(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Decrement(N); end;
function Double_Digits(const x: Double): TIntegerArray; cdecl; begin Result := x.Digits; end;
function Double_NegA(const x: Double): Double; cdecl; inline; begin Result := x.NegA; end;
function Double_Neg(const x: Double): Double; cdecl; inline; begin Result := x.Neg; end;
function Double_Negative(const x: Double): Boolean; cdecl; inline; begin Result := x.Negative; end;
function Double_Positive(const x: Double): Boolean; cdecl; inline; begin Result := x.Positive; end;
function Double_Neutral(const x: Double): Boolean; cdecl; inline; begin Result := x.Neutral; end;
function Double_MinDecimal(const x: Double): Double; cdecl; begin Result := x.MinDecimal; end;
function Double_MaxDecimal(const x: Double): Double; cdecl; begin Result := x.MaxDecimal; end;
function Double_Accuracy(const x: Double; const a: Int32): Double; cdecl; begin Result := x.Accuracy(a); end;
function Double_Compare(const x, T: Double): Int32; cdecl; inline; begin Result := x.Compare(T); end; 
function Double_Distance(const x, T: Double): Double; cdecl; inline; begin Result := x.Distance(T); end;
function Double_Difference(const x, T: Double): Double; cdecl; inline; begin Result := x.Difference(T); end;
function Double_Opposite(const x: Double): Double; cdecl; inline; begin Result := x.Opposite; end;
function Double_Sign(const x: Double): Int32; cdecl; inline; begin Result := x.Sign; end;
function Double_FixDegrees(const x: Double): Double; cdecl; begin Result := x.FixDegrees; end;
function Double_Degrees(const x: Double): Double; cdecl; begin Result := x.Degrees; end;
function Double_FixRadians(const x: Double): Double; cdecl; begin Result := x.FixRadians; end;
function Double_Radians(const x: Double; const compass: Boolean = False): Double; cdecl; begin Result := x.Radians(compass); end;
function Double_Percent(const x, position: Double): Double; cdecl; inline; begin Result := x.Percent(position); end;
function Double_Percentage(const x, percent: Double): Double; cdecl; inline; begin Result := x.Percentage(percent); end;
function Double_Oversize(const x, limit: Double): Boolean; cdecl; begin Result := x.Oversize(limit); end;
function Double_Undersize(const x, limit: Double): Boolean; cdecl; begin Result := x.Undersize(limit); end;

function Boolean_ToString(const x: Boolean): string; cdecl; begin Result := x.ToString; end;
function Boolean_ToInteger(const x: Boolean): Integer; cdecl; begin Result := x.ToInteger; end;
function Boolean_AsInteger(const x: Boolean): Integer; cdecl; begin Result := x.AsInteger; end;
function Boolean_Toggle(const x: Boolean): Boolean; cdecl; begin Result := x.Toggle; end;
function Boolean_Opposite(const x: Boolean): Boolean; cdecl; begin Result := x.Opposite; end;
function Boolean_Switch(var x: Boolean): Boolean; cdecl; begin Result := x.Switch; end;
function Boolean_Flip(var x: Boolean): Boolean; cdecl; begin Result := x.Flip; end;
function Boolean_Shuffle(var x: Boolean): Boolean; cdecl; begin Result := x.Shuffle; end;
function Boolean_Select1(const x: Boolean; const bTrue, bFalse: Integer): Integer; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select2(const x: Boolean; const bTrue, bFalse: Int64): Int64; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select3(const x: Boolean; const bTrue, bFalse: Double): Double; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select4(const x: Boolean; const bTrue, bFalse: string): string; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select5(const x: Boolean; const bTrue, bFalse: Char): Char; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select6(const x: Boolean; const bTrue, bFalse: Boolean): Boolean; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select7(const x: Boolean; const bTrue, bFalse: TPoint): TPoint; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select8(const x: Boolean; const bTrue, bFalse: TBox): TBox; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select9(const x: Boolean; const bTrue, bFalse: TRange): TRange; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Evaluate1(const x: Boolean; const bTrue, bFalse: Integer): Integer; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate2(const x: Boolean; const bTrue, bFalse: Int64): Int64; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate3(const x: Boolean; const bTrue, bFalse: Double): Double; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate4(const x: Boolean; const bTrue, bFalse: string): string; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate5(const x: Boolean; const bTrue, bFalse: Char): Char; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate6(const x: Boolean; const bTrue, bFalse: Boolean): Boolean; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate7(const x: Boolean; const bTrue, bFalse: TPoint): TPoint; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate8(const x: Boolean; const bTrue, bFalse: TBox): TBox; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate9(const x: Boolean; const bTrue, bFalse: TRange): TRange; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Enable(var x: Boolean): Boolean; cdecl; begin Result := x.Enable; end;
function Boolean_Disable(var x: Boolean): Boolean; cdecl; begin Result := x.Disable; end;
function Boolean_SetFalse(var x: Boolean): Integer; cdecl; begin Result := x.SetFalse; end;
function Boolean_SetTrue(var x: Boolean): Integer; cdecl; begin Result := x.SetTrue; end;
function Boolean_SwitchOn(var x: Boolean; const state: Boolean): Boolean; cdecl; begin Result := x.SwitchOn(state); end;
function Boolean_SwitchOff(var x: Boolean; const state: Boolean): Boolean; cdecl; begin Result := x.SwitchOff(state); end;

function String_Chars(const str: string): TCharArray; cdecl; begin Result := str.Chars; end;
function String_At(const str: string; const s: string; const index: Integer = 1): Boolean; cdecl; inline; begin Result := str.At(s, index); end;
function String_Get(const str: string; const index: Integer; const count: Integer): string; cdecl; inline; begin Result := str.Get(index, count); end;
function String_Pick(const str: string; const index: Integer; const count: Integer = 2147483647): string; cdecl; begin Result := str.Pick(index, count); end;
function String_PosL(const str: string; const s: string; const index: Integer = 1): Integer; cdecl; begin Result := str.PosL(s, index); end;
function String_PosR(const str: string; const s: string; const index: Integer = 2147483647): Integer; cdecl; begin Result := str.PosR(s, index); end;
function String_Find(const str: string; const s: string; const index: Integer = 1): Integer; cdecl; begin Result := str.Find(s, index); end;
function String_PosLast(const str: string; const s: string; const index: Integer = 2147483647): Integer; cdecl; begin Result := str.PosLast(s, index); end;
function String_Position(const str: string; const s: string; const index: Integer = 1): Integer; cdecl; begin Result := str.Position(s, index); end;
function String_Contains(const str: string; const s: string; const index: Integer = 1): Boolean; cdecl; begin Result := str.Contains(s, index); end;
function String_Includes(const str: string; const s: string; const index: Integer = 2147483647): Boolean; cdecl; begin Result := str.Includes(s, index); end;
function String_Between(const str: string; const s1, s2: string; const index: Integer = 1): string; cdecl; begin Result := str.Between(s1, s2, index); end;
function String_Count(const str: string; const s: string; const overlap: Boolean = True; const index: Integer = 1): Integer; cdecl; begin Result := str.Count(s, overlap, index); end;
function String_Amount(const str: string; const s: string; const overlap: Boolean = True; const index: Integer = 2147483647): Integer; cdecl; begin Result := str.Amount(s, overlap, index); end;
function String_FromLeft(const str: string; const count: Integer; const index: Integer = 1): string; cdecl; begin Result := str.FromLeft(count, index); end;
function String_FromRight(const str: string; const count: Integer; const index: Integer = 2147483647): string; cdecl; begin Result := str.FromRight(count, index); end;
function String_Explode1(const str: string; const d: string; const limit: Integer = -1): TStringArray; overload; cdecl; begin Result := str.Explode(d, limit); end;
function String_Explode2(const str: string; const d: TStringArray; const limit: Integer = -1): TStringArray; overload; cdecl; begin Result := str.Explode(d, limit); end;
function String_Slice(const str: string; const a, b: Integer): string; cdecl; begin Result := str.Slice(a, b); end;
function String_Chunk(const str: string; const a, b: Integer): string; cdecl; begin Result := str.Chunk(a, b); end;
function String_Reverse(var str: string): Boolean; cdecl; begin Result := str.Reverse; end;
function String_Flip(const str: string): string; cdecl; begin Result := str.Flip; end;
function String_Reversed(const str: string): string; cdecl; begin Result := str.Reversed; end;
function String_StartsWith(const str: string; const s: string): Boolean; cdecl; begin Result := str.StartsWith(s); end;
function String_EndsWith(const str: string; const s: string): Boolean; cdecl; begin Result := str.EndsWith(s); end;
function String_StartWith(var str: string; const s: string; const index: Integer = 1): Boolean; cdecl; begin Result := str.StartWith(s, index); end;
function String_EndWith(var str: string; const s: string; const index: Integer = 2147483647): Boolean; cdecl; begin Result := str.EndWith(s, index); end;
function String_Behind(const str: string; const index, count: Integer): string; cdecl; begin Result := str.Behind(index, count); end;
function String_Ahead(const str: string; const index, count: Integer): string; cdecl; begin Result := str.Ahead(index, count); end;
function String_After(const str: string; const s: string; const index: Integer = 1): string; cdecl; begin Result := str.After(s, index); end;
function String_Before(const str: string; const s: string; const index: Integer = 1): string; cdecl; begin Result := str.Before(s, index); end;
function String_AfterLast(const str: string; const s: string; const index: Integer = 2147483647): string; cdecl; begin Result := str.AfterLast(s, index); end;
function String_BeforeLast(const str: string; const s: string; const index: Integer = 2147483647): string; cdecl; begin Result := str.BeforeLast(s, index); end;
function String_Center(const str: string; const size: Integer; const fill: Char = #32): string; cdecl; begin Result := str.Center(size, fill); end;
function String_Stuff(const str: string; const s: string; const iFrom, iCount: Integer): string; cdecl; begin Result := str.Stuff(s, iFrom, iCount); end;
function String_Duplicate(const str: string; const x: Integer = 2): string; cdecl; begin Result := str.Duplicate(x); end;
function String_Duplicated(const str: string; const x: Integer; const glue: string): string; cdecl; begin Result := str.Duplicated(x, glue); end;
function String_Compare(const str: string; const s: string): Integer; cdecl; inline; begin Result := str.Compare(s); end;
function String_Quotatation(const str: string): string; cdecl; begin Result := str.Quotatation; end;
function String_PregQuote(const str: string; const regex: string = '.\+*?[^]$(){}=!<>|:-'): string; cdecl; begin Result := str.PregQuote(regex); end;
function String_TrimLeft(const str: string; const t: Char = #32): string; cdecl; begin Result := str.TrimLeft(t); end;
function String_TrimRight(const str: string; const t: Char = #32): string; cdecl; begin Result := str.TrimRight(t); end;
function String_Trim(const str: string; const t: Char = #32): string; cdecl; begin Result := str.Trim(t); end;
function String_ToTRange(const str: string): TRange; cdecl; begin Result := str.ToTRange; end;
function String_IDs1(const str: string): TIntegerArray; overload; cdecl; begin Result := str.IDs; end;
function String_IDs2(const str: string; const ID: TIntegerArray): TCharArray; overload; cdecl; begin Result := str.IDs(ID); end;
function String_IDs3(const str: string; const ID: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := str.IDs(ID, item); end;
function String_IDs4(const str: string; const ID: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := str.IDs(ID, items); end; 

function TPoint_Create(const X, Y: Integer): TPoint; cdecl; inline; var pt: TPoint; begin Result := pt.Create(X, Y); end;
function TPoint_Build(const X, Y: Integer): TPoint; cdecl; inline; var pt: TPoint; begin Result := pt.Build(X, Y); end;
function TPoint_InBox(const pt: TPoint; const bx: TBox): Boolean; cdecl; inline; begin Result := pt.InBox(bx); end;
function TPoint_InCircle(const pt, center: TPoint; const radius: Double): Boolean; cdecl; inline; begin Result := pt.InCircle(center, radius); end;
function TPoint_InEllipse(const pt, center: TPoint; const XRadius, YRadius: Double): Boolean; cdecl; inline; begin Result := pt.InEllipse(center, XRadius, YRadius); end;
function TPoint_AngleDegrees(const pt, target: TPoint; const compass: Boolean = False): Double; cdecl; begin Result := pt.AngleDegrees(target); end;
function TPoint_AngleRadians(const pt, target: TPoint): Double; cdecl; begin Result := pt.AngleRadians(target); end;
function TPoint_DistEuclidean(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistEuclidean(target); end;
function TPoint_DistEuclidean2(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistEuclidean2(target); end;
function TPoint_DistSquaredEuclidean(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistSquaredEuclidean(target); end;
function TPoint_DistManhattan(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistManhattan(target); end;
function TPoint_DistChebyshev(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistChebyshev(target); end;
function TPoint_Grid(const pt: TPoint; const rows, columns: Integer; const spaceVertical: Integer = 0; const spaceHorizontal: Integer = 0): TPointArray; cdecl; begin Result := pt.Grid(rows, columns, spaceVertical, spaceHorizontal); end;
function TPoint_Row(const pt: TPoint; const cells: Integer; const space: Integer = 0): TPointArray; cdecl; begin Result := pt.Row(cells, space); end;
function TPoint_Column(const pt: TPoint; const cells: Integer; const space: Integer = 0): TPointArray; cdecl; begin Result := pt.Column(cells, space); end;

function TBox_Build1(const X1, Y1, X2, Y2: Integer): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Build(X1, Y1, X2, Y2); end;
function TBox_Build2(const a, b: TPoint): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Build(a, b); end;
function TBox_Create1(const X1, Y1, X2, Y2: Integer): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Create(X1, Y1, X2, Y2); end;
function TBox_Create2(const a, b: TPoint): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Create(a, b); end;
function TBox_Form1(const XY: Integer = 0): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Form(XY); end;
function TBox_Form2(const XY: TPoint): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Form(XY); end;
function TBox_Make1(const pt: TPoint; const radius: Integer = 0): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Make(pt, radius); end;
function TBox_Make2(const pt: TPoint; const wRadius, hRadius: Integer): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Make(pt, wRadius, hRadius); end;
function TBox_Yield1(const pt: TPoint; const size: Integer = 1): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Yield(pt, size); end;
function TBox_Yield2(const pt: TPoint; const width, height: Integer): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Yield(pt, width, height); end;
function TBox_Size(const bx: TBox; var width, height: Integer): Integer; cdecl; inline; begin Result := bx.Size(width, height); end;
function TBox_Area(const bx: TBox): Integer; cdecl; inline; begin Result := bx.Area; end;
function TBox_Diagonal(const bx: TBox): Double; cdecl; begin Result := bx.Diagonal; end;
function TBox_W1(const bx: TBox): Integer; overload; cdecl; begin Result := bx.W; end;
function TBox_W2(var bx: TBox; const width: Integer): Integer; overload; cdecl; begin Result := bx.Width(width); end;
function TBox_Width1(const bx: TBox): Integer; overload; cdecl; begin Result := bx.Width; end;
function TBox_Width2(var bx: TBox; const w: Integer): Integer; overload; cdecl; begin Result := bx.Width(w); end;
function TBox_H1(const bx: TBox): Integer; overload; cdecl; begin Result := bx.H; end;
function TBox_H2(var bx: TBox; const height: Integer): Integer; overload; cdecl; begin Result := bx.H(height); end;
function TBox_Height1(const bx: TBox): Integer; overload; cdecl; begin Result := bx.Height; end;
function TBox_Height2(var bx: TBox; const h: Integer): Integer; overload; cdecl; begin Result := bx.Height(h); end;
function TBox_Expand(const bx: TBox; const change: Integer = 1): TBox; cdecl; begin Result := bx.Expand(change); end;
function TBox_Shrink(const bx: TBox; const change: Integer = 1): TBox; cdecl; begin Result := bx.Shrink(change); end;
function TBox_Resize(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.Resize(change); end;
function TBox_ResizeVertically(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeVertically(change); end;
function TBox_ResizeHorizontally(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeHorizontally(change); end;
function TBox_ResizeTop(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeTop(change); end;
function TBox_ResizeBottom(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeBottom(change); end;
function TBox_ResizeLeft(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeLeft(change); end;
function TBox_ResizeRight(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeRight(change); end;
function TBox_ResizeTopLeft(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeTopLeft(change); end;
function TBox_ResizeTopRight(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeTopRight(change); end;
function TBox_ResizeBottomRight(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeBottomRight(change); end;
function TBox_ResizeBottomLeft(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeBottomLeft(change); end;
function TBox_Equal(const bx: TBox; const b: TBox): Boolean; cdecl; inline; begin Result := bx.Equal(b); end;
function TBox_Contains1(const bx: TBox; const pt: TPoint): Boolean; overload; cdecl; begin Result := bx.Contains(pt); end;
function TBox_Contains2(const bx: TBox; const b: TBox): Boolean; overload; cdecl; begin Result := bx.Contains(b); end;
function TBox_InArea1(const bx: TBox; const area: TBox): Boolean; overload; cdecl; begin Result := bx.InArea(area); end;
function TBox_InArea2(const bx: TBox; const areas: TBoxArray): Boolean; overload; cdecl; begin Result := bx.InArea(areas); end;
function TBox_Inside1(const bx: TBox; const area: TBox): Boolean; overload; cdecl; begin Result := bx.Inside(area); end;
function TBox_Inside2(const bx: TBox; const areas: TBoxArray): Boolean; overload; cdecl; begin Result := bx.Inside(areas); end;
function TBox_Center(const bx: TBox): TPoint; cdecl; begin Result := bx.Center; end;
function TBox_Envelope(const bx: TBox; const b: TBox): TBox; cdecl; begin Result := bx.Envelope(b); end;
function TBox_Overlap(const bx: TBox; const b: TBox): Boolean; cdecl; inline; begin Result := bx.Overlap(b); end;
function TBox_Intersection(const bx: TBox; const b: TBox): TBox; cdecl; begin Result := b.Intersection(b); end;
function TBox_Intersect(const bx: TBox; const b: TBox; var intersection: TBox): Boolean; cdecl; begin Result := bx.Intersect(b, intersection); end;
function TBox_Union(const bx: TBox; const b: TBox): TBox; cdecl; begin Result := bx.Union(b); end;
function TBox_Valid(const bx: TBox): Boolean; cdecl; inline; begin Result := bx.Valid; end;
function TBox_Invalid(const bx: TBox): Boolean; cdecl; begin Result := bx.Invalid; end;
function TBox_Similar1(const bx: TBox; const b: TBox; const maxWDiff, maxHDiff: Integer): Boolean; overload; cdecl; begin Result := bx.Similar(b, maxWDiff, maxHDiff); end;
function TBox_Similar2(const bx: TBox; const b: TBox; const diff: Integer): Boolean; overload; cdecl; begin Result := bx.Similar(b, diff); end;
function TBox_Fix(var bx: TBox): Boolean; cdecl; begin Result := bx.Fix; end;
function TBox_Constraint(var bx: TBox; const area: TBox): Boolean; cdecl; begin Result := bx.Constraint(area); end;
function TBox_Clip(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.Clip(area); end;
function TBox_Restrict(var bx: TBox; const area: TBox): Boolean; cdecl; begin Result := bx.Restrict(area); end;
function TBox_Clamp(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.Clamp(area); end;
function TBox_Points(const bx: TBox): TPointArray; cdecl; begin Result := bx.Points; end;
function TBox_TPA(const bx: TBox): TPointArray; cdecl; begin Result := bx.TPA; end;
function TBox_Grid(const bx: TBox; const rows, columns: Integer; const spaceVertical: Integer = 0; const spaceHorizontal: Integer = 0): TBoxArray; cdecl; begin Result := bx.Grid(rows, columns, spaceVertical, spaceHorizontal); end;
function TBox_Row(const bx: TBox; const cells: Integer; const space: Integer = 0): TBoxArray; cdecl; begin Result := bx.Row(cells, space); end;
function TBox_Column(const bx: TBox; const cells: Integer; const space: Integer = 0): TBoxArray; cdecl; begin Result := bx.Column(cells, space); end;
function TBox_CornerPoints(const bx: TBox): TPointArray; cdecl; begin Result := bx.CornerPoints; end;
function TBox_Corners(const bx: TBox): TPointArray; cdecl; begin Result := bx.Corners; end;
function TBox_SimilarSize1(const bx: TBox; const b: TBox; const widthDifferency, heightDifferency: Integer): Boolean; overload; cdecl; begin Result := bx.SimilarSize(b, widthDifferency, heightDifferency); end;
function TBox_SimilarSize2(const bx: TBox; const b: TBox; const differency: Integer): Boolean; overload; cdecl; begin Result := bx.SimilarSize(b, differency); end;
function TBox_Centered(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.Centered(area); end;
function TBox_CenterVertically(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.CenterVertically(area); end;
function TBox_CenterHorizontally(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.CenterHorizontally(area); end;

function TRange_Neutral(const range: TRange): Boolean; cdecl; begin Result := range.Neutral; end;
function TRange_Ascending(const range: TRange): Boolean; cdecl; begin Result := range.Ascending; end;
function TRange_Descending(const range: TRange): Boolean; cdecl; begin Result := range.Descending; end;
function TRange_Create(const start: Integer = 0; const stop: Integer = 0): TRange; cdecl; var range: TRange; begin Result := range.Create(start, stop); end;
function TRange_Build(const start: Integer = 0; const stop: Integer = 0): TRange; cdecl; var range: TRange; begin Result := range.Build(start, stop); end;
function TRange_Grab(const range: TRange): TRange; cdecl; begin Result := range.Grab; end;
function TRange_Size(const range: TRange): Integer; cdecl; begin Result := range.Size; end;
function TRange_Length(const range: TRange): Integer; cdecl; begin Result := range.Length; end;
function TRange_Lowest(const range: TRange): Integer; cdecl; begin Result := range.Lowest; end;
function TRange_Minimum(const range: TRange): Integer; cdecl; begin Result := range.Minimum; end;
function TRange_Highest(const range: TRange): Integer; cdecl; begin Result := range.Highest; end;
function TRange_Maximum(const range: TRange): Integer; cdecl; begin Result := range.Maximum; end;
function TRange_Digits(const range: TRange): TIntegerArray; cdecl; begin Result := range.Digits; end;
function TRange_Ints(const range: TRange): TIntegerArray; cdecl; begin Result := range.Ints; end;
function TRange_Values(const range: TRange): TIntegerArray; cdecl; begin Result := range.Values; end;
function TRange_TIA(const range: TRange): TIntegerArray; cdecl; begin Result := range.TIA; end;
function TRange_Normalize(const range: TRange): TRange; cdecl; begin Result := range.Normalize; end;
function TRange_Overlapping(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Overlapping(b); end;
function TRange_Overlap(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Overlap(b); end;
function TRange_Intersection(const range: TRange; const b: TRange; const null: TRange): TRange; cdecl; begin Result := range.Intersection(b, null); end;
function TRange_Intersect(const range: TRange; const b: TRange; var intersection: TRange): Boolean; cdecl; begin range.Intersect(b, intersection); end;
function TRange_Union(const range: TRange; const b: TRange): TRange; cdecl; begin Result := range.Union(b); end;
function TRange_Shift(const range: TRange; const delta: Integer): TRange; cdecl; begin Result := range.Shift(delta); end;
function TRange_Contains1(const range: TRange; const x: Integer): Boolean; overload; cdecl; begin Result := range.Contains(x); end;
function TRange_Contains2(const range: TRange; const x: TRange): Boolean; overload; cdecl; begin Result := range.Contains(x); end;
function TRange_Reversed(const range: TRange): TRange; cdecl; begin Result := range.Reversed; end;
function TRange_Reverse(var range: TRange): Boolean; cdecl; begin Result := range.Reverse; end;
function TRange_Equals(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Equals(b); end;
function TRange_Differs(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Differs(b); end;
function TRange_Equal(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Equal(b); end;
function TRange_Differ(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Differ(b); end;
function TRange_Clamp(const range: TRange; const zone: TRange): TRange; cdecl; begin Result := range.Clamp(zone); end;
function TRange_ClampMax(const range: TRange; const maximum: Integer): TRange; cdecl; begin Result := range.ClampMax(maximum); end;
function TRange_ClampMin(const range: TRange; const minimum: Integer): TRange; cdecl; begin Result := range.ClampMin(minimum); end;
function TRange_Restrict(var range: TRange; const zone: TRange): Boolean; cdecl; begin Result := range.Restrict(zone); end;
function TRange_RestrictMin(var range: TRange; const minimum: Integer): Boolean; cdecl; begin Result := range.RestrictMin(minimum); end;
function TRange_RestrictMax(var range: Trange; const maximum: Integer): Boolean; cdecl; begin Result := range.RestrictMax(maximum); end;
function TRange_Clip(const range: TRange; const zone: TRange): TRange; cdecl; begin Result := range.Clip(zone); end;
function TRange_ClipMin(const range: TRange; const minimum: Integer): TRange; cdecl; begin Result := range.ClipMin(minimum); end;
function TRange_ClipMax(const range: TRange; const maximum: Integer): TRange; cdecl; begin Result := range.ClipMax(maximum); end;
function TRange_Distribute(const range: TRange; const parts: Integer): TRangeArray; cdecl; begin Result := range.Distribute(parts); end;
function TRange_Partition(const range: TRange; const size: Integer): TRangeArray; cdecl; begin Result := range.Partition(size); end;
function TRange_Divide(const range: TRange; const size: Integer): TRangeArray; cdecl; begin Result := range.Divide(size); end;
function TRange_Touch(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Touch(b); end;
function TRange_Touches(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Touches(b); end;
function TRange_Distance(const range: TRange; const b: TRange): Integer; cdecl; begin Result := range.Distance(b); end;
function TRange_DistHausdorff(const range: TRange; const b: TRange): Integer; cdecl; begin Result := range.DistHausdorff(b); end;
function TRange_Digit(const range: TRange; const x: Integer): Boolean; cdecl; inline; begin Result := range.Digit(x); end;
function TRange_Value(const range: TRange; const x: Integer): Boolean; cdecl; inline; begin Result := range.Value(x); end;
function TRange_Middle(const range: TRange): Double; cdecl; begin Result := range.Middle; end;
function TRange_Center(const range: TRange): Integer; cdecl; begin Result := range.Center; end;
function TRange_Str(const range: TRange): string; cdecl; begin Result := range.Str; end;

function TIntegerArray_Descending(const arr: TIntegerArray): Boolean; cdecl; begin Result := arr.Descending; end;
function TIntegerArray_Ascending(const arr: TIntegerArray): Boolean; cdecl; begin Result := arr.Ascending; end;
function TIntegerArray_Bounds1(const arr: TIntegerArray): TRange; overload; cdecl; begin Result := arr.Bounds; end;
function TIntegerArray_Bounds2(const arr: TIntegerArray; var size: Integer): TRange; overload; cdecl; begin Result := arr.Bounds(size); end;
function TIntegerArray_Range(const arr: TIntegerArray): TRange; cdecl; begin Result := arr.Range; end;
function TIntegerArray_Unique(var arr: TIntegerArray): Integer; cdecl; begin Result := arr.Unique; end;
function TIntegerArray_Uniqued(const arr: TIntegerArray): TIntegerArray; cdecl; begin Result := arr.Uniqued; end;
function TIntegerArray_Numberline(const arr: TIntegerArray): TIntegerArray; cdecl; begin Result := arr.Numberline; end;
function TIntegerArray_Lowest(const arr: TIntegerArray): Integer; cdecl; begin Result := arr.Lowest; end;
function TIntegerArray_Highest(const arr: TIntegerArray): Integer; cdecl; begin Result := arr.Highest; end;
function TIntegerArray_Mini1(const arr: TIntegerArray; const ascending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Mini(ascending, start); end;
function TIntegerArray_Mini2(const arr: TIntegerArray; const start: Integer; const ascending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Mini(start, ascending); end;
function TIntegerArray_Maxi1(const arr: TIntegerArray; const ascending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Maxi(ascending, start); end;
function TIntegerArray_Maxi2(const arr: TIntegerArray; const start: Integer; const ascending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Maxi(ascending, start); end;
function TIntegerArray_Sum(const arr: TIntegerArray): Int64; cdecl; begin Result := arr.Sum; end;
function TIntegerArray_Density(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Density; end;
function TIntegerArray_Mean(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Mean; end;
function TIntegerArray_Mode(const arr: TIntegerArray): Integer; cdecl; begin Result := arr.Mode; end;
function TIntegerArray_Median(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Median; end;
function TIntegerArray_Middle(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Middle; end;
function TIntegerArray_Center(const arr: TIntegerArray): Integer; cdecl; begin Result := arr.Center; end;
function TIntegerArray_MostFrequent(const arr: TIntegerArray; const null: Integer = -2147483648): Integer; cdecl; begin Result := arr.MostFrequent(null); end;
function TIntegerArray_LeastFrequent(const arr: TIntegerArray; const null: Integer = -2147483648): Integer; cdecl; begin Result := arr.LeastFrequent(null); end;
function TIntegerArray_BubbleSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BubbleSort(ascending); end;
function TIntegerArray_BubbleSort2(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BubbleSort2(ascending); end;
function TIntegerArray_BubbleSortOptimized(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BubbleSortOptimized(ascending); end;
function TIntegerArray_QuickSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.QuickSort(ascending); end;
function TIntegerArray_QuickSort3W(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.QuickSort3W(ascending); end;
function TIntegerArray_QSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.QSort(ascending); end;
function TIntegerArray_CoctailSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.CoctailSort(ascending); end;
function TIntegerArray_CoctailSort2(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.CoctailSort2(ascending); end;
function TIntegerArray_CombSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.CombSort(ascending); end;
function TIntegerArray_GnomeSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.GnomeSort(ascending); end;
function TIntegerArray_GnomeSortOptimized(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.GnomeSortOptimized(ascending); end;
function TIntegerArray_HeapSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.HeapSort(ascending); end;
function TIntegerArray_InsertionSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.InsertionSort(ascending); end;
function TIntegerArray_SelectionSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.SelectionSort(ascending); end;
function TIntegerArray_SelectionSortBidirectional(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.SelectionSortBidirectional(ascending); end;
function TIntegerArray_SelectionSortBidirectional2(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.SelectionSortBidirectional2(ascending); end;
function TIntegerArray_PancakeSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.PancakeSort(ascending); end;
function TIntegerArray_MergeSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.MergeSort(ascending); end;
function TIntegerArray_MergeSortBU(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.MergeSortBU(ascending); end;
function TIntegerArray_ShellSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.ShellSort(ascending); end;
function TIntegerArray_BSort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BSort(ascending); end;
function TIntegerArray_BinarySort(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySort(ascending); end;
function TIntegerArray_BinarySorted(const arr: TIntegerArray; const ascending: Boolean = True): TIntegerArray; cdecl; begin Result := arr.BinarySorted(ascending); end;
function TIntegerArray_BinaryBoundL(const arr: TIntegerArray; const x: Integer; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryBoundL(x, ascending); end;
function TIntegerArray_BinaryBoundR(const arr: TIntegerArray; const x: Integer; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryBoundR(x, ascending); end;
function TIntegerArray_BinaryPosL(const arr: TIntegerArray; const x: Integer; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryPosL(x, ascending); end;
function TIntegerArray_BinaryPosR(const arr: TIntegerArray; const x: Integer; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryPosR(x, ascending); end;
function TIntegerArray_BinarySearch(const arr: TIntegerArray; const x: Integer; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearch(x, ascending); end;
function TIntegerArray_BinaryContains(const arr: TIntegerArray; const x: Integer; const ascending: Boolean = True): Boolean; cdecl; begin Result := arr.BinaryContains(x, ascending); end;
function TIntegerArray_BinaryLocate(const arr: TIntegerArray; const x: Integer; const ascending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryLocate(x, ascending); end;
function TIntegerArray_BinaryLocation(const arr: TIntegerArray; const x: Integer; const ascending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryLocation(x, ascending); end;
function TIntegerArray_BinaryAppend(var arr: TIntegerArray; const x: Integer; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryAppend(x, ascending); end;
function TIntegerArray_BinaryAdd(const arr: TIntegerArray; const x: Integer; const ascending: Boolean = True): TIntegerArray; cdecl; begin Result := arr.BinaryAdd(x, ascending); end;
function TIntegerArray_BinarySearchF(const arr: TIntegerArray; const x: TRange; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearchF(x, ascending); end;
function TIntegerArray_BinarySearchL(const arr: TIntegerArray; const x: TRange; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearchL(x, ascending); end;
function TIntegerArray_BinaryUnique(var arr: TIntegerArray; const ascending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryUnique(ascending); end;
function TIntegerArray_BinaryUniqued(const arr: TIntegerArray; const ascending: Boolean = True): TIntegerArray; cdecl; begin Result := arr.BinaryUniqued(ascending); end;
function TIntegerArray_Split1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Split(minDiff, maxDiff); end;
function TIntegerArray_Split2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Split(diff); end;
function TIntegerArray_Sblit1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Sblit(minDiff, maxDiff); end;
function TIntegerArray_Sblit2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Sblit(diff); end;
function TIntegerArray_Group1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Group(minDiff, maxDiff); end;
function TIntegerArray_Group2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Group(diff); end;
function TIntegerArray_Groub1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Groub(minDiff, maxDiff); end;
function TIntegerArray_Groub2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Groub(diff); end;
function TIntegerArray_Invert(const arr: TIntegerArray): TIntegerArray; cdecl; begin Result := arr.Invert; end;

function TPointArray_Bounds1(const arr: TPointArray): TBox; overload; cdecl; begin Result := arr.Bounds; end;
function TPointArray_Bounds2(const arr: TPointArray; var width, height: Integer): TBox; overload; cdecl; begin Result := arr.Bounds(width, height); end;
function TPointArray_Unique(var arr: TPointArray): Integer; cdecl; begin Result := arr.Unique; end;
function TPointArray_Uniqued(const arr: TPointArray): TPointArray; cdecl; begin Result := arr.Uniqued; end;
function TPointArray_Invert(const arr: TPointArray): TPointArray; cdecl; begin Result := arr.Invert; end;
function TPointArray_Edge(const arr: TPointArray; const scan8W: Boolean = False): TPointArray; cdecl; begin Result := arr.Edge(scan8W); end;
function TPointArray_FloodFill1(const arr: TPointArray; const start: TPoint; const area: TBox; const scan8W: Boolean = False): TPointArray; overload; cdecl; begin Result := arr.FloodFill(start, area, scan8W); end;
function TPointArray_FloodFill2(const arr: TPointArray; const start: TPoint; const scan8W: Boolean = False): TPointArray; overload; cdecl; begin Result := arr.FloodFill(start, scan8W); end;

function TRangeArray_TIA(const arr: TRangeArray): TIntegerArray; cdecl; begin Result := arr.TIA; end;
function TRangeArray_T2DIA(const arr: TRangeArray): T2DIntegerArray; cdecl; begin Result := arr.T2DIA; end;

function TArray_Add_Integer(const arr: TIntegerArray; const item: Integer; const duplicates: Boolean = True): TIntegerArray; overload; cdecl; begin Result := TArray_Add(arr, item, duplicates); end;
function TArray_Add_Double(const arr: TDoubleArray; const item: Double; const duplicates: Boolean = True): TDoubleArray; overload; cdecl; begin Result := TArray_Add(arr, item, duplicates); end;
function TArray_Add_String(const arr: TStringArray; const item: string; const duplicates: Boolean = True): TStringArray; overload; cdecl; begin Result := TArray_Add(arr, item, duplicates); end;
function TArray_Add_Char(const arr: TCharArray; const item: Char; const duplicates: Boolean = True): TCharArray; overload; cdecl; begin Result := TArray_Add(arr, item, duplicates); end;
function TArray_Add_Boolean(const arr: TBooleanArray; const item: Boolean; const duplicates: Boolean = True): TBooleanArray; overload; cdecl; begin Result := TArray_Add(arr, item, duplicates); end;
function TArray_Add_TPoint(const arr: TPointArray; const item: TPoint; const duplicates: Boolean = True): TPointArray; overload; cdecl; begin Result := TArray_Add(arr, item, duplicates); end;
function TArray_Add_TBox(const arr: TBoxArray; const item: TBox; const duplicates: Boolean = True): TBoxArray; overload; cdecl; begin Result := TArray_Add(arr, item, duplicates); end;
function TArray_Add_TRange(const arr: TRangeArray; const item: TRange; const duplicates: Boolean = True): TRangeArray; overload; cdecl; begin Result := TArray_Add(arr, item, duplicates); end;
function TArray_Add_Integer_1(const arr: TIntegerArray; const items: TIntegerArray; const duplicates: Boolean = True): TIntegerArray; overload; cdecl; begin Result := TArray_Add(arr, items, duplicates); end;
function TArray_Add_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const duplicates: Boolean = True): TDoubleArray; overload; cdecl; begin Result := TArray_Add(arr, items, duplicates); end;
function TArray_Add_String_1(const arr: TStringArray; const items: TStringArray; const duplicates: Boolean = True): TStringArray; overload; cdecl; begin Result := TArray_Add(arr, items, duplicates); end;
function TArray_Add_Char_1(const arr: TCharArray; const items: TCharArray; const duplicates: Boolean = True): TCharArray; overload; cdecl; begin Result := TArray_Add(arr, items, duplicates); end;
function TArray_Add_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const duplicates: Boolean = True): TBooleanArray; overload; cdecl; begin Result := TArray_Add(arr, items, duplicates); end;
function TArray_Add_TPoint_1(const arr: TPointArray; const items: TPointArray; const duplicates: Boolean = True): TPointArray; overload; cdecl; begin Result := TArray_Add(arr, items, duplicates); end;
function TArray_Add_TBox_1(const arr: TBoxArray; const items: TBoxArray; const duplicates: Boolean = True): TBoxArray; overload; cdecl; begin Result := TArray_Add(arr, items, duplicates); end;
function TArray_Add_TRange_1(const arr: TRangeArray; const items: TRangeArray; const duplicates: Boolean = True): TRangeArray; overload; cdecl; begin Result := TArray_Add(arr, items, duplicates); end;

function TArray_AllEqual_Integer(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_Double(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_String(const arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_Char(const arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_TPoint(const arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_TBox(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_TRange(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;

function TArray_AllSame_Integer(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_Double(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_String(const arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_Char(const arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_TPoint(const arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_TBox(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_TRange(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;

function TArray_AllUnique_Integer(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_Double(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_String(const arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_Char(const arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_TPoint(const arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_TBox(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_TRange(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;

function TArray_Append_Integer(var arr: TIntegerArray; const item: Integer; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, item, duplicates); end;
function TArray_Append_Double(var arr: TDoubleArray; const item: Double; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, item, duplicates); end;
function TArray_Append_String(var arr: TStringArray; const item: string; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, item, duplicates); end;
function TArray_Append_Char(var arr: TCharArray; const item: Char; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, item, duplicates); end;
function TArray_Append_Boolean(var arr: TBooleanArray; const item: Boolean; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, item, duplicates); end;
function TArray_Append_TPoint(var arr: TPointArray; const item: TPoint; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, item, duplicates); end;
function TArray_Append_TBox(var arr: TBoxArray; const item: TBox; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, item, duplicates); end;
function TArray_Append_TRange(var arr: TRangeArray; const item: TRange; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, item, duplicates); end;
function TArray_Append_Integer_1(var arr: TIntegerArray; const items: TIntegerArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, items, duplicates); end;
function TArray_Append_Double_1(var arr: TDoubleArray; const items: TDoubleArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, items, duplicates); end;
function TArray_Append_String_1(var arr: TStringArray; const items: TStringArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, items, duplicates); end;
function TArray_Append_Char_1(var arr: TCharArray; const items: TCharArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, items, duplicates); end;
function TArray_Append_Boolean_1(var arr: TBooleanArray; const items: TBooleanArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, items, duplicates); end;
function TArray_Append_TPoint_1(var arr: TPointArray; const items: TPointArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, items, duplicates); end;
function TArray_Append_TBox_1(var arr: TBoxArray; const items: TBoxArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, items, duplicates); end;
function TArray_Append_TRange_1(var arr: TRangeArray; const items: TRangeArray; const duplicates: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Append(arr, items, duplicates); end;

function TArray_Build_Integer(const item: Integer; const size: Integer = 1): TIntegerArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_Double(const item: Double; const size: Integer = 1): TDoubleArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_String(const item: string; const size: Integer = 1): TStringArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_Char(const item: Char; const size: Integer = 1): TCharArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_Boolean(const item: Boolean; const size: Integer = 1): TBooleanArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_TPoint(const item: TPoint; const size: Integer = 1): TPointArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_TBox(const item: TBox; const size: Integer = 1): TBoxArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_TRange(const item: TRange; const size: Integer = 1): TRangeArray; overload; cdecl; begin Result := TArray_Build(item, size); end;

function TArray_BuiltWith_Integer(const arr, allowed: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_Double(const arr, allowed: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_String(const arr, allowed: TStringArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_Char(const arr, allowed: TCharArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_Boolean(const arr, allowed: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_TPoint(const arr, allowed: TPointArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_TBox(const arr, allowed: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_TRange(const arr, allowed: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;

function TArray_BuiltWithout_Integer(const arr, forbidden: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_Double(const arr, forbidden: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_String(const arr, forbidden: TStringArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_Char(const arr, forbidden: TCharArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_Boolean(const arr, forbidden: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_TPoint(const arr, forbidden: TPointArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_TBox(const arr, forbidden: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_TRange(const arr, forbidden: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;

function TArray_Clone_Integer(const arr: TIntegerArray; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Clone(arr, index, count); end;
function TArray_Clone_Double(const arr: TDoubleArray; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := TArray_Clone(arr, index, count); end;
function TArray_Clone_String(const arr: TStringArray; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := TArray_Clone(arr, index, count); end;
function TArray_Clone_Char(const arr: TCharArray; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := TArray_Clone(arr, index, count); end;
function TArray_Clone_Boolean(const arr: TBooleanArray; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := TArray_Clone(arr, index, count); end;
function TArray_Clone_TPoint(const arr: TPointArray; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := TArray_Clone(arr, index, count); end;
function TArray_Clone_TBox(const arr: TBoxArray; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := TArray_Clone(arr, index, count); end;
function TArray_Clone_TRange(const arr: TRangeArray; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := TArray_Clone(arr, index, count); end;

function TArray_Combine_Integer(const a, b: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_Double(const a, b: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_String(const a, b: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_Char(const a, b: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_Boolean(const a, b: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_TPoint(const a, b: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_TBox(const a, b: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_TRange(const a, b: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;

function TArray_Contains_Integer(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, index); end;
function TArray_Contains_Double(const arr: TDoubleArray; const item: Double; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, index); end;
function TArray_Contains_String(const arr: TStringArray; const item: string; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, index); end;
function TArray_Contains_Char(const arr: TCharArray; const item: Char; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, index); end;
function TArray_Contains_Boolean(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, index); end;
function TArray_Contains_TPoint(const arr: TPointArray; const item: TPoint; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, index); end;
function TArray_Contains_TBox(const arr: TBoxArray; const item: TBox; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, index); end;
function TArray_Contains_TRange(const arr: TRangeArray; const item: TRange; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, index); end;

function TArray_Copy_Integer(const arr: TIntegerArray; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_Double(const arr: TDoubleArray; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_String(const arr: TStringArray; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_Char(const arr: TCharArray; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_Boolean(const arr: TBooleanArray; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_TPoint(const arr: TPointArray; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_TBox(const arr: TBoxArray; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_TRange(const arr: TRangeArray; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_Integer_1(const arr: TIntegerArray; const IDs: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_Double_1(const arr: TDoubleArray; const IDs: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_String_1(const arr: TStringArray; const IDs: TIntegerArray): TStringArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_Char_1(const arr: TCharArray; const IDs: TIntegerArray): TCharArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_Boolean_1(const arr: TBooleanArray; const IDs: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_TPoint_1(const arr: TPointArray; const IDs: TIntegerArray): TPointArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_TBox_1(const arr: TBoxArray; const IDs: TIntegerArray): TBoxArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_TRange_1(const arr: TRangeArray; const IDs: TIntegerArray): TRangeArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;

function TArray_Create_Integer(const item: Integer): TIntegerArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_Double(const item: Double): TDoubleArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_String(const item: string): TStringArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_Char(const item: Char): TCharArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_Boolean(const item: Boolean): TBooleanArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_TPoint(const item: TPoint): TPointArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_TBox(const item: TBox): TBoxArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_TRange(const item: TRange): TRangeArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_Integer_1(const size: Integer; const item: Integer): TIntegerArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_Double_1(const size: Integer; const item: Double): TDoubleArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_String_1(const size: Integer; const item: string): TStringArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_Char_1(const size: Integer; const item: Char): TCharArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_Boolean_1(const size: Integer; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_TPoint_1(const size: Integer; const item: TPoint): TPointArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_TBox_1(const size: Integer; const item: TBox): TBoxArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_TRange_1(const size: Integer; const item: TRange): TRangeArray; overload; cdecl; begin Result := TArray_Create(size, item); end;

function TArray_Delete_Integer(var arr: TIntegerArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_Double(var arr: TDoubleArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_String(var arr: TStringArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_Char(var arr: TCharArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_Boolean(var arr: TBooleanArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_TPoint(var arr: TPointArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_TBox(var arr: TBoxArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_TRange(var arr: TRangeArray; const index: Integer = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_Integer_1(var arr: TIntegerArray; const IDs: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_Double_1(var arr: TDoubleArray; const IDs: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_String_1(var arr: TStringArray; const IDs: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_Char_1(var arr: TCharArray; const IDs: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_Boolean_1(var arr: TBooleanArray; const IDs: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_TPoint_1(var arr: TPointArray; const IDs: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_TBox_1(var arr: TBoxArray; const IDs: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_TRange_1(var arr: TRangeArray; const IDs: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;

function TArray_Differ_Integer(const arr, target: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_Double(const arr, target: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_String(const arr, target: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_Char(const arr, target: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_Boolean(const arr, target: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_TPoint(const arr, target: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_TBox(const arr, target: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_TRange(const arr, target: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;

function TArray_Distribute_Integer(const arr: TIntegerArray; const parts: Integer): T2DIntegerArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_Double(const arr: TDoubleArray; const parts: Integer): T2DDoubleArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_String(const arr: TStringArray; const parts: Integer): T2DStringArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_Char(const arr: TCharArray; const parts: Integer): T2DCharArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_Boolean(const arr: TBooleanArray; const parts: Integer): T2DBooleanArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_TPoint(const arr: TPointArray; const parts: Integer): T2DPointArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_TBox(const arr: TBoxArray; const parts: Integer): T2DBoxArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_TRange(const arr: TRangeArray; const parts: Integer): T2DRangeArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;

function TArray_Dump_Integer(var arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_Double(var arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_String(var arr: TStringArray; const items: TStringArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_Char(var arr: TCharArray; const items: TCharArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_Boolean(var arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_TPoint(var arr: TPointArray; const items: TPointArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_TBox(var arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_TRange(var arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;

function TArray_Dupe_Integer(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_Double(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_String(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_Char(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_Boolean(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_TPoint(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_TBox(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_TRange(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;

function TArray_Empty_Integer(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_Double(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_String(const arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_Char(const arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_TPoint(const arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_TBox(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_TRange(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;

function TArray_Equal_Integer(const arr, target: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_Double(const arr, target: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_String(const arr, target: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_Char(const arr, target: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_Boolean(const arr, target: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_TPoint(const arr, target: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_TBox(const arr, target: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_TRange(const arr, target: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;

function TArray_Extend_Integer(const arr: TIntegerArray; const item: Integer): TIntegerArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_Double(const arr: TDoubleArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_String(const arr: TStringArray; const item: string): TStringArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_Char(const arr: TCharArray; const item: Char): TCharArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_Boolean(const arr: TBooleanArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_TPoint(const arr: TPointArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_TBox(const arr: TBoxArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_TRange(const arr: TRangeArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_Integer_1(const arr: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_Double_1(const arr: TDoubleArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_String_1(const arr: TStringArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_Char_1(const arr: TCharArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_TPoint_1(const arr: TPointArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_TBox_1(const arr: TBoxArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_TRange_1(const arr: TRangeArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;

function TArray_Extract_Integer(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Extract(arr, item, index); end;
function TArray_Extract_Double(const arr: TDoubleArray; const item: Double; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := TArray_Extract(arr, item, index); end;
function TArray_Extract_String(const arr: TStringArray; const item: string; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := TArray_Extract(arr, item, index); end;
function TArray_Extract_Char(const arr: TCharArray; const item: Char; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := TArray_Extract(arr, item, index); end;
function TArray_Extract_Boolean(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := TArray_Extract(arr, item, index); end;
function TArray_Extract_TPoint(const arr: TPointArray; const item: TPoint; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := TArray_Extract(arr, item, index); end;
function TArray_Extract_TBox(const arr: TBoxArray; const item: TBox; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := TArray_Extract(arr, item, index); end;
function TArray_Extract_TRange(const arr: TRangeArray; const item: TRange; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := TArray_Extract(arr, item, index); end;
function TArray_Extract_Integer_1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Extract(arr, items, index); end;
function TArray_Extract_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := TArray_Extract(arr, items, index); end;
function TArray_Extract_String_1(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := TArray_Extract(arr, items, index); end;
function TArray_Extract_Char_1(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := TArray_Extract(arr, items, index); end;
function TArray_Extract_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := TArray_Extract(arr, items, index); end;
function TArray_Extract_TPoint_1(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := TArray_Extract(arr, items, index); end;
function TArray_Extract_TBox_1(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := TArray_Extract(arr, items, index); end;
function TArray_Extract_TRange_1(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := TArray_Extract(arr, items, index); end;

function TArray_ExtractEvery_Integer(const arr: TIntegerArray; const X: Integer = 1; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, index); end;
function TArray_ExtractEvery_Double(const arr: TDoubleArray; const X: Integer = 1; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, index); end;
function TArray_ExtractEvery_String(const arr: TStringArray; const X: Integer = 1; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, index); end;
function TArray_ExtractEvery_Char(const arr: TCharArray; const X: Integer = 1; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, index); end;
function TArray_ExtractEvery_Boolean(const arr: TBooleanArray; const X: Integer = 1; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, index); end;
function TArray_ExtractEvery_TPoint(const arr: TPointArray; const X: Integer = 1; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, index); end;
function TArray_ExtractEvery_TBox(const arr: TBoxArray; const X: Integer = 1; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, index); end;
function TArray_ExtractEvery_TRange(const arr: TRangeArray; const X: Integer = 1; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, index); end;

function TArray_Fill_Integer(const arr: TIntegerArray; const item: Integer; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Fill(arr, item, index, count); end;
function TArray_Fill_Double(const arr: TDoubleArray; const item: Double; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := TArray_Fill(arr, item, index, count); end;
function TArray_Fill_String(const arr: TStringArray; const item: string; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := TArray_Fill(arr, item, index, count); end;
function TArray_Fill_Char(const arr: TCharArray; const item: Char; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := TArray_Fill(arr, item, index, count); end;
function TArray_Fill_Boolean(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := TArray_Fill(arr, item, index, count); end;
function TArray_Fill_TPoint(const arr: TPointArray; const item: TPoint; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := TArray_Fill(arr, item, index, count); end;
function TArray_Fill_TBox(const arr: TBoxArray; const item: TBox; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := TArray_Fill(arr, item, index, count); end;
function TArray_Fill_TRange(const arr: TRangeArray; const item: TRange; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := TArray_Fill(arr, item, index, count); end;
function TArray_Fill_Integer_1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Fill(arr, items, index, count); end;
function TArray_Fill_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := TArray_Fill(arr, items, index, count); end;
function TArray_Fill_String_1(const arr: TStringArray; const items: TStringArray; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := TArray_Fill(arr, items, index, count); end;
function TArray_Fill_Char_1(const arr: TCharArray; const items: TCharArray; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := TArray_Fill(arr, items, index, count); end;
function TArray_Fill_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := TArray_Fill(arr, items, index, count); end;
function TArray_Fill_TPoint_1(const arr: TPointArray; const items: TPointArray; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := TArray_Fill(arr, items, index, count); end;
function TArray_Fill_TBox_1(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := TArray_Fill(arr, items, index, count); end;
function TArray_Fill_TRange_1(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := TArray_Fill(arr, items, index, count); end;

function TArray_Filter_Integer(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Filter(arr, item, index); end;
function TArray_Filter_Double(const arr: TDoubleArray; const item: Double; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := TArray_Filter(arr, item, index); end;
function TArray_Filter_String(const arr: TStringArray; const item: string; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := TArray_Filter(arr, item, index); end;
function TArray_Filter_Char(const arr: TCharArray; const item: Char; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := TArray_Filter(arr, item, index); end;
function TArray_Filter_Boolean(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := TArray_Filter(arr, item, index); end;
function TArray_Filter_TPoint(const arr: TPointArray; const item: TPoint; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := TArray_Filter(arr, item, index); end;
function TArray_Filter_TBox(const arr: TBoxArray; const item: TBox; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := TArray_Filter(arr, item, index); end;
function TArray_Filter_TRange(const arr: TRangeArray; const item: TRange; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := TArray_Filter(arr, item, index); end;
function TArray_Filter_Integer_1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Filter(arr, items, index); end;
function TArray_Filter_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := TArray_Filter(arr, items, index); end;
function TArray_Filter_String_1(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := TArray_Filter(arr, items, index); end;
function TArray_Filter_Char_1(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := TArray_Filter(arr, items, index); end;
function TArray_Filter_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := TArray_Filter(arr, items, index); end;
function TArray_Filter_TPoint_1(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := TArray_Filter(arr, items, index); end;
function TArray_Filter_TBox_1(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := TArray_Filter(arr, items, index); end;
function TArray_Filter_TRange_1(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := TArray_Filter(arr, items, index); end;

function TArray_FilterEvery_Integer(const arr: TIntegerArray; const X: Integer = 1; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, index); end;
function TArray_FilterEvery_Double(const arr: TDoubleArray; const X: Integer = 1; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, index); end;
function TArray_FilterEvery_String(const arr: TStringArray; const X: Integer = 1; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, index); end;
function TArray_FilterEvery_Char(const arr: TCharArray; const X: Integer = 1; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, index); end;
function TArray_FilterEvery_Boolean(const arr: TBooleanArray; const X: Integer = 1; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, index); end;
function TArray_FilterEvery_TPoint(const arr: TPointArray; const X: Integer = 1; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, index); end;
function TArray_FilterEvery_TBox(const arr: TBoxArray; const X: Integer = 1; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, index); end;
function TArray_FilterEvery_TRange(const arr: TRangeArray; const X: Integer = 1; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, index); end;

function TArray_Find_Integer(const arr: TIntegerArray; const IDs: TRange; const item: Integer): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_Double(const arr: TDoubleArray; const IDs: TRange; const item: Double): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_String(const arr: TStringArray; const IDs: TRange; const item: string): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_Char(const arr: TCharArray; const IDs: TRange; const item: Char): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_Boolean(const arr: TBooleanArray; const IDs: TRange; const item: Boolean): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_TPoint(const arr: TPointArray; const IDs: TRange; const item: TPoint): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_TBox(const arr: TBoxArray; const IDs: TRange; const item: TBox): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_TRange(const arr: TRangeArray; const IDs: TRange; const item: TRange): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_Integer_1(const arr: TIntegerArray; const IDs: TIntegerArray; const item: Integer): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_Double_1(const arr: TDoubleArray; const IDs: TIntegerArray; const item: Double): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_String_1(const arr: TStringArray; const IDs: TIntegerArray; const item: string): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_Char_1(const arr: TCharArray; const IDs: TIntegerArray; const item: Char): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_Boolean_1(const arr: TBooleanArray; const IDs: TIntegerArray; const item: Boolean): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_TPoint_1(const arr: TPointArray; const IDs: TIntegerArray; const item: TPoint): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_TBox_1(const arr: TBoxArray; const IDs: TIntegerArray; const item: TBox): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_TRange_1(const arr: TRangeArray; const IDs: TIntegerArray; const item: TRange): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, item); end;
function TArray_Find_Integer_2(const arr: TIntegerArray; const IDs: TRange; const items: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_Double_2(const arr: TDoubleArray; const IDs: TRange; const items: TDoubleArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_String_2(const arr: TStringArray; const IDs: TRange; const items: TStringArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_Char_2(const arr: TCharArray; const IDs: TRange; const items: TCharArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_Boolean_2(const arr: TBooleanArray; const IDs: TRange; const items: TBooleanArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_TPoint_2(const arr: TPointArray; const IDs: TRange; const items: TPointArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_TBox_2(const arr: TBoxArray; const IDs: TRange; const items: TBoxArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_TRange_2(const arr: TRangeArray; const IDs: TRange; const items: TRangeArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_Integer_3(const arr: TIntegerArray; const IDs: TIntegerArray; const items: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_Double_3(const arr: TDoubleArray; const IDs: TIntegerArray; const items: TDoubleArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_String_3(const arr: TStringArray; const IDs: TIntegerArray; const items: TStringArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_Char_3(const arr: TCharArray; const IDs: TIntegerArray; const items: TCharArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_Boolean_3(const arr: TBooleanArray; const IDs: TIntegerArray; const items: TBooleanArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_TPoint_3(const arr: TPointArray; const IDs: TIntegerArray; const items: TPointArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_TBox_3(const arr: TBoxArray; const IDs: TIntegerArray; const items: TBoxArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;
function TArray_Find_TRange_3(const arr: TRangeArray; const IDs: TIntegerArray; const items: TRangeArray): Integer; overload; cdecl; begin Result := TArray_Find(arr, IDs, items); end;

function TArray_Flip_Integer(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_Double(var arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_String(var arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_Char(var arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_Boolean(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_TPoint(var arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_TBox(var arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_TRange(var arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;

function TArray_Get_Integer(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_Double(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_String(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_Char(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_Boolean(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_TPoint(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_TBox(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_TRange(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_Integer_1(const arr: TIntegerArray; const IDs: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_Double_1(const arr: TDoubleArray; const IDs: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_String_1(const arr: TStringArray; const IDs: TIntegerArray): TStringArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_Char_1(const arr: TCharArray; const IDs: TIntegerArray): TCharArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_Boolean_1(const arr: TBooleanArray; const IDs: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_TPoint_1(const arr: TPointArray; const IDs: TIntegerArray): TPointArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_TBox_1(const arr: TBoxArray; const IDs: TIntegerArray): TBoxArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_TRange_1(const arr: TRangeArray; const IDs: TIntegerArray): TRangeArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;

function TArray_Group_Integer(const arr: TIntegerArray): T2DIntegerArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_Double(const arr: TDoubleArray): T2DDoubleArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_String(const arr: TStringArray): T2DStringArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_Char(const arr: TCharArray): T2DCharArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_Boolean(const arr: TBooleanArray): T2DBooleanArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_TPoint(const arr: TPointArray): T2DPointArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_TBox(const arr: TBoxArray): T2DBoxArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_TRange(const arr: TRangeArray): T2DRangeArray; overload; cdecl; begin Result := TArray_Group(arr); end;

function TArray_Holds_Integer(const arr, chain: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_Double(const arr, chain: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_String(const arr, chain: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_Char(const arr, chain: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_Boolean(const arr, chain: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_TPoint(const arr, chain: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_TBox(const arr, chain: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_TRange(const arr, chain: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;

function TArray_IDs_Integer(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_Double(const arr: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_String(const arr: TStringArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_Char(const arr: TCharArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_Boolean(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_TPoint(const arr: TPointArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_TBox(const arr: TBoxArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_TRange(const arr: TRangeArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_Integer_1(const arr: TIntegerArray; const IDs: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_Double_1(const arr: TDoubleArray; const IDs: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_String_1(const arr: TStringArray; const IDs: TIntegerArray): TStringArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_Char_1(const arr: TCharArray; const IDs: TIntegerArray): TCharArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_Boolean_1(const arr: TBooleanArray; const IDs: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_TPoint_1(const arr: TPointArray; const IDs: TIntegerArray): TPointArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_TBox_1(const arr: TBoxArray; const IDs: TIntegerArray): TBoxArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_TRange_1(const arr: TRangeArray; const IDs: TIntegerArray): TRangeArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_Integer_2(const arr: TIntegerArray; const IDs: TIntegerArray; const item: Integer): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_Double_2(const arr: TDoubleArray; const IDs: TIntegerArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_String_2(const arr: TStringArray; const IDs: TIntegerArray; const item: string): TStringArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_Char_2(const arr: TCharArray; const IDs: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_Boolean_2(const arr: TBooleanArray; const IDs: TIntegerArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_TPoint_2(const arr: TPointArray; const IDs: TIntegerArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_TBox_2(const arr: TBoxArray; const IDs: TIntegerArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_TRange_2(const arr: TRangeArray; const IDs: TIntegerArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_Integer_3(const arr: TIntegerArray; const IDs: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_Double_3(const arr: TDoubleArray; const IDs: TIntegerArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_String_3(const arr: TStringArray; const IDs: TIntegerArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_Char_3(const arr: TCharArray; const IDs: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_Boolean_3(const arr: TBooleanArray; const IDs: TIntegerArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_TPoint_3(const arr: TPointArray; const IDs: TIntegerArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_TBox_3(const arr: TBoxArray; const IDs: TIntegerArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_TRange_3(const arr: TRangeArray; const IDs: TIntegerArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;

function TArray_Includes_Integer(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, index); end;
function TArray_Includes_Double(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, index); end;
function TArray_Includes_String(const arr: TStringArray; const item: string; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, index); end;
function TArray_Includes_Char(const arr: TCharArray; const item: Char; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, index); end;
function TArray_Includes_Boolean(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, index); end;
function TArray_Includes_TPoint(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, index); end;
function TArray_Includes_TBox(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, index); end;
function TArray_Includes_TRange(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, index); end;

function TArray_Keep_Integer(var arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_Double(var arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_String(var arr: TStringArray; const items: TStringArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_Char(var arr: TCharArray; const items: TCharArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_Boolean(var arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_TPoint(var arr: TPointArray; const items: TPointArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_TBox(var arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_TRange(var arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;

function TArray_LeastFrequent_Integer(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_Double(const arr: TDoubleArray): Double; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_String(const arr: TStringArray): string; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_Char(const arr: TCharArray): Char; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_TPoint(const arr: TPointArray): TPoint; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_TBox(const arr: TBoxArray): TBox; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_TRange(const arr: TRangeArray): TRange; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;

function TArray_Length_Integer(var arr: TIntegerArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Length(arr, size); end;
function TArray_Length_Double(var arr: TIntegerArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Length(arr, size); end;
function TArray_Length_String(var arr: TIntegerArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Length(arr, size); end;
function TArray_Length_Char(var arr: TIntegerArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Length(arr, size); end;
function TArray_Length_Boolean(var arr: TIntegerArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Length(arr, size); end;
function TArray_Length_TPoint(var arr: TIntegerArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Length(arr, size); end;
function TArray_Length_TBox(var arr: TIntegerArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Length(arr, size); end;
function TArray_Length_TRange(var arr: TIntegerArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Length(arr, size); end;
function TArray_Length_Integer_1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Length(arr); end;
function TArray_Length_Double_1(const arr: TDoubleArray): Integer; overload; cdecl; begin Result := TArray_Length(arr); end;
function TArray_Length_String_1(const arr: TStringArray): Integer; overload; cdecl; begin Result := TArray_Length(arr); end;
function TArray_Length_Char_1(const arr: TCharArray): Integer; overload; cdecl; begin Result := TArray_Length(arr); end;
function TArray_Length_Boolean_1(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := TArray_Length(arr); end;
function TArray_Length_TPoint_1(const arr: TPointArray): Integer; overload; cdecl; begin Result := TArray_Length(arr); end;
function TArray_Length_TBox_1(const arr: TBoxArray): Integer; overload; cdecl; begin Result := TArray_Length(arr); end;
function TArray_Length_TRange_1(const arr: TRangeArray): Integer; overload; cdecl; begin Result := TArray_Length(arr); end;

function TArray_MostFrequent_Integer(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_Double(const arr: TDoubleArray): Double; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_String(const arr: TStringArray): string; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_Char(const arr: TCharArray): Char; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_TPoint(const arr: TPointArray): TPoint; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_TBox(const arr: TBoxArray): TBox; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_TRange(const arr: TRangeArray): TRange; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;

function TArray_Move_Integer(var arr: TIntegerArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_Double(var arr: TDoubleArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_String(var arr: TStringArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_Char(var arr: TCharArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_Boolean(var arr: TBooleanArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_TPoint(var arr: TPointArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_TBox(var arr: TBoxArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_TRange(var arr: TRangeArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;

function TArray_Oversize_Integer(const arr: TIntegerArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_Double(const arr: TDoubleArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_String(const arr: TStringArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_Char(const arr: TCharArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_Boolean(const arr: TBooleanArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_TPoint(const arr: TPointArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_TBox(const arr: TBoxArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_TRange(const arr: TRangeArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;

function TArray_Partition_Integer(const arr: TIntegerArray; const size: Integer): T2DIntegerArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_Double(const arr: TDoubleArray; const size: Integer): T2DDoubleArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_String(const arr: TStringArray; const size: Integer): T2DStringArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_Char(const arr: TCharArray; const size: Integer): T2DCharArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_Boolean(const arr: TBooleanArray; const size: Integer): T2DBooleanArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_TPoint(const arr: TPointArray; const size: Integer): T2DPointArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_TBox(const arr: TBoxArray; const size: Integer): T2DBoxArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_TRange(const arr: TRangeArray; const size: Integer): T2DRangeArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;

function TArray_Pick_Integer(var arr: TIntegerArray; const IDs: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_Double(var arr: TDoubleArray; const IDs: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_String(var arr: TStringArray; const IDs: TIntegerArray): TStringArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_Char(var arr: TCharArray; const IDs: TIntegerArray): TCharArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_Boolean(var arr: TBooleanArray; const IDs: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_TPoint(var arr: TPointArray; const IDs: TIntegerArray): TPointArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_TBox(var arr: TBoxArray; const IDs: TIntegerArray): TBoxArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_TRange(var arr: TRangeArray; const IDs: TIntegerArray): TRangeArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;

function TArray_Pop_Integer(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_Double(var arr: TDoubleArray): Double; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_String(var arr: TStringArray): string; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_Char(var arr: TCharArray): Char; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_Boolean(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_TPoint(var arr: TPointArray): TPoint; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_TBox(var arr: TBoxArray): TBox; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_TRange(var arr: TRangeArray): TRange; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_Integer_1(var arr: TIntegerArray; const null: Integer): Integer; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_Double_1(var arr: TDoubleArray; const null: Double): Double; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_String_1(var arr: TStringArray; const null: string): string; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_Char_1(var arr: TCharArray; const null: Char): Char; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_Boolean_1(var arr: TBooleanArray; const null: Boolean): Boolean; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_TPoint_1(var arr: TPointArray; const null: TPoint): TPoint; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_TBox_1(var arr: TBoxArray; const null: TBox): TBox; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_TRange_1(var arr: TRangeArray; const null: TRange): TRange; overload; cdecl; begin Result := TArray_Pop(arr, null); end;

function TArray_Pos_Integer(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, item, index); end;
function TArray_Pos_Double(const arr: TDoubleArray; const item: Double; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, item, index); end;
function TArray_Pos_String(const arr: TStringArray; const item: string; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, item, index); end;
function TArray_Pos_Char(const arr: TCharArray; const item: Char; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, item, index); end;
function TArray_Pos_Boolean(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, item, index); end;
function TArray_Pos_TPoint(const arr: TPointArray; const item: TPoint; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, item, index); end;
function TArray_Pos_TBox(const arr: TBoxArray; const item: TBox; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, item, index); end;
function TArray_Pos_TRange(const arr: TRangeArray; const item: TRange; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, item, index); end;
function TArray_Pos_Integer_1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, items, index); end;
function TArray_Pos_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, items, index); end;
function TArray_Pos_String_1(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, items, index); end;
function TArray_Pos_Char_1(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, items, index); end;
function TArray_Pos_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, items, index); end;
function TArray_Pos_TPoint_1(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, items, index); end;
function TArray_Pos_TBox_1(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, items, index); end;
function TArray_Pos_TRange_1(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Pos(arr, items, index); end;

function TArray_Position_Integer(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, item, index); end;
function TArray_Position_Double(const arr: TDoubleArray; const item: Double; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, item, index); end;
function TArray_Position_String(const arr: TStringArray; const item: string; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, item, index); end;
function TArray_Position_Char(const arr: TCharArray; const item: Char; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, item, index); end;
function TArray_Position_Boolean(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, item, index); end;
function TArray_Position_TPoint(const arr: TPointArray; const item: TPoint; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, item, index); end;
function TArray_Position_TBox(const arr: TBoxArray; const item: TBox; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, item, index); end;
function TArray_Position_TRange(const arr: TRangeArray; const item: TRange; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, item, index); end;
function TArray_Position_Integer_1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, items, index); end;
function TArray_Position_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, items, index); end;
function TArray_Position_String_1(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, items, index); end;
function TArray_Position_Char_1(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, items, index); end;
function TArray_Position_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, items, index); end;
function TArray_Position_TPoint_1(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, items, index); end;
function TArray_Position_TBox_1(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, items, index); end;
function TArray_Position_TRange_1(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := TArray_Position(arr, items, index); end;

function TArray_Positions_Integer(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, index); end;
function TArray_Positions_Double(const arr: TDoubleArray; const item: Double; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, index); end;
function TArray_Positions_String(const arr: TStringArray; const item: string; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, index); end;
function TArray_Positions_Char(const arr: TCharArray; const item: Char; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, index); end;
function TArray_Positions_Boolean(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, index); end;
function TArray_Positions_TPoint(const arr: TPointArray; const item: TPoint; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, index); end;
function TArray_Positions_TBox(const arr: TBoxArray; const item: TBox; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, index); end;
function TArray_Positions_TRange(const arr: TRangeArray; const item: TRange; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, index); end;
function TArray_Positions_Integer_1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, index); end;
function TArray_Positions_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, index); end;
function TArray_Positions_String_1(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, index); end;
function TArray_Positions_Char_1(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, index); end;
function TArray_Positions_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, index); end;
function TArray_Positions_TPoint_1(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, index); end;
function TArray_Positions_TBox_1(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, index); end;
function TArray_Positions_TRange_1(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, index); end;

function TArray_PosLast_Integer(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, item, index); end;
function TArray_PosLast_Double(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, item, index); end;
function TArray_PosLast_String(const arr: TStringArray; const item: string; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, item, index); end;
function TArray_PosLast_Char(const arr: TCharArray; const item: Char; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, item, index); end;
function TArray_PosLast_Boolean(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, item, index); end;
function TArray_PosLast_TPoint(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, item, index); end;
function TArray_PosLast_TBox(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, item, index); end;
function TArray_PosLast_TRange(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, item, index); end;
function TArray_PosLast_Integer_1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, items, index); end;
function TArray_PosLast_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, items, index); end;
function TArray_PosLast_String_1(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, items, index); end;
function TArray_PosLast_Char_1(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, items, index); end;
function TArray_PosLast_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, items, index); end;
function TArray_PosLast_TPoint_1(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, items, index); end;
function TArray_PosLast_TBox_1(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, items, index); end;
function TArray_PosLast_TRange_1(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := TArray_PosLast(arr, items, index); end;

function TArray_PosLasts_Integer(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, index); end;
function TArray_PosLasts_Double(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, index); end;
function TArray_PosLasts_String(const arr: TStringArray; const item: string; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, index); end;
function TArray_PosLasts_Char(const arr: TCharArray; const item: Char; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, index); end;
function TArray_PosLasts_Boolean(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, index); end;
function TArray_PosLasts_TPoint(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, index); end;
function TArray_PosLasts_TBox(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, index); end;
function TArray_PosLasts_TRange(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, index); end;
function TArray_PosLasts_Integer_1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, index); end;
function TArray_PosLasts_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, index); end;
function TArray_PosLasts_String_1(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, index); end;
function TArray_PosLasts_Char_1(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, index); end;
function TArray_PosLasts_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, index); end;
function TArray_PosLasts_TPoint_1(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, index); end;
function TArray_PosLasts_TBox_1(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, index); end;
function TArray_PosLasts_TRange_1(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, index); end;

function TArray_Push_Integer(var arr: TIntegerArray; const item: Integer): Integer; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_Double(var arr: TDoubleArray; const item: Double): Integer; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_String(var arr: TStringArray; const item: string): Integer; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_Char(var arr: TCharArray; const item: Char): Integer; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_Boolean(var arr: TBooleanArray; const item: Boolean): Integer; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_TPoint(var arr: TPointArray; const item: TPoint): Integer; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_TBox(var arr: TBoxArray; const item: TBox): Integer; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_TRange(var arr: TRangeArray; const item: TRange): Integer; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_Integer_1(var arr: TIntegerArray; const items: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_Double_1(var arr: TDoubleArray; const items: TDoubleArray): Integer; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_String_1(var arr: TStringArray; const items: TStringArray): Integer; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_Char_1(var arr: TCharArray; const items: TCharArray): Integer; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_Boolean_1(var arr: TBooleanArray; const items: TBooleanArray): Integer; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_TPoint_1(var arr: TPointArray; const items: TPointArray): Integer; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_TBox_1(var arr: TBoxArray; const items: TBoxArray): Integer; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_TRange_1(var arr: TRangeArray; const items: TRangeArray): Integer; overload; cdecl; begin Result := TArray_Push(arr, items); end;

function TArray_Randomize_Integer(var arr: TIntegerArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_Double(var arr: TDoubleArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_String(var arr: TStringArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_Char(var arr: TCharArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_Boolean(var arr: TBooleanArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_TPoint(var arr: TPointArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_TBox(var arr: TBoxArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_TRange(var arr: TRangeArray; const shuffles: Integer = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;

function TArray_Remove_Integer(var arr: TIntegerArray; const item: Integer; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, index, all); end;
function TArray_Remove_Double(var arr: TDoubleArray; const item: Double; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, index, all); end;
function TArray_Remove_String(var arr: TStringArray; const item: string; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, index, all); end;
function TArray_Remove_Char(var arr: TCharArray; const item: Char; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, index, all); end;
function TArray_Remove_Boolean(var arr: TBooleanArray; const item: Boolean; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, index, all); end;
function TArray_Remove_TPoint(var arr: TPointArray; const item: TPoint; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, index, all); end;
function TArray_Remove_TBox(var arr: TBoxArray; const item: TBox; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, index, all); end;
function TArray_Remove_TRange(var arr: TRangeArray; const item: TRange; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, index, all); end;
function TArray_Remove_Integer_1(var arr: TIntegerArray; const item: Integer; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_Double_1(var arr: TDoubleArray; const item: Double; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_String_1(var arr: TStringArray; const item: string; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_Char_1(var arr: TCharArray; const item: Char; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_Boolean_1(var arr: TBooleanArray; const item: Boolean; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_TPoint_1(var arr: TPointArray; const item: TPoint; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_TBox_1(var arr: TBoxArray; const item: TBox; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_TRange_1(var arr: TRangeArray; const item: TRange; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_Integer_2(var arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, index, all); end;
function TArray_Remove_Double_2(var arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, index, all); end;
function TArray_Remove_String_2(var arr: TStringArray; const items: TStringArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, index, all); end;
function TArray_Remove_Char_2(var arr: TCharArray; const items: TCharArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, index, all); end;
function TArray_Remove_Boolean_2(var arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, index, all); end;
function TArray_Remove_TPoint_2(var arr: TPointArray; const items: TPointArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, index, all); end;
function TArray_Remove_TBox_2(var arr: TBoxArray; const items: TBoxArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, index, all); end;
function TArray_Remove_TRange_2(var arr: TRangeArray; const items: TRangeArray; const index: Integer = 0; const all: Boolean = True): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, index, all); end;
function TArray_Remove_Integer_3(var arr: TIntegerArray; const items: TIntegerArray; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_Double_3(var arr: TDoubleArray; const items: TDoubleArray; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_String_3(var arr: TStringArray; const items: TStringArray; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_Char_3(var arr: TCharArray; const items: TCharArray; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_Boolean_3(var arr: TBooleanArray; const items: TBooleanArray; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_TPoint_3(var arr: TPointArray; const items: TPointArray; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_TBox_3(var arr: TBoxArray; const items: TBoxArray; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_TRange_3(var arr: TRangeArray; const items: TRangeArray; const all: Boolean): Integer; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;

function TArray_Reverse_Integer(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_Double(var arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_String(var arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_Char(var arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_Boolean(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_TPoint(var arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_TBox(var arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_TRange(var arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;

function TArray_Reversed_Integer(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_Double(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_String(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_Char(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_Boolean(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_TPoint(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_TBox(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_TRange(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;

function TArray_Scan_Integer(const arr: TIntegerArray; const IDs: TRange; const item: Integer; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_Double(const arr: TDoubleArray; const IDs: TRange; const item: Double; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_String(const arr: TStringArray; const IDs: TRange; const item: string; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_Char(const arr: TCharArray; const IDs: TRange; const item: Char; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_Boolean(const arr: TBooleanArray; const IDs: TRange; const item: Boolean; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_TPoint(const arr: TPointArray; const IDs: TRange; const item: TPoint; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_TBox(const arr: TBoxArray; const IDs: TRange; const item: TBox; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_TRange(const arr: TRangeArray; const IDs: TRange; const item: TRange; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_Integer_1(const arr: TIntegerArray; const IDs: TIntegerArray; const item: Integer; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_Double_1(const arr: TDoubleArray; const IDs: TIntegerArray; const item: Double; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_String_1(const arr: TStringArray; const IDs: TIntegerArray; const item: string; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_Char_1(const arr: TCharArray; const IDs: TIntegerArray; const item: Char; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_Boolean_1(const arr: TBooleanArray; const IDs: TIntegerArray; const item: Boolean; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_TPoint_1(const arr: TPointArray; const IDs: TIntegerArray; const item: TPoint; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_TBox_1(const arr: TBoxArray; const IDs: TIntegerArray; const item: TBox; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_TRange_1(const arr: TRangeArray; const IDs: TIntegerArray; const item: TRange; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, item, limit); end;
function TArray_Scan_Integer_2(const arr: TIntegerArray; const IDs: TRange; const items: TIntegerArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_Double_2(const arr: TDoubleArray; const IDs: TRange; const items: TDoubleArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_String_2(const arr: TStringArray; const IDs: TRange; const items: TStringArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_Char_2(const arr: TCharArray; const IDs: TRange; const items: TCharArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_Boolean_2(const arr: TBooleanArray; const IDs: TRange; const items: TBooleanArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_TPoint_2(const arr: TPointArray; const IDs: TRange; const items: TPointArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_TBox_2(const arr: TBoxArray; const IDs: TRange; const items: TBoxArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_TRange_2(const arr: TRangeArray; const IDs: TRange; const items: TRangeArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_Integer_3(const arr: TIntegerArray; const IDs: TIntegerArray; const items: TIntegerArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_Double_3(const arr: TDoubleArray; const IDs: TIntegerArray; const items: TDoubleArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_String_3(const arr: TStringArray; const IDs: TIntegerArray; const items: TStringArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_Char_3(const arr: TCharArray; const IDs: TIntegerArray; const items: TCharArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_Boolean_3(const arr: TBooleanArray; const IDs: TIntegerArray; const items: TBooleanArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_TPoint_3(const arr: TPointArray; const IDs: TIntegerArray; const items: TPointArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_TBox_3(const arr: TBoxArray; const IDs: TIntegerArray; const items: TBoxArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;
function TArray_Scan_TRange_3(const arr: TRangeArray; const IDs: TIntegerArray; const items: TRangeArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Scan(arr, IDs, items, limit); end;

function TArray_Set_Integer(const arr: TIntegerArray; const IDs: TIntegerArray; const item: Integer): TIntegerArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_Double(const arr: TDoubleArray; const IDs: TIntegerArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_String(const arr: TStringArray; const IDs: TIntegerArray; const item: string): TStringArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_Char(const arr: TCharArray; const IDs: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_Boolean(const arr: TBooleanArray; const IDs: TIntegerArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_TPoint(const arr: TPointArray; const IDs: TIntegerArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_TBox(const arr: TBoxArray; const IDs: TIntegerArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_TRange(const arr: TRangeArray; const IDs: TIntegerArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_Integer_1(const arr: TIntegerArray; const IDs: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_Double_1(const arr: TDoubleArray; const IDs: TIntegerArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_String_1(const arr: TStringArray; const IDs: TIntegerArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_Char_1(const arr: TCharArray; const IDs: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_Boolean_1(const arr: TBooleanArray; const IDs: TIntegerArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_TPoint_1(const arr: TPointArray; const IDs: TIntegerArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_TBox_1(const arr: TBoxArray; const IDs: TIntegerArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_TRange_1(const arr: TRangeArray; const IDs: TIntegerArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_Integer_2(const arr: TIntegerArray; const index: Integer; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Set(arr, index, items); end;
function TArray_Set_Double_2(const arr: TDoubleArray; const index: Integer; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Set(arr, index, items); end;
function TArray_Set_String_2(const arr: TStringArray; const index: Integer; const items: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Set(arr, index, items); end;
function TArray_Set_Char_2(const arr: TCharArray; const index: Integer; const items: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Set(arr, index, items); end;
function TArray_Set_Boolean_2(const arr: TBooleanArray; const index: Integer; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Set(arr, index, items); end;
function TArray_Set_TPoint_2(const arr: TPointArray; const index: Integer; const items: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Set(arr, index, items); end;
function TArray_Set_TBox_2(const arr: TBoxArray; const index: Integer; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Set(arr, index, items); end;
function TArray_Set_TRange_2(const arr: TRangeArray; const index: Integer; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Set(arr, index, items); end;

function TArray_Shift_Integer(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_Double(var arr: TDoubleArray): Double; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_String(var arr: TStringArray): string; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_Char(var arr: TCharArray): Char; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_Boolean(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_TPoint(var arr: TPointArray): TPoint; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_TBox(var arr: TBoxArray): TBox; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_TRange(var arr: TRangeArray): TRange; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_Integer_1(var arr: TIntegerArray; const shift: Integer): TIntegerArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_Double_1(var arr: TDoubleArray; const shift: Integer): TDoubleArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_String_1(var arr: TStringArray; const shift: Integer): TStringArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_Char_1(var arr: TCharArray; const shift: Integer): TCharArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_Boolean_1(var arr: TBooleanArray; const shift: Integer): TBooleanArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_TPoint_1(var arr: TPointArray; const shift: Integer): TPointArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_TBox_1(var arr: TBoxArray; const shift: Integer): TBoxArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_TRange_1(var arr: TRangeArray; const shift: Integer): TRangeArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;

function TArray_Size_Integer(var arr: TIntegerArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_Double(var arr: TDoubleArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_String(var arr: TStringArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_Char(var arr: TCharArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_Boolean(var arr: TBooleanArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_TPoint(var arr: TPointArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_TBox(var arr: TBoxArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_TRange(var arr: TRangeArray; const size: Integer): Integer; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_Integer_1(var arr: TIntegerArray; const size: Integer; const null: Integer): Integer; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_Double_1(var arr: TDoubleArray; const size: Integer; const null: Double): Integer; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_String_1(var arr: TStringArray; const size: Integer; const null: string): Integer; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_Char_1(var arr: TCharArray; const size: Integer; const null: Char): Integer; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_Boolean_1(var arr: TBooleanArray; const size: Integer; const null: Boolean): Integer; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_TPoint_1(var arr: TPointArray; const size: Integer; const null: TPoint): Integer; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_TBox_1(var arr: TBoxArray; const size: Integer; const null: TBox): Integer; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_TRange_1(var arr: TRangeArray; const size: Integer; const null: TRange): Integer; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_Integer_2(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_Double_2(const arr: TDoubleArray): Integer; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_String_2(const arr: TStringArray): Integer; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_Char_2(const arr: TCharArray): Integer; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_Boolean_2(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_TPoint_2(const arr: TPointArray): Integer; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_TBox_2(const arr: TBoxArray): Integer; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_TRange_2(const arr: TRangeArray): Integer; overload; cdecl; begin Result := TArray_Size(arr); end;

function TArray_SizeBetween_Integer(const arr: TIntegerArray; const x, y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_Double(const arr: TDoubleArray; const x, y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_String(const arr: TStringArray; const x, y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_Char(const arr: TCharArray; const x, y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_Boolean(const arr: TBooleanArray; const x, y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_TPoint(const arr: TPointArray; const x, y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_TBox(const arr: TBoxArray; const x, y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_TRange(const arr: TRangeArray; const x, y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;

function TArray_SizeMax_Integer(const arr: TIntegerArray; const y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_Double(const arr: TDoubleArray; const y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_String(const arr: TStringArray; const y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_Char(const arr: TCharArray; const y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_Boolean(const arr: TBooleanArray; const y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_TPoint(const arr: TPointArray; const y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_TBox(const arr: TBoxArray; const y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_TRange(const arr: TRangeArray; const y: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;

function TArray_SizeMin_Integer(const arr: TIntegerArray; const x: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_Double(const arr: TDoubleArray; const x: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_String(const arr: TStringArray; const x: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_Char(const arr: TCharArray; const x: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_Boolean(const arr: TBooleanArray; const x: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_TPoint(const arr: TPointArray; const x: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_TBox(const arr: TBoxArray; const x: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_TRange(const arr: TRangeArray; const x: Integer): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;

function TArray_Swap_Integer(var a, b: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_Double(var a, b: TDoubleArray): Integer; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_String(var a, b: TStringArray): Integer; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_Char(var a, b: TCharArray): Integer; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_Boolean(var a, b: TBooleanArray): Integer; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_TPoint(var a, b: TPointArray): Integer; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_TBox(var a, b: TBoxArray): Integer; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_TRange(var a, b: TRangeArray): Integer; overload; cdecl; begin Result := TArray_Swap(a, b); end;

function TArray_Trade_Integer(var a, b: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_Double(var a, b: TDoubleArray): Integer; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_String(var a, b: TStringArray): Integer; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_Char(var a, b: TCharArray): Integer; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_Boolean(var a, b: TBooleanArray): Integer; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_TPoint(var a, b: TPointArray): Integer; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_TBox(var a, b: TBoxArray): Integer; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_TRange(var a, b: TRangeArray): Integer; overload; cdecl; begin Result := TArray_Trade(a, b); end;

function TArray_Undersize_Integer(const arr: TIntegerArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_Double(const arr: TDoubleArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_String(const arr: TStringArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_Char(const arr: TCharArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_Boolean(const arr: TBooleanArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_TPoint(const arr: TPointArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_TBox(const arr: TBoxArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_TRange(const arr: TRangeArray; const limit: Integer): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;

function TArray_Unique_Integer(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_Double(var arr: TDoubleArray): Integer; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_String(var arr: TStringArray): Integer; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_Char(var arr: TCharArray): Integer; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_Boolean(var arr: TBooleanArray): Integer; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_TPoint(var arr: TPointArray): Integer; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_TBox(var arr: TBoxArray): Integer; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_TRange(var arr: TRangeArray): Integer; overload; cdecl; begin Result := TArray_Unique(arr); end;

function TArray_Uniqued_Integer(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_Double(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_String(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_Char(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_Boolean(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_TPoint(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_TBox(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_TRange(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;

function TArray_Uniques_Integer(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_Double(const arr: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_String(const arr: TStringArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_Char(const arr: TCharArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_Boolean(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_TPoint(const arr: TPointArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_TBox(const arr: TBoxArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_TRange(const arr: TRangeArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;

function TArray_Unshift_Integer(var arr: TIntegerArray; const item: Integer): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_Double(var arr: TDoubleArray; const item: Double): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_String(var arr: TStringArray; const item: string): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_Char(var arr: TCharArray; const item: Char): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_Boolean(var arr: TBooleanArray; const item: Boolean): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_TPoint(var arr: TPointArray; const item: TPoint): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_TBox(var arr: TBoxArray; const item: TBox): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_TRange(var arr: TRangeArray; const item: TRange): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_Integer_1(var arr: TIntegerArray; const items: TIntegerArray): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_Double_1(var arr: TDoubleArray; const items: TDoubleArray): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_String_1(var arr: TStringArray; const items: TStringArray): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_Char_1(var arr: TCharArray; const items: TCharArray): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_Boolean_1(var arr: TBooleanArray; const items: TBooleanArray): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_TPoint_1(var arr: TPointArray; const items: TPointArray): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_TBox_1(var arr: TBoxArray; const items: TBoxArray): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_TRange_1(var arr: TRangeArray; const items: TRangeArray): Integer; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;

function T2DArray_Blank_Integer(const arr: T2DIntegerArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_Double(const arr: T2DDoubleArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_String(const arr: T2DStringArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_Char(const arr: T2DCharArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_Boolean(const arr: T2DBooleanArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_TPoint(const arr: T2DPointArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_TBox(const arr: T2DBoxArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_TRange(const arr: T2DRangeArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;

function T2DArray_Create_Integer(const size1D, size2D: Integer; const item: Integer): T2DIntegerArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_Double(const size1D, size2D: Integer; const item: Double): T2DDoubleArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_String(const size1D, size2D: Integer; const item: string): T2DStringArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_Char(const size1D, size2D: Integer; const item: Char): T2DCharArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_Boolean(const size1D, size2D: Integer; const item: Boolean): T2DBooleanArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_TPoint(const size1D, size2D: Integer; const item: TPoint): T2DPointArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_TBox(const size1D, size2D: Integer; const item: TBox): T2DBoxArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_TRange(const size1D, size2D: Integer; const item: TRange): T2DRangeArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;

function T2DArray_Empty_Integer(const arr: T2DIntegerArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_Double(const arr: T2DDoubleArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_String(const arr: T2DStringArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_Char(const arr: T2DCharArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_Boolean(const arr: T2DBooleanArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_TPoint(const arr: T2DPointArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_TBox(const arr: T2DBoxArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_TRange(const arr: T2DRangeArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;

function T2DArray_Length_Integer(const arr: T2DIntegerArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_Double(const arr: T2DDoubleArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_String(const arr: T2DStringArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_Char(const arr: T2DCharArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_Boolean(const arr: T2DBooleanArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_TPoint(const arr: T2DPointArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_TBox(const arr: T2DBoxArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_TRange(const arr: T2DRangeArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_Integer_1(const arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_Double_1(const arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_String_1(const arr: T2DStringArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_Char_1(const arr: T2DCharArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_Boolean_1(const arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_TPoint_1(const arr: T2DPointArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_TBox_1(const arr: T2DBoxArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_TRange_1(const arr: T2DRangeArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;

function T2DArray_Merge_Integer(const arr: T2DIntegerArray): TIntegerArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_Double(const arr: T2DDoubleArray): TDoubleArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_String(const arr: T2DStringArray): TStringArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_Char(const arr: T2DCharArray): TCharArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_Boolean(const arr: T2DBooleanArray): TBooleanArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_TPoint(const arr: T2DPointArray): TPointArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_TBox(const arr: T2DBoxArray): TBoxArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_TRange(const arr: T2DRangeArray): TRangeArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
