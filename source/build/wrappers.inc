function Integer_ClampMin(const item: Integer; const limit: Integer): Integer; cdecl; begin Result := item.ClampMin(limit); end; 
function Integer_ClampMax(const item: Integer; const limit: Integer): Integer; cdecl; begin Result := item.ClampMax(limit); end;
function Integer_Clamp1(const item: Integer; const minimum, maximum: Integer): Integer; overload; cdecl; begin Result := item.Clamp(minimum, maximum); end;
function Integer_Clamp2(const item: Integer; const range: TRange): Integer; overload; cdecl; begin Result := item.Clamp(range); end;
function Integer_BoundMin(const item: Integer; const limit: Integer): Integer; cdecl; begin Result := item.BoundMin(limit); end;
function Integer_BoundMax(const item: Integer; const limit: Integer): Integer; cdecl; begin Result := item.BoundMax(limit); end;
function Integer_Bound(const item: Integer; const minimum, maximum: Integer): Integer; overload; cdecl; begin Result := item.Bound(minimum, maximum); end;
function Integer_RestrictMin(const item: Integer; const limit: Integer): Integer; cdecl; begin Result := item.RestrictMin(limit); end;
function Integer_RestrictMax(const item: Integer; const limit: Integer): Integer; cdecl; begin Result := item.RestrictMax(limit); end;
function Integer_Restrict(const item: Integer; const minimum, maximum: Integer): Integer; overload; cdecl; begin Result := item.Restrict(minimum, maximum); end;
function Integer_LimitMin(const item: Integer; const limit: Integer): Integer; cdecl; begin Result := item.LimitMin(limit); end;
function Integer_LimitMax(const item: Integer; const limit: Integer): Integer; cdecl; begin Result := item.LimitMax(limit); end;
function Integer_Limit(const item: Integer; const minimum, maximum: Integer): Integer; overload; cdecl; begin Result := item.Limit(minimum, maximum); end;
function Integer_ConstraintMin(var item: Integer; const limit: Integer): Boolean; cdecl; begin Result := item.ConstraintMin(limit); end;
function Integer_ConstraintMax(var item: Integer; const limit: Integer): Boolean; cdecl; begin Result := item.ConstraintMax(limit); end;
function Integer_Constraint1(var item: Integer; const minimum, maximum: Integer): Boolean; overload; cdecl; begin Result := item.Constraint(minimum, maximum); end;
function Integer_Constraint2(var item: Integer; const range: TRange): Boolean; overload; cdecl; begin Result := item.Constraint(range); end;
function Integer_Parity(const x: Integer): Byte; cdecl; inline; begin Result := x.Parity; end;
function Integer_Even(const x: Integer): Boolean; cdecl; inline; begin Result := x.Even; end;
function Integer_IsEven(const x: Integer): Boolean; cdecl; inline; begin Result := x.IsEven; end;
function Integer_Odd(const x: Integer): Boolean; cdecl; inline; begin Result := x.Odd; end;
function Integer_IsOdd(const x: Integer): Boolean; cdecl; inline; begin Result := x.IsOdd; end;
function Integer_Increase(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Increase(N); end;
function Integer_Decrease(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Decrease(N); end;
function Integer_Increment(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Increment(N); end;
function Integer_Decrement(var x: Integer; const N: Integer = 1): Integer; cdecl; begin Result := x.Decrement(N); end;
function Integer_DigitCount(const x: Integer): Integer; cdecl; begin Result := x.DigitCount; end;
function Integer_Digitz(const x: Integer): TIntegerArray; cdecl; begin Result := x.Digitz; end;
function Integer_Digits(const x: Integer): TIntegerArray; cdecl; begin Result := x.Digits; end;
function Integer_NegA(const x: Integer): Integer; cdecl; inline; begin Result := x.NegA; end;
function Integer_Neg(const x: Integer): Integer; cdecl; inline; begin Result := x.Neg; end;
function Integer_Negative(const x: Integer): Boolean; cdecl; inline; begin Result := x.Negative; end;
function Integer_Positive(const x: Integer): Boolean; cdecl; inline; begin Result := x.Positive; end;
function Integer_Neutral(const x: Integer): Boolean; cdecl; inline; begin Result := x.Neutral; end;
function Integer_Compare(const x, T: Integer): Integer; cdecl; inline; begin Result := x.Compare(T); end;
function Integer_Distance(const x, T: Integer): Integer; cdecl; inline; begin Result := x.Distance(T); end;
function Integer_Difference(const x, T: Integer): Integer; cdecl; inline; begin Result := x.Difference(T); end;
function Integer_Opposite(const x: Integer): Integer; cdecl; inline; begin Result := x.Opposite; end;
function Integer_Sign(const x: Integer): Integer; cdecl; inline; begin Result := x.Sign; end;
function Integer_Shuffle(const x: Integer): Integer; cdecl; begin Result := x.Shuffle; end;
function Integer_Over(const x, target: Integer): Boolean; cdecl; inline; begin Result := x.Over(target); end;
function Integer_Under(const x, target: Integer): Boolean; cdecl; inline; begin Result := x.Under(target); end;
function Integer_Oversize(const x, limit: Integer): Boolean; cdecl; inline; begin Result := x.Oversize(limit); end;
function Integer_Undersize(const x, limit: Integer): Boolean; cdecl; inline; begin Result := x.Undersize(limit); end;
function Integer_BitMax(const item: Integer): Integer; cdecl; begin Result := item.BitMax; end;
function Integer_Unbitify1(const item: Integer): TBooleanArray; overload; cdecl; begin Result := item.Unbitify; end;
function Integer_Unbitify2(const item: Integer; const bCount: Integer): TBooleanArray; cdecl; begin Result := item.Unbitify(bCount); end;

function Int64_Prime(const x: Int64): Boolean; cdecl; inline; begin Result := x.Prime; end;
function Int64_IsPrime(const x: Int64): Boolean; cdecl; inline; begin Result := x.IsPrime; end;
function Int64_Parity(const x: Int64): Byte; cdecl; inline; begin Result := x.Parity; end;
function Int64_Even(const x: Int64): Boolean; cdecl; inline; begin Result := x.Even; end;
function Int64_Odd(const x: Int64): Boolean; cdecl; inline; begin Result := x.Odd; end;
function Int64_Increase(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Increase(N); end;
function Int64_Decrease(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Decrease(N); end;
function Int64_Increment(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Increment(N); end;
function Int64_Decrement(var x: Int64; const N: Int64 = 1): Int64; cdecl; begin Result := x.Decrement(N); end;
function Int64_DigitCount(const x: Int64): Integer; cdecl; begin Result := x.DigitCount; end;
function Int64_Digitz(const x: Int64): TIntegerArray; cdecl; begin Result := x.Digitz; end;
function Int64_Digits(const x: Int64): TIntegerArray; cdecl; begin Result := x.Digits; end;
function Int64_Compare(const x, T: Int64): Integer; cdecl; inline; begin Result := x.Compare(T); end;
function Int64_Distance(const x, T: Int64): Int64; cdecl; inline; begin Result := x.Distance(T); end;
function Int64_Difference(const x, T: Int64): Int64; cdecl; inline; begin Result := x.Difference(T); end;
function Int64_Opposite(const x: Int64): Int64; cdecl; inline; begin Result := x.Opposite; end;
function Int64_Sign(const x: Int64): Integer; cdecl; inline; begin Result := x.Sign; end;
function Int64_Shuffle(const x: Int64): Int64; cdecl; begin Result := x.Shuffle; end;
function Int64_Over(const x, target: Int64): Boolean; cdecl; inline; begin Result := x.Over(target); end;
function Int64_Under(const x, target: Int64): Boolean; cdecl; inline; begin Result := x.Under(target); end;
function Int64_Oversize(const x, limit: Int64): Boolean; cdecl; inline; begin Result := x.Oversize(limit); end;
function Int64_Undersize(const x, limit: Int64): Boolean; cdecl; inline; begin Result := x.Undersize(limit); end;

function Double_ClampMin(const item: Double; const limit: Double): Double; cdecl; begin Result := item.ClampMin(limit); end;
function Double_ClampMax(const item: Double; const limit: Double): Double; cdecl; begin Result := item.ClampMax(limit); end;
function Double_Clamp(const item: Double; const minimum, maximum: Double): Double; overload; cdecl; begin Result := item.Clamp(minimum, maximum); end;
function Double_BoundMin(const item: Double; const limit: Double): Double; cdecl; begin Result := item.BoundMin(limit); end;
function Double_BoundMax(const item: Double; const limit: Double): Double; cdecl; begin Result := item.BoundMax(limit); end;
function Double_Bound(const item: Double; const minimum, maximum: Double): Double; overload; cdecl; begin Result := item.Bound(minimum, maximum); end;
function Double_RestrictMin(const item: Double; const limit: Double): Double; cdecl; begin Result := item.RestrictMin(limit); end;
function Double_RestrictMax(const item: Double; const limit: Double): Double; cdecl; begin Result := item.RestrictMax(limit); end;
function Double_Restrict(const item: Double; const minimum, maximum: Double): Double; overload; cdecl; begin Result := item.Restrict(minimum, maximum); end;
function Double_LimitMin(const item: Double; const limit: Double): Double; cdecl; begin Result := item.LimitMin(limit); end;
function Double_LimitMax(const item: Double; const limit: Double): Double; cdecl; begin Result := item.LimitMax(limit); end;
function Double_Limit(const item: Double; const minimum, maximum: Double): Double; overload; cdecl; begin Result := item.Limit(minimum, maximum); end;
function Double_ConstraintMin(var item: Double; const limit: Double): Boolean; cdecl; begin Result := item.ConstraintMin(limit); end;
function Double_ConstraintMax(var item: Double; const limit: Double): Boolean; cdecl; begin Result := item.ConstraintMax(limit); end;
function Double_Constraint(var item: Double; const minimum, maximum: Double): Boolean; overload; cdecl; begin Result := item.Constraint(minimum, maximum); end;
function Double_Increase(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Increase(N); end;
function Double_Decrease(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Decrease(N); end;
function Double_Increment(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Increment(N); end;
function Double_Decrement(var x: Double; const N: Double = 1): Double; cdecl; begin Result := x.Decrement(N); end;
function Double_Digits(const x: Double): TIntegerArray; cdecl; begin Result := x.Digits; end;
function Double_NegA(const x: Double): Double; cdecl; inline; begin Result := x.NegA; end;
function Double_Neg(const x: Double): Double; cdecl; inline; begin Result := x.Neg; end;
function Double_Negative(const x: Double): Boolean; cdecl; inline; begin Result := x.Negative; end;
function Double_Positive(const x: Double): Boolean; cdecl; inline; begin Result := x.Positive; end;
function Double_Neutral(const x: Double): Boolean; cdecl; inline; begin Result := x.Neutral; end;
function Double_MinDecimal(const x: Double): Double; cdecl; begin Result := x.MinDecimal; end;
function Double_MaxDecimal(const x: Double): Double; cdecl; begin Result := x.MaxDecimal; end;
function Double_Accuracy(const x: Double; const a: Int32): Double; cdecl; begin Result := x.Accuracy(a); end;
function Double_Compare(const x, T: Double): Int32; cdecl; inline; begin Result := x.Compare(T); end; 
function Double_Distance(const x, T: Double): Double; cdecl; inline; begin Result := x.Distance(T); end;
function Double_Difference(const x, T: Double): Double; cdecl; inline; begin Result := x.Difference(T); end;
function Double_Opposite(const x: Double): Double; cdecl; inline; begin Result := x.Opposite; end;
function Double_Sign(const x: Double): Int32; cdecl; inline; begin Result := x.Sign; end;
function Double_FixDegrees(const x: Double): Double; cdecl; begin Result := x.FixDegrees; end;
function Double_Degrees(const x: Double): Double; cdecl; begin Result := x.Degrees; end;
function Double_FixRadians(const x: Double): Double; cdecl; begin Result := x.FixRadians; end;
function Double_Radians(const x: Double; const compass: Boolean = False): Double; cdecl; begin Result := x.Radians(compass); end;
function Double_Percent(const x, position: Double): Double; cdecl; inline; begin Result := x.Percent(position); end;
function Double_Percentage(const x, percent: Double): Double; cdecl; inline; begin Result := x.Percentage(percent); end;
function Double_Over(const x, target: Double): Boolean; cdecl; begin Result := x.Over(target); end;
function Double_Under(const x, target: Double): Boolean; cdecl; begin Result := x.Under(target); end;
function Double_Oversize(const x, limit: Double): Boolean; cdecl; begin Result := x.Oversize(limit); end;
function Double_Undersize(const x, limit: Double): Boolean; cdecl; begin Result := x.Undersize(limit); end;

function Boolean_ToString(const x: Boolean): string; cdecl; begin Result := x.ToString; end;
function Boolean_Binary(const x: Boolean): Char; cdecl; begin Result := x.Binary; end;
function Boolean_BinaryDigit(const x: Boolean): Integer; cdecl; begin Result := x.BinaryDigit; end;
function Boolean_Bit(const x: Boolean): Integer; cdecl; begin Result := x.Bit; end;
function Boolean_Bitify(const x: Boolean): Integer; cdecl; begin Result := x.Bitify; end;
function Boolean_ToInteger(const x: Boolean): Integer; cdecl; begin Result := x.ToInteger; end;
function Boolean_AsInteger(const x: Boolean): Integer; cdecl; begin Result := x.AsInteger; end;
function Boolean_Toggle(const x: Boolean): Boolean; cdecl; begin Result := x.Toggle; end;
function Boolean_Opposite(const x: Boolean): Boolean; cdecl; begin Result := x.Opposite; end;
function Boolean_Switch(var x: Boolean): Boolean; cdecl; begin Result := x.Switch; end;
function Boolean_Flip(var x: Boolean): Boolean; cdecl; begin Result := x.Flip; end;
function Boolean_Shuffle(var x: Boolean): Boolean; cdecl; begin Result := x.Shuffle; end;
function Boolean_Select1(const x: Boolean; const bTrue, bFalse: Integer): Integer; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select2(const x: Boolean; const bTrue, bFalse: Int64): Int64; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select3(const x: Boolean; const bTrue, bFalse: Double): Double; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select4(const x: Boolean; const bTrue, bFalse: string): string; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select5(const x: Boolean; const bTrue, bFalse: Char): Char; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select6(const x: Boolean; const bTrue, bFalse: Boolean): Boolean; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select7(const x: Boolean; const bTrue, bFalse: TPoint): TPoint; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select8(const x: Boolean; const bTrue, bFalse: TBox): TBox; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Select9(const x: Boolean; const bTrue, bFalse: TRange): TRange; overload; cdecl; begin Result := x.Select(bTrue, bFalse); end;
function Boolean_Evaluate1(const x: Boolean; const bTrue, bFalse: Integer): Integer; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate2(const x: Boolean; const bTrue, bFalse: Int64): Int64; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate3(const x: Boolean; const bTrue, bFalse: Double): Double; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate4(const x: Boolean; const bTrue, bFalse: string): string; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate5(const x: Boolean; const bTrue, bFalse: Char): Char; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate6(const x: Boolean; const bTrue, bFalse: Boolean): Boolean; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate7(const x: Boolean; const bTrue, bFalse: TPoint): TPoint; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate8(const x: Boolean; const bTrue, bFalse: TBox): TBox; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Evaluate9(const x: Boolean; const bTrue, bFalse: TRange): TRange; overload; cdecl; begin Result := x.Evaluate(bTrue, bFalse); end;
function Boolean_Enable(var x: Boolean): Boolean; cdecl; begin Result := x.Enable; end;
function Boolean_Disable(var x: Boolean): Boolean; cdecl; begin Result := x.Disable; end;
function Boolean_SetFalse(var x: Boolean): Integer; cdecl; begin Result := x.SetFalse; end;
function Boolean_SetTrue(var x: Boolean): Integer; cdecl; begin Result := x.SetTrue; end;
function Boolean_SwitchOn(var x: Boolean; const state: Boolean): Boolean; cdecl; begin Result := x.SwitchOn(state); end;
function Boolean_SwitchOff(var x: Boolean; const state: Boolean): Boolean; cdecl; begin Result := x.SwitchOff(state); end;

function Char_Str(const c: Char; const size: Integer = 1): string; cdecl; begin Result := c.Str(size); end;
function Char_ToStr(const c: Char; const size: Integer = 1): string; cdecl; begin Result := c.ToStr(size); end;
function Char_IsNumber(const c: Char): Boolean; cdecl; begin Result := c.IsNumber; end;
function Char_IsNumeric(const c: Char): Boolean; cdecl; begin Result := c.IsNumeric; end;
function Char_IsLower(const c: Char): Boolean; cdecl; begin Result := c.IsLower; end;
function Char_IsUpper(const c: Char): Boolean; cdecl; begin Result := c.IsUpper; end;
function Char_IsLowercase(const c: Char): Boolean; cdecl; begin Result := c.IsLowercase; end;
function Char_IsUppercase(const c: Char): Boolean; cdecl; begin Result := c.IsUppercase; end;
function Char_IsLetter(const c: Char): Boolean; cdecl; begin Result := c.IsLetter; end;
function Char_Swapcase(const c: Char): Char; cdecl; begin Result := c.Swapcase; end;
function Char_Upper(const c: Char): Char; cdecl; begin Result := c.Upper; end;
function Char_Lower(const c: Char): Char; cdecl; begin Result := c.Lower; end;

function String_Empty(const str: string): Boolean; cdecl; begin Result := str.Empty; end;
function String_Void(const str: string): Boolean; cdecl; begin Result := str.Void; end;
function String_Blank(const str: string): Boolean; cdecl; begin Result := str.Blank; end;
function String_Chars(const str: string): TCharArray; cdecl; begin Result := str.Chars; end;
function String_Charify(const str: string): TCharArray; cdecl; begin Result := str.Charify; end;
function String_Chop(const str: string): TCharArray; cdecl; begin Result := str.Chop; end;
function String_At(const str: string; const s: string; const index: Integer = 1): Boolean; cdecl; inline; begin Result := str.At(s, index); end;
function String_Get(const str: string; const index: Integer; const count: Integer): string; cdecl; inline; begin Result := str.Get(index, count); end;
function String_Pick(const str: string; const index: Integer; const count: Integer = 2147483647): string; cdecl; begin Result := str.Pick(index, count); end;
function String_Pos(const str: string; const s: string; const index: Integer = 1): Integer; cdecl; begin Result := str.Pos(s, index); end;
function String_Loc(const str: string; const s: string; const index: Integer = 2147483647): Integer; cdecl; begin Result := str.Loc(s, index); end;
function String_Location(const str: string; const s: string; const index: Integer = 2147483647): Integer; cdecl; begin Result := str.Location(s, index); end;
function String_Position(const str: string; const s: string; const index: Integer = 1): Integer; cdecl; begin Result := str.Position(s, index); end;
function String_Find(const str: string; const s: string; const index: Integer = 1): Integer; cdecl; begin Result := str.Find(s, index); end;
function String_Search(const str: string; const s: string; const index: Integer = 1): Integer; cdecl; begin Result := str.Search(s, index); end;
function String_Contains(const str: string; const s: string; const index: Integer = 1): Boolean; cdecl; begin Result := str.Contains(s, index); end;
function String_Includes(const str: string; const s: string; const index: Integer = 2147483647): Boolean; cdecl; begin Result := str.Includes(s, index); end;
function String_Between(const str: string; const s1, s2: string; const index: Integer = 1): string; cdecl; begin Result := str.Between(s1, s2, index); end;
function String_Count(const str: string; const s: string; const overlap: Boolean = True; const index: Integer = 1): Integer; cdecl; begin Result := str.Count(s, overlap, index); end;
function String_Amount(const str: string; const s: string; const overlap: Boolean = True; const index: Integer = 2147483647): Integer; cdecl; begin Result := str.Amount(s, overlap, index); end;
function String_FromLeft(const str: string; const count: Integer; const index: Integer = 1): string; cdecl; begin Result := str.FromLeft(count, index); end;
function String_FromRight(const str: string; const count: Integer; const index: Integer = 2147483647): string; cdecl; begin Result := str.FromRight(count, index); end;
function String_Explode1(const str: string): TCharArray; overload; cdecl; begin Result := str.Explode; end;
function String_Explode2(const str: string; const d: string; const limit: Integer = -1): TStringArray; overload; cdecl; begin Result := str.Explode(d, limit); end;
function String_Explode3(const str: string; const d: TStringArray; const limit: Integer = -1): TStringArray; overload; cdecl; begin Result := str.Explode(d, limit); end;
function String_Slice(const str: string; const a, b: Integer): string; cdecl; begin Result := str.Slice(a, b); end;
function String_Chunk(const str: string; const a, b: Integer): string; cdecl; begin Result := str.Chunk(a, b); end;
function String_Reverse(var str: string): Boolean; cdecl; begin Result := str.Reverse; end;
function String_Flip(const str: string): string; cdecl; begin Result := str.Flip; end;
function String_Reversed(const str: string): string; cdecl; begin Result := str.Reversed; end;
function String_StartsWith(const str: string; const s: string): Boolean; cdecl; begin Result := str.StartsWith(s); end;
function String_EndsWith(const str: string; const s: string): Boolean; cdecl; begin Result := str.EndsWith(s); end;
function String_StartWith(var str: string; const s: string; const index: Integer = 1): Boolean; cdecl; begin Result := str.StartWith(s, index); end;
function String_EndWith(var str: string; const s: string; const index: Integer = 2147483647): Boolean; cdecl; begin Result := str.EndWith(s, index); end;
function String_After1(const str: string; const s: string; const index: Integer = 1): string; overload; cdecl; begin Result := str.After(s, index); end;
function String_After2(const str: string; const index: Integer; const count: Integer = 2147483647): string; overload; cdecl; begin Result := str.After(index, count); end;
function String_Ahead1(const str: string; const s: string; const index: Integer = 2147483647): string; overload; cdecl; begin Result := str.Ahead(s, index); end;
function String_Ahead2(const str: string; const index: Integer; const count: Integer = 2147483647): string; overload; cdecl; begin Result := str.Ahead(index, count); end;
function String_Before1(const str: string; const s: string; const index: Integer = 1): string; overload; cdecl; begin Result := str.Before(s, index); end;
function String_Before2(const str: string; const index: Integer; const count: Integer = 2147483647): string; overload; cdecl; begin Result := str.Before(index, count); end;
function String_Behind1(const str: string; const s: string; const index: Integer = 2147483647): string; overload; cdecl; begin Result := str.Behind(s, index); end;
function String_Behind2(const str: string; const index: Integer; const count: Integer = 2147483647): string; overload; cdecl; begin Result := str.Behind(index, count); end;
function String_Center(const str: string; const size: Integer; const fill: Char = #32): string; cdecl; begin Result := str.Center(size, fill); end;
function String_Stuff(const str: string; const s: string; const iFrom, iCount: Integer): string; cdecl; begin Result := str.Stuff(s, iFrom, iCount); end;
function String_Duplicate(const str: string; const x: Integer = 2): string; cdecl; begin Result := str.Duplicate(x); end;
function String_Duplicated(const str: string; const x: Integer; const glue: string): string; cdecl; begin Result := str.Duplicated(x, glue); end;
function String_Compare(const str: string; const s: string): Integer; cdecl; inline; begin Result := str.Compare(s); end;
function String_Quotatation(const str: string): string; cdecl; begin Result := str.Quotatation; end;
function String_PregQuote(const str: string; const regex: string = '.\+*?[^]$(){}=!<>|:-'): string; cdecl; begin Result := str.PregQuote(regex); end;
function String_TrimLeft(const str: string; const t: Char = #32): string; cdecl; begin Result := str.TrimLeft(t); end;
function String_TrimRight(const str: string; const t: Char = #32): string; cdecl; begin Result := str.TrimRight(t); end;
function String_Trim(const str: string; const t: Char = #32): string; cdecl; begin Result := str.Trim(t); end;
function String_AsTRange(const str: string): TRange; cdecl; begin Result := str.AsTRange; end;
function String_IDs1(const str: string): TIntegerArray; overload; cdecl; begin Result := str.IDs; end;
function String_IDs2(const str: string; const ID: TIntegerArray): TCharArray; overload; cdecl; begin Result := str.IDs(ID); end;
function String_IDs3(const str: string; const ID: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := str.IDs(ID, item); end;
function String_IDs4(const str: string; const ID: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := str.IDs(ID, items); end; 
function String_Exch(var str: string; const aIndex, bIndex: Integer): Boolean; cdecl; begin Result := str.Exch(aIndex, bIndex); end;
function String_Exchange(var str: string; const aIndex, bIndex: Integer): Boolean; cdecl; begin Result := str.Exchange(aIndex, bIndex); end;
function String_ToTRange(const str: string; const glueRange: string = '..'; const openRange: Char = '['; const closeRange: Char = ']'): TRange; cdecl; begin Result := str.ToTRange(glueRange, openRange, closeRange); end;
function String_IsBinary(const str: string; const emptyTrue: Boolean = True): Boolean; cdecl; begin Result := str.IsBinary(emptyTrue); end;
function String_BoolifyBinary(const str: string): TBooleanArray; cdecl; begin Result := str.BoolifyBinary; end;
function String_MadeOf(const str: string; const allowed: TCharArray): Boolean; cdecl; begin Result := str.MadeOf(allowed); end;
function String_FreeOf(const str: string; const forbidden: TCharArray): Boolean; cdecl; begin Result := str.FreeOf(forbidden); end;
function String_BuiltWithout(const str: string; const forbidden: TCharArray): Boolean; cdecl; begin Result := str.BuiltWithout(forbidden); end;
function String_Consists(const str: string; const allowed: TCharArray): Boolean; cdecl; begin Result := str.Consists(allowed); end;
function String_Pure(const str: string; const allowed: TCharArray): Boolean; cdecl; begin Result := str.Pure(allowed); end;
function String_BuiltWith(const str: string; const blocks: TCharArray): Boolean; cdecl; begin Result := str.BuiltWith(blocks); end;
function String_Exists(const str: string): Boolean; cdecl; begin Result := str.Exists; end;

function TPoint_Create1(const X, Y: Integer): TPoint; overload; cdecl; var pt: TPoint; begin Result := pt.Create(X, Y); end;
function TPoint_Create2(const value: Integer): TPoint; overload; cdecl; var pt: TPoint; begin Result := pt.Create(value); end;
function TPoint_Create3: TPoint; overload; cdecl; var pt: TPoint; begin Result := pt.Create; end;
function TPoint_Construct(const pX, pY: Integer): TPoint; overload; cdecl; begin Result := TPoint.Construct(pX, pY); end;
function TPoint_Build(const X, Y: Integer): TPoint; cdecl; inline; var pt: TPoint; begin Result := pt.Build(X, Y); end;
function TPoint_Inside(const pt: TPoint; const bx: TBox): Boolean; cdecl; inline; begin Result := pt.Inside(bx); end;
function TPoint_InCircle(const pt, center: TPoint; const radius: Double): Boolean; cdecl; inline; begin Result := pt.InCircle(center, radius); end;
function TPoint_InEllipse(const pt, center: TPoint; const XRadius, YRadius: Double): Boolean; cdecl; inline; begin Result := pt.InEllipse(center, XRadius, YRadius); end;
function TPoint_Clamp(const pt: TPoint; const area: TBox): TPoint; cdecl; begin Result := pt.Clamp(area); end;
function TPoint_AngleDegrees(const pt, target: TPoint; const compass: Boolean = False): Double; cdecl; begin Result := pt.AngleDegrees(target); end;
function TPoint_AngleRadians(const pt, target: TPoint): Double; cdecl; begin Result := pt.AngleRadians(target); end;
function TPoint_DistEuclidean(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistEuclidean(target); end;
function TPoint_DistEuclidean2(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistEuclidean2(target); end;
function TPoint_DistSquaredEuclidean(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistSquaredEuclidean(target); end;
function TPoint_DistManhattan(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistManhattan(target); end;
function TPoint_DistChebyshev(const pt, target: TPoint): Double; cdecl; begin Result := pt.DistChebyshev(target); end;
function TPoint_Grid(const pt: TPoint; const rows, columns: Integer; const spaceVertical: Integer = 0; const spaceHorizontal: Integer = 0): TPointArray; cdecl; begin Result := pt.Grid(rows, columns, spaceVertical, spaceHorizontal); end;
function TPoint_Row(const pt: TPoint; const cells: Integer; const space: Integer = 0): TPointArray; cdecl; begin Result := pt.Row(cells, space); end;
function TPoint_Column(const pt: TPoint; const cells: Integer; const space: Integer = 0): TPointArray; cdecl; begin Result := pt.Column(cells, space); end;

function TBox_Create1(const minX, minY, maxX, maxY: Integer): TBox; overload; cdecl; begin Result.Create(minX, minY, maxX, maxY); end;
function TBox_Create2(const top, bottom: TPoint): TBox; overload; cdecl; begin Result.Create(top, bottom); end;
function TBox_Create3(const XValue, YValue: Integer): TBox; overload; cdecl; begin Result.Create(XValue, YValue); end;
function TBox_Create4(const target: TPoint): TBox; overload; cdecl; begin Result.Create(target); end;
function TBox_Create5(const value: Integer = 0): TBox; overload; cdecl; begin Result.Create(value); end; 
function TBox_Construct(const XS, YS, XE, YE: Integer): TBox; overload; cdecl; begin Result := TBox.Construct(XS, YS, XE, YE); end;
function TBox_Build1(const minX, minY, maxX, maxY: Integer): TBox; overload; cdecl; begin Result.Build(minX, minY, maxX, maxY); end;
function TBox_Build2(const top, bottom: TPoint): TBox; overload; cdecl; begin Result.Build(top, bottom); end;
function TBox_Build3(const valueX, valueY: Integer): TBox; overload; cdecl; begin Result.Build(valueX, valueY); end;
function TBox_Build4(const target: TPoint): TBox; overload; cdecl; begin Result.Build(target); end;
function TBox_Build5(const value: Integer = 0): TBox; overload; cdecl; begin Result.Build(value); end;
function TBox_Make1(const pt: TPoint; const radius: Integer = 0): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Make(pt, radius); end;
function TBox_Make2(const pt: TPoint; const wRadius, hRadius: Integer): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Make(pt, wRadius, hRadius); end;
function TBox_Form1(const pt: TPoint; const size: Integer = 1): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Form(pt, size); end;
function TBox_Form2(const pt: TPoint; const width, height: Integer): TBox; overload; cdecl; var bx: TBox; begin Result := bx.Form(pt, width, height); end;
function TBox_Frame1(const bx: TBox; var width, height: Integer): TBox; overload; cdecl; begin Result := bx.Frame(width, height); end;
function TBox_Frame2(const bx: TBox): TBox; overload; cdecl; begin Result := bx.Frame; end;
function TBox_Singular(const bx: TBox): Boolean; cdecl; begin Result := bx.Singular; end;
function TBox_IsPoint(const bx: TBox): Boolean; cdecl; begin Result := bx.IsPoint; end;
function TBox_IsHorizontalLine(const bx: TBox): Boolean; cdecl; begin Result := bx.IsHorizontalLine; end;
function TBox_IsVerticalLine(const bx: TBox): Boolean; cdecl; begin Result := bx.IsVerticalLine; end;
function TBox_IsLine(const bx: TBox): Boolean; cdecl; begin Result := bx.IsLine; end;
function TBox_Linear(const bx: TBox): Boolean; cdecl; begin Result := bx.Linear; end;
function TBox_Collapsed(const bx: TBox): Boolean; cdecl; begin Result := bx.Collapsed; end;
function TBox_Is2D(const bx: TBox): Boolean; cdecl; begin Result := bx.Is2D; end;
function TBox_Boxy(const bx: TBox): Boolean; cdecl; begin Result := bx.Boxy; end;
function TBox_Plural(const bx: TBox): Boolean; cdecl; begin Result := bx.Plural; end;
function TBox_Rectangular(const bx: TBox): Boolean; cdecl; begin Result := bx.Rectangular; end;
function TBox_Equilateral(const bx: TBox): Boolean; cdecl; begin Result := bx.Equilateral; end;
function TBox_Square(const bx: TBox): Boolean; cdecl; begin Result := bx.Square; end;
function TBox_Size1(const bx: TBox; var width, height: Integer): Integer; overload; cdecl; inline; begin Result := bx.Size(width, height); end;
function TBox_Size2(const bx: TBox): TPoint; overload; cdecl; begin Result := bx.Size; end;
function TBox_Area(const bx: TBox): Integer; cdecl; inline; begin Result := bx.Area; end;
function TBox_Perimeter(const bx: TBox): Integer; cdecl; inline; begin Result := bx.Perimeter; end;
function TBox_Perim(const bx: TBox): Integer; cdecl; inline; begin Result := bx.Perim; end;
function TBox_Circumference(const bx: TBox): Integer; cdecl; begin Result := bx.Circumference; end;
function TBox_Ratio(const bx: TBox): Double; cdecl; begin Result := bx.Ratio; end;
function TBox_Diagonal(const bx: TBox): Double; cdecl; begin Result := bx.Diagonal; end;
function TBox_Width1(const bx: TBox): Integer; overload; cdecl; begin Result := bx.Width; end;
function TBox_Width2(var bx: TBox; const w: Integer): Integer; overload; cdecl; begin Result := bx.Width(w); end;
function TBox_Height1(const bx: TBox): Integer; overload; cdecl; begin Result := bx.Height; end;
function TBox_Height2(var bx: TBox; const h: Integer): Integer; overload; cdecl; begin Result := bx.Height(h); end;
function TBox_Horizontal(const bx: TBox): TRange; overload; cdecl; begin Result := bx.Horizontal; end;
function TBox_Vertical(const bx: TBox): TRange; overload; cdecl; begin Result := bx.Vertical; end;
function TBox_Expand(const bx: TBox; const change: Integer = 1): TBox; cdecl; begin Result := bx.Expand(change); end;
function TBox_Shrink(const bx: TBox; const change: Integer = 1): TBox; cdecl; begin Result := bx.Shrink(change); end;
function TBox_Resize(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.Resize(change); end;
function TBox_ResizeVertically(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeVertically(change); end;
function TBox_ResizeHorizontally(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeHorizontally(change); end;
function TBox_ResizeTop(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeTop(change); end;
function TBox_ResizeBottom(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeBottom(change); end;
function TBox_ResizeLeft(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeLeft(change); end;
function TBox_ResizeRight(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeRight(change); end;
function TBox_ResizeTopLeft(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeTopLeft(change); end;
function TBox_ResizeTopRight(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeTopRight(change); end;
function TBox_ResizeBottomRight(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeBottomRight(change); end;
function TBox_ResizeBottomLeft(const bx: TBox; const change: Integer): TBox; cdecl; begin Result := bx.ResizeBottomLeft(change); end;
function TBox_Equal(const bx: TBox; const b: TBox): Boolean; cdecl; inline; begin Result := bx.Equal(b); end;
function TBox_Contains1(const bx: TBox; const pt: TPoint): Boolean; overload; cdecl; begin Result := bx.Contains(pt); end;
function TBox_Contains2(const bx: TBox; const b: TBox): Boolean; overload; cdecl; begin Result := bx.Contains(b); end;
function TBox_Inside1(const bx: TBox; const target: TBox): Boolean; overload; cdecl; begin Result := bx.Inside(target); end;
function TBox_Inside2(const bx: TBox; const targets: TBoxArray): Boolean; overload; cdecl; begin Result := bx.Inside(targets); end;
function TBox_Center(const bx: TBox): TPoint; cdecl; begin Result := bx.Center; end;
function TBox_Envelope(const bx: TBox; const b: TBox): TBox; cdecl; begin Result := bx.Envelope(b); end;
function TBox_Overlap(const bx: TBox; const b: TBox): Boolean; cdecl; inline; begin Result := bx.Overlap(b); end;
function TBox_Intersect1(const bx: TBox; const b: TBox): TBox; overload; cdecl; begin Result := b.Intersect(b); end;
function TBox_Intersect2(const bx: TBox; const b: TBox; var iArea: TBox): Boolean; overload; cdecl; begin Result := bx.Intersect(b, iArea); end;
function TBox_Valid(const bx: TBox): Boolean; cdecl; inline; begin Result := bx.Valid; end;
function TBox_Invalid(const bx: TBox): Boolean; cdecl; begin Result := bx.Invalid; end;
function TBox_Similar1(const bx: TBox; const b: TBox; const maxWDiff, maxHDiff: Integer): Boolean; overload; cdecl; begin Result := bx.Similar(b, maxWDiff, maxHDiff); end;
function TBox_Similar2(const bx: TBox; const b: TBox; const diff: Integer): Boolean; overload; cdecl; begin Result := bx.Similar(b, diff); end;
function TBox_Fix(var bx: TBox): Boolean; cdecl; begin Result := bx.Fix; end;
function TBox_Constraint(var bx: TBox; const area: TBox): Boolean; cdecl; begin Result := bx.Constraint(area); end;
function TBox_Clip(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.Clip(area); end;
function TBox_Restrict(var bx: TBox; const area: TBox): Boolean; cdecl; begin Result := bx.Restrict(area); end;
function TBox_Clamp(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.Clamp(area); end;
function TBox_Points(const bx: TBox): TPointArray; cdecl; begin Result := bx.Points; end;
function TBox_Pixels(const bx: TBox): TPointArray; cdecl; begin Result := bx.Pixels; end;
function TBox_TPA(const bx: TBox): TPointArray; cdecl; begin Result := bx.TPA; end;
function TBox_Contents(const bx: TBox): TPointArray; cdecl; begin Result := bx.Contents; end;
function TBox_Extract(const bx: TBox): TPointArray; cdecl; begin Result := bx.Extract; end;
function TBox_Enumerate(const bx: TBox): TPointArray; cdecl; begin Result := bx.Enumerate; end;
function TBox_Elements(const bx: TBox): TPointArray; cdecl; begin Result := bx.Elements; end;
function TBox_Border1(const bx: TBox): TPointArray; overload; cdecl; begin Result := bx.Border; end;
function TBox_Border2(const bx: TBox; const X, Y: Integer): Boolean; overload; cdecl; begin Result := bx.Border(X, Y); end;
function TBox_Border3(const bx: TBox; const pt: TPoint): Boolean; overload; cdecl; begin Result := bx.Border(pt); end;
function TBox_Edge1(const bx: TBox): TPointArray; overload; cdecl; begin Result := bx.Edge; end;
function TBox_Edge2(const bx: TBox; const X, Y: Integer): Boolean; overload; cdecl; begin Result := bx.Edge(X, Y); end;
function TBox_Edge3(const bx: TBox; const pt: TPoint): Boolean; overload; cdecl; begin Result := bx.Edge(pt); end;
function TBox_Outline1(const bx: TBox): TPointArray; overload; cdecl; begin Result := bx.Outline; end;
function TBox_Outline2(const bx: TBox; const X, Y: Integer): Boolean; overload; cdecl; begin Result := bx.Outline(X, Y); end;
function TBox_Outline3(const bx: TBox; const pt: TPoint): Boolean; overload; cdecl; begin Result := bx.Outline(pt); end;
function TBox_Contour(const bx: TBox): TPointArray; overload; cdecl; begin Result := bx.Contour; end;
function TBox_Spiral(const bx: TBox): TPointArray; cdecl; begin Result := bx.Spiral; end;
function TBox_Traverse(const bx: TBox): TPointArray; cdecl; begin Result := bx.Traverse; end;
function TBox_Rows(const bx: TBox): T2DPointArray; cdecl; begin Result := bx.Rows; end;
function TBox_Columns(const bx: TBox): T2DPointArray; cdecl; begin Result := bx.Columns; end;
function TBox_Rowwise(const bx: TBox): TPointArray; cdecl; begin Result := bx.Rowwise; end;
function TBox_Columnwise(const bx: TBox): TPointArray; cdecl; begin Result := bx.Columnwise; end;
function TBox_Grid(const bx: TBox; const rows, columns: Integer; const spaceVertical: Integer = 0; const spaceHorizontal: Integer = 0): TBoxArray; cdecl; begin Result := bx.Grid(rows, columns, spaceVertical, spaceHorizontal); end;
function TBox_Row(const bx: TBox; const cells: Integer; const space: Integer = 0): TBoxArray; cdecl; begin Result := bx.Row(cells, space); end;
function TBox_Column(const bx: TBox; const cells: Integer; const space: Integer = 0): TBoxArray; cdecl; begin Result := bx.Column(cells, space); end;
function TBox_CornerPoints(const bx: TBox): TPointArray; cdecl; begin Result := bx.CornerPoints; end;
function TBox_CornerPts(const bx: TBox): TPointArray; cdecl; begin Result := bx.CornerPts; end;
function TBox_Corners(const bx: TBox): TPointArray; cdecl; begin Result := bx.Corners; end;
function TBox_SimilarSize1(const bx: TBox; const b: TBox; const widthDifferency, heightDifferency: Integer): Boolean; overload; cdecl; begin Result := bx.SimilarSize(b, widthDifferency, heightDifferency); end;
function TBox_SimilarSize2(const bx: TBox; const b: TBox; const differency: Integer): Boolean; overload; cdecl; begin Result := bx.SimilarSize(b, differency); end;
function TBox_Centered(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.Centered(area); end;
function TBox_CenterVertically(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.CenterVertically(area); end;
function TBox_CenterHorizontally(const bx: TBox; const area: TBox): TBox; cdecl; begin Result := bx.CenterHorizontally(area); end;
function TBox_ExtendX(var bx: TBox; const xCoord: Integer): Boolean; cdecl; begin Result := bx.Extendx(xCoord); end;
function TBox_ExtendY(var bx: TBox; const yCoord: Integer): Boolean; cdecl; begin Result := bx.ExtendY(yCoord); end;
function TBox_Extend(var bx: TBox; const pt: TPoint): Boolean; cdecl; begin Result := bx.Extend(pt); end;
function TBox_UnionX(const bx: TBox; const xCoord: Integer): TBox; cdecl; begin Result := bx.Unionx(xCoord); end;
function TBox_UnionY(const bx: TBox; const yCoord: Integer): TBox; cdecl; begin Result := bx.UnionY(yCoord); end;
function TBox_Union1(const bx: TBox; const pt: TPoint): TBox; overload; cdecl; begin Result := bx.Union(pt); end;
function TBox_Union2(const bx: TBox; const b: TBox): TBox; overload; cdecl; begin Result := bx.Union(b); end;
function TBox_Disjoint(const bx: TBox; const target: TBox): Boolean; overload; cdecl; begin Result := bx.Disjoint(target); end;
function TBox_Lacks(const bx: TBox; const pt: TPoint): Boolean; overload; cdecl; begin Result := bx.Lacks(pt); end;
function TBox_Mixed(const bx: TBox; const mixings: Integer = 1): TPointArray; cdecl; begin Result := bx.Mixed(mixings); end;
function TBox_Shake(const bx: TBox; const shakes: Integer = 1): TPointArray; cdecl; begin Result := bx.Shake(shakes); end;
function TBox_Shuffle(const bx: TBox; const shuffles: Integer = 1): TPointArray; cdecl; begin Result := bx.Shuffle(shuffles); end;
function TBox_Any(const bx: TBox): TPoint; cdecl; begin Result := bx.Any; end;
function TBox_Some1(const bx: TBox): TPointArray; overload; cdecl; begin Result := bx.Some; end;
function TBox_Some2(const bx: TBox; const amount: Integer): TPointArray; overload; cdecl; begin Result := bx.Some(amount); end;

function TRange_Singular(const range: TRange): Boolean; cdecl; begin Result := range.Singular; end;
function TRange_Atomic(const range: TRange): Boolean; cdecl; begin Result := range.Atomic; end;
function TRange_Plural(const range: TRange): Boolean; cdecl; begin Result := range.Plural; end;
function TRange_Composite(const range: TRange): Boolean; cdecl; begin Result := range.Composite; end;
function TRange_Ascend(const range: TRange): TRange; cdecl; begin Result := range.Ascend; end;
function TRange_Ascending(const range: TRange): Boolean; cdecl; begin Result := range.Ascending; end;
function TRange_Descend(const range: TRange): TRange; cdecl; begin Result := range.Descend; end;
function TRange_Descending(const range: TRange): Boolean; cdecl; begin Result := range.Descending; end;
function TRange_Increasing(const range: TRange): Boolean; cdecl; begin Result := range.Increasing; end;
function TRange_Decreasing(const range: TRange): Boolean; cdecl; begin Result := range.Decreasing; end;
function TRange_Create1(const rStart, rStop: Integer): TRange; overload; cdecl; var range: TRange; begin Result := range.Create(rStart, rStop); end;
function TRange_Create2(const value: Integer): TRange; overload; cdecl; var range: TRange; begin Result := range.Create(value); end;
function TRange_Create3: TRange; overload; cdecl; var range: TRange; begin Result := range.Create; end;
function TRange_Construct(const rStart, rStop: Integer): TRange; overload; cdecl; begin Result := TRange.Construct(rStart, rStop); end;
function TRange_Build(const rStart: Integer = 0; const rStop: Integer = 0): Integer; cdecl; var range: TRange; begin Result := range.Build(rStart, rStop); end;
function TRange_Grab(const range: TRange): TRange; cdecl; begin Result := range.Grab; end;
function TRange_Count(const range: TRange): Integer; cdecl; begin Result := range.Count; end; 
function TRange_Area(const range: TRange): Integer; cdecl; begin Result := range.Area; end;
function TRange_Span(const range: TRange): Integer; cdecl; begin Result := range.Span; end;
function TRange_Size(const range: TRange): Integer; cdecl; begin Result := range.Size; end;
function TRange_Length(const range: TRange): Integer; cdecl; begin Result := range.Length; end;
function TRange_Delta(const range: TRange): Integer; cdecl; begin Result := range.Delta; end;
function TRange_Lowest(const range: TRange): Integer; cdecl; begin Result := range.Lowest; end;
function TRange_Minimum(const range: TRange): Integer; cdecl; begin Result := range.Minimum; end;
function TRange_Highest(const range: TRange): Integer; cdecl; begin Result := range.Highest; end;
function TRange_Maximum(const range: TRange): Integer; cdecl; begin Result := range.Maximum; end;
function TRange_Exceeds(const range: TRange; const maxElements: Integer): Boolean; cdecl; begin Result := range.Exceeds(maxElements); end;
function TRange_Insufficient(const range: TRange; const minElements: Integer): Boolean; cdecl; begin Result := range.Insufficient(minElements); end;
function TRange_Digits(const range: TRange): TIntegerArray; cdecl; begin Result := range.Digits; end;
function TRange_Ints(const range: TRange): TIntegerArray; cdecl; begin Result := range.Ints; end;
function TRange_Values(const range: TRange): TIntegerArray; cdecl; begin Result := range.Values; end;
function TRange_TIA(const range: TRange): TIntegerArray; cdecl; begin Result := range.TIA; end;
function TRange_Enumerate(const range: TRange): TIntegerArray; cdecl; begin Result := range.Enumerate; end;
function TRange_Enumerated(const range: TRange): TIntegerArray; cdecl; begin Result := range.Enumerated; end;
function TRange_Elements(const range: TRange): TIntegerArray; cdecl; begin Result := range.Elements; end;
function TRange_Numbers(const range: TRange): TIntegerArray; cdecl; begin Result := range.Numbers; end;
function TRange_Items(const range: TRange): TIntegerArray; cdecl; begin Result := range.Items; end;
function TRange_ToArray(const range: TRange): TIntegerArray; cdecl; begin Result := range.ToArray; end;
function TRange_Materialize(const range: TRange): TIntegerArray; cdecl; begin Result := range.Materialize; end;
function TRange_Mixed(const range: TRange; const mixings: Integer = 1): TIntegerArray; cdecl; begin Result := range.Mixed(mixings); end;
function TRange_Shake(const range: TRange; const shakes: Integer = 1): TIntegerArray; cdecl; begin Result := range.Shake(shakes); end;
function TRange_Shuffle(const range: TRange; const shuffles: Integer = 1): TIntegerArray; cdecl; begin Result := range.Shuffle(shuffles); end;
function TRange_Any(const range: TRange): Integer; cdecl; begin Result := range.Any; end;
function TRange_Some1(const range: TRange): TIntegerArray; cdecl; begin Result := range.Some; end;
function TRange_Some2(const range: TRange; const amount: Integer): TIntegerArray; cdecl; begin Result := range.Some(amount); end;
function TRange_Normalize(const range: TRange): TRange; cdecl; begin Result := range.Normalize; end;
function TRange_Overlapping(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Overlapping(b); end;
function TRange_Overlap(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Overlap(b); end;
function TRange_Intersect1(const range: TRange; const b: TRange): TRange; overload; cdecl; begin Result := range.Intersect(b); end;
function TRange_Intersect2(const range: TRange; const b: TRange; var iZone: TRange): Boolean; overload; cdecl; begin range.Intersect(b, iZone); end;
function TRange_Union1(const range: TRange; const b: TRange): TRange; overload; cdecl; begin Result := range.Union(b); end;
function TRange_Union2(const range: TRange; const val: Integer): TRange; overload; cdecl; begin Result := range.Union(val); end;
function TRange_Extend(var range: TRange; const val: Integer): Boolean; cdecl; begin Result := range.Extend(val); end;
function TRange_Shift(const range: TRange; const sDelta: Integer): TRange; cdecl; begin Result := range.Shift(sDelta); end;
function TRange_Contains1(const range: TRange; const x: Integer): Boolean; overload; cdecl; begin Result := range.Contains(x); end;
function TRange_Contains2(const range: TRange; const x: TRange): Boolean; overload; cdecl; begin Result := range.Contains(x); end;
function TRange_Above1(const range: TRange; const target: Integer): Boolean; overload; cdecl; begin Result := range.Above(target); end;
function TRange_Above2(const range: TRange; const target: TRange): Boolean; overload; cdecl; begin Result := range.Above(target); end;
function TRange_Below1(const range: TRange; const target: Integer): Boolean; overload; cdecl; begin Result := range.Below(target); end;
function TRange_Below2(const range: TRange; const target: TRange): Boolean; overload; cdecl; begin Result := range.Below(target); end;
function TRange_Reversed(const range: TRange): TRange; cdecl; begin Result := range.Reversed; end;
function TRange_Reverse(var range: TRange): Boolean; cdecl; begin Result := range.Reverse; end;
function TRange_Equals(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Equals(b); end;
function TRange_Differs(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Differs(b); end;
function TRange_Equal(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Equal(b); end;
function TRange_Differ(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Differ(b); end;
function TRange_Clamp(const range: TRange; const zone: TRange): TRange; cdecl; begin Result := range.Clamp(zone); end;
function TRange_ClampMax(const range: TRange; const maxValue: Integer): TRange; cdecl; begin Result := range.ClampMax(maxValue); end;
function TRange_ClampMin(const range: TRange; const minValue: Integer): TRange; cdecl; begin Result := range.ClampMin(minValue); end;
function TRange_Restrict(var range: TRange; const zone: TRange): Boolean; cdecl; begin Result := range.Restrict(zone); end;
function TRange_RestrictMin(var range: TRange; const minValue: Integer): Boolean; cdecl; begin Result := range.RestrictMin(minValue); end;
function TRange_RestrictMax(var range: Trange; const maxValue: Integer): Boolean; cdecl; begin Result := range.RestrictMax(maxValue); end;
function TRange_Clip(const range: TRange; const zone: TRange): TRange; cdecl; begin Result := range.Clip(zone); end;
function TRange_ClipMin(const range: TRange; const minValue: Integer): TRange; cdecl; begin Result := range.ClipMin(minValue); end;
function TRange_ClipMax(const range: TRange; const maxValue: Integer): TRange; cdecl; begin Result := range.ClipMax(maxValue); end;
function TRange_Distribute(const range: TRange; const parts: Integer): TRangeArray; cdecl; begin Result := range.Distribute(parts); end;
function TRange_Partition(const range: TRange; const size: Integer): TRangeArray; cdecl; begin Result := range.Partition(size); end;
function TRange_Divide(const range: TRange; const size: Integer): TRangeArray; cdecl; begin Result := range.Divide(size); end;
function TRange_Neighbor(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Neighbor(b); end;
function TRange_Neighbour(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Neighbour(b); end;
function TRange_Touch(const range: TRange; const b: TRange): Boolean; cdecl; begin Result := range.Touch(b); end;
function TRange_Touches(const range: TRange; const b: TRange; const maxTouch: Integer = 1; const minTouch: Integer = 1): Boolean; cdecl; begin Result := range.Touches(b, maxTouch, minTouch); end;
function TRange_Touching(const range: TRange; const b: TRange; const maxTouch: Integer = 1; const minTouch: Integer = 1): Boolean; cdecl; begin Result := range.Touching(b, maxTouch, minTouch); end;
function TRange_Distance(const range: TRange; const b: TRange): Integer; cdecl; begin Result := range.Distance(b); end;
function TRange_DistHausdorff(const range: TRange; const b: TRange): Integer; cdecl; begin Result := range.DistHausdorff(b); end;
function TRange_Digit(const range: TRange; const x: Integer): Boolean; cdecl; inline; begin Result := range.Digit(x); end;
function TRange_Value(const range: TRange; const x: Integer): Boolean; cdecl; inline; begin Result := range.Value(x); end;
function TRange_Item(const range: TRange; const x: Integer): Boolean; cdecl; inline; begin Result := range.Item(x); end;
function TRange_Middle(const range: TRange): Double; cdecl; begin Result := range.Middle; end;
function TRange_MidVal(const range: TRange): Double; cdecl; begin Result := range.MidVal; end;
function TRange_MidValue(const range: TRange): Double; cdecl; begin Result := range.MidValue; end;
function TRange_Average(const range: TRange): Double; cdecl; begin Result := range.Average; end;
function TRange_Center(const range: TRange): Integer; cdecl; begin Result := range.Center; end;
function TRange_Str(const range: TRange; const openRange: string = '['; const closeRange: string = ']'; const glueRange: string = '..'): string; cdecl; begin Result := range.Str(openRange, closeRange, glueRange); end;  
function TRange_ToStr(const range: TRange; const glueRange: string = '..'; const openRange: string = '['; const closeRange: string = ']'): string; cdecl; begin Result := range.ToStr(glueRange, openRange, closeRange); end;
function TRange_Stringify(const range: TRange; const openRange: string = '['; const glueRange: string = '..'; const closeRange: string = ']'): string; cdecl; begin Result := range.Stringify(openRange, glueRange, closeRange); end;
function TRange_Sum(const range: TRange): Int64; cdecl; begin Result := range.Sum; end;
function TRange_Summation(const range: TRange): Int64; cdecl; begin Result := range.Summation; end;
function TRange_Total(const range: TRange): Int64; cdecl; begin Result := range.Total; end;
function TRange_Extract(const range: TRange): TIntegerArray; overload; cdecl; begin Result := range.Extract; end;
function TRange_Lacks(const range: TRange; const x: Integer): Boolean; cdecl; inline; begin Result := range.Lacks(x); end;
function TRange_Outside(const range: TRange; const x: Integer): Boolean; cdecl; inline; begin Result := range.Outside(x); end;

function TSegment_Create1(const sA, sB: TPoint): TSegment; overload; cdecl; var sg: TSegment; begin Result := sg.Create(sA, sB); end;
function TSegment_Create2(const aX, aY, bX, bY: Integer): TSegment; overload; cdecl; var sg: TSegment; begin Result := sg.Create(aX, aY, bX, bY); end;
function TSegment_Construct1(const sA, sB: TPoint): TSegment; overload; cdecl; begin Result := TSegment.Construct(sA, sB); end;
function TSegment_Construct2(const aX, aY, bX, bY: Integer): TSegment; overload; cdecl; begin Result := TSegment.Construct(aX, aY, bX, bY); end;
function TSegment_Bounds(const sg: TSegment): TBox; cdecl; begin Result := sg.Bounds; end;
function TSegment_Boundaries(const sg: TSegment): TBox; cdecl; begin Result := sg.Boundaries; end;
function TSegment_Envelope(const sg: TSegment): TBox; cdecl; begin Result := sg.Envelope; end;
function TSegment_Points(const sg: TSegment): TPointArray; cdecl; begin Result := sg.Points; end;
function TSegment_Pixels(const sg: TSegment; const steps: Integer = 2147483647): TPointArray; cdecl; begin Result := sg.Pixels(steps); end;

function TCircle_Create1(const cCenter: TPoint; const cRadius: Integer): TCircle; overload; cdecl; var cr: TCircle; begin Result := cr.Create(cCenter, cRadius); end;
function TCircle_Create2(const centerX, centerY: Integer; const radius: Double): TCircle; overload; cdecl; var cr: TCircle; begin Result := cr.Create(centerX, centerY, radius); end;
function TCircle_Construct1(const cCenter: TPoint; const radius: Double): TCircle; overload; cdecl; begin Result := TCircle.Construct(cCenter, radius); end;
function TCircle_Construct2(const centerX, centerY: Integer; const radius: Double): TCircle; overload; cdecl; begin Result := TCircle.Construct(centerX, centerY, radius); end;
function TCircle_Contains(const ci: TCircle; const pt: TPoint): Boolean; cdecl; begin Result := ci.Contains(pt); end;
function TCircle_Item(const ci: TCircle; const pt: TPoint): Boolean; cdecl; begin Result := ci.Item(pt); end;
function TCircle_Pixel(const ci: TCircle; const pt: TPoint): Boolean; cdecl; begin Result := ci.Pixel(pt); end;
function TCircle_Bounds(const ci: TCircle): TBox; cdecl; begin Result := ci.Bounds; end;
function TCircle_Boundaries(const ci: TCircle): TBox; cdecl; begin Result := ci.Boundaries; end;
function TCircle_BoundingBox(const ci: TCircle): TBox; cdecl; begin Result := ci.BoundingBox; end;
function TCircle_Envelope(const ci: TCircle): TBox; cdecl; begin Result := ci.Envelope; end;
function TCircle_Points(const ci: TCircle): TPointArray; cdecl; begin Result := ci.Points; end;
function TCircle_TPA(const ci: TCircle): TPointArray; cdecl; begin Result := ci.TPA; end;
function TCircle_BorderPoints(const ci: TCircle; const count: Integer): TPointArray; cdecl; begin Result := ci.BorderPoints(count); end;
function TCircle_Border(const ci: TCircle): TPointArray; cdecl; begin Result := ci.Border; end;

function TIntegerArray_Bounds1(const arr: TIntegerArray): TRange; overload; cdecl; begin Result := arr.Bounds; end;
function TIntegerArray_Bounds2(const arr: TIntegerArray; var aSize: Integer): TRange; overload; cdecl; begin Result := arr.Bounds(aSize); end;
function TIntegerArray_BoundingRange(const arr: TIntegerArray): TRange; cdecl; begin Result := arr.BoundingRange; end;
function TIntegerArray_Boundaries(const arr: TIntegerArray): TRange; cdecl; begin Result := arr.Boundaries; end;
function TIntegerArray_Range(const arr: TIntegerArray): TRange; cdecl; begin Result := arr.Range; end;
function TIntegerArray_Ranged(const arr: TIntegerArray): TRange; cdecl; begin Result := arr.Ranged; end;
function TIntegerArray_MinMax(const arr: TIntegerArray): TRange; cdecl; begin Result := arr.MinMax; end;
function TIntegerArray_Region(const arr: TIntegerArray): TRange; overload; cdecl; begin Result := arr.Region; end;
function TIntegerArray_Extent(const arr: TIntegerArray): TRange; cdecl; begin Result := arr.Extent; end;
function TIntegerArray_Undupe(const arr: TIntegerArray): TIntegerArray; cdecl; begin Result := arr.Undupe; end;
function TIntegerArray_Unduped(const arr: TIntegerArray): TIntegerArray; cdecl; begin Result := arr.Unduped; end;
function TIntegerArray_Numberline(const arr: TIntegerArray): TIntegerArray; cdecl; begin Result := arr.Numberline; end;
function TIntegerArray_Sum(const arr: TIntegerArray): Int64; cdecl; begin Result := arr.Sum; end;
function TIntegerArray_Density(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Density; end;
function TIntegerArray_Mean(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Mean; end;
function TIntegerArray_Median(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Median; end;
function TIntegerArray_Middle(const arr: TIntegerArray): Double; cdecl; begin Result := arr.Middle; end;
function TIntegerArray_MostFrequent(const arr: TIntegerArray; const null: Integer = -2147483648): Integer; cdecl; begin Result := arr.MostFreq(null); end;
function TIntegerArray_LeastFrequent(const arr: TIntegerArray; const null: Integer = -2147483648): Integer; cdecl; begin Result := arr.LeastFreq(null); end;
function TIntegerArray_BubbleSort2(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BubbleSort2(aAscending); end;
function TIntegerArray_QuickSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.QuickSort(aAscending); end;
function TIntegerArray_QuickSort3W(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.QuickSort3W(aAscending); end;
function TIntegerArray_QSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.QSort(aAscending); end;
function TIntegerArray_CoctailSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.CoctailSort(aAscending); end;
function TIntegerArray_CoctailSort2(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.CoctailSort2(aAscending); end;
function TIntegerArray_CombSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.CombSort(aAscending); end;
function TIntegerArray_GnomeSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.GnomeSort(aAscending); end;
function TIntegerArray_GnomeSortOptimized(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.GnomeSortOptimized(aAscending); end;
function TIntegerArray_HeapSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.HeapSort(aAscending); end;
function TIntegerArray_InsertionSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.InsertionSort(aAscending); end;
function TIntegerArray_SelectionSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.SelectionSort(aAscending); end;
function TIntegerArray_SelectionSortBidirectional(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.SelectionSortBidirectional(aAscending); end;
function TIntegerArray_SelectionSortBidirectional2(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.SelectionSortBidirectional2(aAscending); end;
function TIntegerArray_PancakeSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.PancakeSort(aAscending); end;
function TIntegerArray_MergeSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.MergeSort(aAscending); end;
function TIntegerArray_MergeSortBU(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.MergeSortBU(aAscending); end;
function TIntegerArray_ShellSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.ShellSort(aAscending); end;
function TIntegerArray_RadixSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.RadixSort(aAscending); end;
function TIntegerArray_Split1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Split(minDiff, maxDiff); end;
function TIntegerArray_Split2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Split(diff); end;
function TIntegerArray_Sblit1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Sblit(minDiff, maxDiff); end;
function TIntegerArray_Sblit2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Sblit(diff); end;
function TIntegerArray_Groups(const arr: TIntegerArray; const aSorted: Boolean = False): T2DIntegerArray; overload; cdecl; begin Result := arr.Groups(aSorted); end;
function TIntegerArray_Group1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Group(minDiff, maxDiff); end;
function TIntegerArray_Group2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Group(diff); end;
function TIntegerArray_Groub1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Groub(minDiff, maxDiff); end;
function TIntegerArray_Groub2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Groub(diff); end;
function TIntegerArray_Clique1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Clique(minDiff, maxDiff); end;
function TIntegerArray_Clique2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Clique(diff); end;
function TIntegerArray_Knit1(const arr: TIntegerArray; const minDiff, maxDiff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Knit(minDiff, maxDiff); end;
function TIntegerArray_Knit2(const arr: TIntegerArray; const diff: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Knit(diff); end;
function TIntegerArray_Invert(const arr: TIntegerArray): TIntegerArray; cdecl; begin Result := arr.Invert; end;
function TIntegerArray_Inverted1(const arr: TIntegerArray; const arrBounds: TRange): TIntegerArray; overload; cdecl; begin Result := arr.Inverted(arrBounds); end;
function TIntegerArray_Inverted2(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Inverted; end;
function TIntegerArray_Inverse1(const arr: TIntegerArray; const arrBounds: TRange): TIntegerArray; overload; cdecl; begin Result := arr.Inverse(arrBounds); end;
function TIntegerArray_Inverse2(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Inverse; end;
function TIntegerArray_Mirror(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Mirror; end;
function TIntegerArray_MinVal(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.MinVal; end;
function TIntegerArray_MaxVal(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.MaxVal; end;
function TIntegerArray_Minimum1(const arr: TIntegerArray; var index: Integer): Integer; overload; cdecl; begin Result := arr.Minimum(index); end;
function TIntegerArray_Minimum2(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Minimum; end;
function TIntegerArray_Maximum1(const arr: TIntegerArray; var index: Integer): Integer; overload; cdecl; begin Result := arr.Maximum(index); end;
function TIntegerArray_Maximum2(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Maximum; end;
function TIntegerArray_Pure(const arr: TIntegerArray; const allowed: TIntegerArray): Boolean; cdecl; begin Result := arr.Pure(allowed); end;
function TIntegerArray_NoneOf(const arr: TIntegerArray; const forbidden: TIntegerArray): Boolean; cdecl; begin Result := arr.NoneOf(forbidden); end;
function TIntegerArray_AnyOf(const arr: TIntegerArray; const candidates: TIntegerArray): Boolean; cdecl; begin Result := arr.AnyOf(candidates); end;
function TIntegerArray_AllOf(const arr: TIntegerArray; const candidates: TIntegerArray): Boolean; cdecl; begin Result := arr.AllOf(candidates); end;
function TIntegerArray_Charify1(const arr: TIntegerArray): TCharArray; overload; cdecl; begin Result := arr.Charify; end;
function TIntegerArray_Charify2(const arr: TIntegerArray; var str: string): TCharArray; overload; cdecl; begin Result := arr.Charify(str); end;
function TIntegerArray_Stringify1(const arr: TIntegerArray): string; overload; cdecl; begin Result := arr.Stringify; end;
function TIntegerArray_Stringify2(const arr: TIntegerArray; var chars: TCharArray): string; overload; cdecl; begin Result := arr.Stringify(chars); end;
function TIntegerArray_Special(const arr: TIntegerArray): Boolean; cdecl; begin Result := arr.Special; end;
function TIntegerArray_ExtractEven(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.ExtractEven; end;
function TIntegerArray_FilterEven(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.FilterEven; end;
function TIntegerArray_ExtractOdd(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.ExtractOdd; end;
function TIntegerArray_FilterOdd(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.FilterOdd; end;
function TIntegerArray_Reinit(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Reinit; end;
function TIntegerArray_BSort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BSort(aAscending); end;
function TIntegerArray_BinarySort(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySort(aAscending); end;
function TIntegerArray_BinarySorted(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; cdecl; begin Result := arr.BinarySorted(aAscending); end;
function TIntegerArray_BinaryBoundL(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryBoundL(x, aAscending); end;
function TIntegerArray_BinaryBoundR(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryBoundR(x, aAscending); end;
function TIntegerArray_BinaryPosL(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryPosL(x, aAscending); end;
function TIntegerArray_BinaryPosR(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryPosR(x, aAscending); end;
function TIntegerArray_BinarySearch(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearch(x, aAscending); end;
function TIntegerArray_BinaryContains(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Boolean; cdecl; begin Result := arr.BinaryContains(x, aAscending); end;
function TIntegerArray_BinaryCount(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryCount(x, aAscending); end;
function TIntegerArray_BinaryLocate(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryLocate(x, aAscending); end;
function TIntegerArray_BinaryLocation(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryLocation(x, aAscending); end;
function TIntegerArray_BinaryAppend(var arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryAppend(x, aAscending); end;
function TIntegerArray_BinaryAdd(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): TIntegerArray; cdecl; begin Result := arr.BinaryAdd(x, aAscending); end;
function TIntegerArray_BinarySearchF(const arr: TIntegerArray; const x: TRange; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearchF(x, aAscending); end;
function TIntegerArray_BinarySearchL(const arr: TIntegerArray; const x: TRange; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearchL(x, aAscending); end;
function TIntegerArray_BinaryUnique(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryUnique(aAscending); end;
function TIntegerArray_BinaryUniqued(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; cdecl; begin Result := arr.BinaryUniqued(aAscending); end;
function TIntegerArray_BinaryUndupe(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; cdecl; begin Result := arr.BinaryUndupe(aAscending); end;
function TIntegerArray_BinaryGrow(var arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Boolean; cdecl; begin Result := arr.BinaryGrow(x, aAscending); end;
function TIntegerArray_BinaryShrink(var arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Boolean; cdecl; begin Result := arr.BinaryShrink(x, aAscending); end;
function TIntegerArray_BinaryLowerBound(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryLowerBound(x, aAscending); end;
function TIntegerArray_BinaryUpperBound(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryUpperBound(x, aAscending); end;
function TIntegerArray_BinaryRange1(const arr: TIntegerArray; const x: TRange; const aAscending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryRange(x, aAscending); end;
function TIntegerArray_BinaryRange2(const arr: TIntegerArray; const x: Integer; const aAscending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryRange(x, aAscending); end;

function TIA_Init(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := TIA.Init(arr); end;
function TIA_Unique(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := TIA.Unique(arr); end;
function TIA_Reverse(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TIA.Reverse(arr); end;
function TIA_Reversed(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TIA.Reversed(arr); end;
function TIA_Combine(const A, B: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TIA.Combine(A, B); end;

function ATIA_Merge(const arr: T2DIntegerArray): TIntegerArray; overload; cdecl; begin Result := ATIA.Merge(arr); end;

function TDoubleArray_BSort(var arr: TDoubleArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BSort(aAscending); end;
function TDoubleArray_BinarySort(var arr: TDoubleArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySort(aAscending); end;
function TDoubleArray_BinarySorted(const arr: TDoubleArray; const aAscending: Boolean = True): TDoubleArray; cdecl; begin Result := arr.BinarySorted(aAscending); end;
function TDoubleArray_BinaryBoundL(const arr: TDoubleArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryBoundL(x, aAscending); end;
function TDoubleArray_BinaryBoundR(const arr: TDoubleArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryBoundR(x, aAscending); end;
function TDoubleArray_BinaryPosL(const arr: TDoubleArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryPosL(x, aAscending); end;
function TDoubleArray_BinaryPosR(const arr: TDoubleArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryPosR(x, aAscending); end;
function TDoubleArray_BinarySearch(const arr: TDoubleArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearch(x, aAscending); end;
function TDoubleArray_BinaryContains(const arr: TDoubleArray; const x: Integer; const aAscending: Boolean = True): Boolean; cdecl; begin Result := arr.BinaryContains(x, aAscending); end;
function TDoubleArray_BinaryCount(const arr: TDoubleArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryCount(x, aAscending); end;
function TDoubleArray_BinaryLocate(const arr: TDoubleArray; const x: Integer; const aAscending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryLocate(x, aAscending); end;
function TDoubleArray_BinaryLocation(const arr: TDoubleArray; const x: Integer; const aAscending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryLocation(x, aAscending); end;
function TDoubleArray_BinaryAppend(var arr: TDoubleArray; const x: Integer; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryAppend(x, aAscending); end;
function TDoubleArray_BinaryAdd(const arr: TDoubleArray; const x: Integer; const aAscending: Boolean = True): TDoubleArray; cdecl; begin Result := arr.BinaryAdd(x, aAscending); end;
function TDoubleArray_BinarySearchF(const arr: TDoubleArray; const x: TRange; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearchF(x, aAscending); end;
function TDoubleArray_BinarySearchL(const arr: TDoubleArray; const x: TRange; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinarySearchL(x, aAscending); end;
function TDoubleArray_BinaryUnique(var arr: TDoubleArray; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryUnique(aAscending); end;
function TDoubleArray_BinaryUniqued(const arr: TDoubleArray; const aAscending: Boolean = True): TDoubleArray; cdecl; begin Result := arr.BinaryUniqued(aAscending); end;
function TDoubleArray_BinaryUndupe(const arr: TDoubleArray; const aAscending: Boolean = True): TDoubleArray; cdecl; begin Result := arr.BinaryUndupe(aAscending); end;
function TDoubleArray_BinaryGrow(var arr: TDoubleArray; const x: Double; const aAscending: Boolean = True): Boolean; cdecl; begin Result := arr.BinaryGrow(x, aAscending); end;
function TDoubleArray_BinaryShrink(var arr: TDoubleArray; const x: Double; const aAscending: Boolean = True): Boolean; cdecl; begin Result := arr.BinaryShrink(x, aAscending); end;
function TDoubleArray_BinaryLowerBound(const arr: TDoubleArray; const x: Double; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryLowerBound(x, aAscending); end;
function TDoubleArray_BinaryUpperBound(const arr: TDoubleArray; const x: Double; const aAscending: Boolean = True): Integer; cdecl; begin Result := arr.BinaryUpperBound(x, aAscending); end;
function TDoubleArray_BinaryRange1(const arr: TDoubleArray; const x: TRange; const aAscending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryRange(x, aAscending); end;
function TDoubleArray_BinaryRange2(const arr: TDoubleArray; const x: Double; const aAscending: Boolean = True): TRange; cdecl; begin Result := arr.BinaryRange(x, aAscending); end;
function TDoubleArray_Reinit(var arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Reinit; end;

function TStringArray_Span(const arr: TStringArray): Integer; cdecl; begin Result := arr.Span; end;
function TStringArray_Concat(const arr: TStringArray): string; cdecl; begin Result := arr.Concat; end;
function TStringArray_Concatenate(const arr: TStringArray): string; cdecl; begin Result := arr.Concatenate; end;
function TStringArray_Flatten(const arr: TStringArray): string; cdecl; begin Result := arr.Flatten; end;
function TStringArray_Glue(const arr: TStringArray): string; cdecl; begin Result := arr.Glue; end;

function TCharArray_Str(const arr: TCharArray): string; cdecl; begin Result := arr.Str; end;
function TCharArray_ToStr(const arr: TCharArray): string; cdecl; begin Result := arr.ToStr; end;
function TCharArray_Join1(const arr: TCharArray): string; overload; cdecl; begin Result := arr.Join; end;
function TCharArray_Join2(const arr: TCharArray; const glue: string): string; overload; cdecl; begin Result := arr.Join(glue); end;
function TCharArray_Stringify1(const arr: TCharArray): string; overload; cdecl; begin Result := arr.Stringify; end;
function TCharArray_Stringify2(const arr: TCharArray; const glue: string): string; overload; cdecl; begin Result := arr.Stringify(glue); end;
function TCharArray_Ordinals(const arr: TCharArray): TIntegerArray; cdecl; begin Result := arr.Ordinals; end;
function TCharArray_Unduped(const arr: TCharArray): TCharArray; cdecl; begin Result := arr.Unduped; end;
function TCharArray_TSA(const arr: TCharArray): TStringArray; cdecl; begin Result := arr.TSA; end;

function TBooleanArray_Select1(const arr: TBooleanArray; const sTrue, sFalse: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Select(sTrue, sFalse); end;
function TBooleanArray_Select2(const arr: TBooleanArray; const sTrue, sFalse: Double): TDoubleArray; overload; cdecl; begin Result := arr.Select(sTrue, sFalse); end;
function TBooleanArray_Select3(const arr: TBooleanArray; const sTrue, sFalse: string): TStringArray; overload; cdecl; begin Result := arr.Select(sTrue, sFalse); end;
function TBooleanArray_Select4(const arr: TBooleanArray; const sTrue, sFalse: Char): TCharArray; overload; cdecl; begin Result := arr.Select(sTrue, sFalse); end;
function TBooleanArray_Select5(const arr: TBooleanArray; const sTrue, sFalse: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Select(sTrue, sFalse); end;
function TBooleanArray_Select6(const arr: TBooleanArray; const sTrue, sFalse: TPoint): TPointArray; overload; cdecl; begin Result := arr.Select(sTrue, sFalse); end;
function TBooleanArray_Select7(const arr: TBooleanArray; const sTrue, sFalse: TBox): TBoxArray; overload; cdecl; begin Result := arr.Select(sTrue, sFalse); end;
function TBooleanArray_Select8(const arr: TBooleanArray; const sTrue, sFalse: TRange): TRangeArray; overload; cdecl; begin Result := arr.Select(sTrue, sFalse); end;
function TBooleanArray_Bits(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Bits; end;
function TBooleanArray_Bitify(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Bitify; end;
function TBooleanArray_ToBits(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.ToBits; end;
function TBooleanArray_Digits(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.Digits; end;
function TBooleanArray_Falsed(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Falsed; end;
function TBooleanArray_Falseless1(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Falseless; end;
function TBooleanArray_Falseless2(const arr: TBooleanArray; const maxFalse: Integer): Boolean; overload; cdecl; begin Result := arr.Falseless(maxFalse); end;
function TBooleanArray_Falseness(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Falseness; end;
function TBooleanArray_Falses(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.Falses; end;
function TBooleanArray_Falsesome1(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Falsesome; end;
function TBooleanArray_Falsesome2(const arr: TBooleanArray; const minFalse: Integer): Boolean; overload; cdecl; begin Result := arr.Falsesome(minFalse); end;
function TBooleanArray_Str1(const arr: TBooleanArray; const separator: string; const strTrue: string = 'True'; strFalse: string = 'False'): string; overload; cdecl; begin Result := arr.Str(separator, strTrue, strFalse); end;
function TBooleanArray_Str2(const arr: TBooleanArray): string; overload; cdecl; begin Result := arr.Str; end;
function TBooleanArray_Text1(const arr: TBooleanArray; const strTrue, strFalse, separator: string): string; overload; cdecl; begin Result := arr.Text(strTrue, strFalse, separator); end;
function TBooleanArray_Text2(const arr: TBooleanArray; const strTrue: string = 'True'; strFalse: string = 'False'): string; overload; cdecl; begin Result := arr.Text(strTrue, strFalse); end;
function TBooleanArray_TIA(const arr: TBooleanArray; const valTrue: Integer = 1; valFalse: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.TIA(valTrue, valFalse); end;
function TBooleanArray_Toggle(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Toggle; end;
function TBooleanArray_Trued(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Trued; end;
function TBooleanArray_Trueless1(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Trueless; end;
function TBooleanArray_Trueless2(const arr: TBooleanArray; const maxTrue: Integer): Boolean; overload; cdecl; begin Result := arr.Trueless(maxTrue); end;
function TBooleanArray_Trueness(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Trueness; end;
function TBooleanArray_Trues(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.Trues; end;
function TBooleanArray_Truesome1(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Truesome; end;
function TBooleanArray_Truesome2(const arr: TBooleanArray; const minTrue: Integer): Boolean; overload; cdecl; begin Result := arr.Truesome(minTrue); end;
function TBooleanArray_Opposite(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Opposite; end;
function TBooleanArray_BinaryStr(const arr: TBooleanArray): string; begin Result := arr.BinaryStr; end;
function TBooleanArray_BinaryDigits(const arr: TBooleanArray): TIntegerArray; begin Result := arr.BinaryDigits; end;
function TBooleanArray_Binary(const arr: TBooleanArray): string; begin Result := arr.Binary; end;
function TBooleanArray_Reinit(var arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Reinit; end;

function TPointArray_X1(const arr: TPointArray): TIntegerArray; cdecl; begin Result := X(arr); end;
function TPointArray_X2(const arr: TPointArray; const val: Integer): TIntegerArray; cdecl; begin Result := X(arr, val); end;
function TPointArray_X3(const arr: TPointArray; const vals: TIntegerArray): TIntegerArray; cdecl; begin Result := X(arr, vals); end;
function TPointArray_Y1(const arr: TPointArray): TIntegerArray; cdecl; begin Result := Y(arr); end;
function TPointArray_Y2(const arr: TPointArray; const val: Integer): TIntegerArray; cdecl; begin Result := Y(arr, val); end;
function TPointArray_Y3(const arr: TPointArray; const vals: TIntegerArray): TIntegerArray; cdecl; begin Result := Y(arr, vals); end;
function TPointArray_Bounds1(const arr: TPointArray): TBox; overload; cdecl; begin Result := arr.Bounds; end;
function TPointArray_Bounds2(const arr: TPointArray; var width, height: Integer): TBox; overload; cdecl; begin Result := arr.Bounds(width, height); end;
function TPointArray_BoundingBox(const arr: TPointArray): TBox; cdecl; begin Result := arr.BoundingBox; end;
function TPointArray_Boundaries(const arr: TPointArray): TBox; cdecl; begin Result := arr.Boundaries; end;
function TPointArray_Box(const arr: TPointArray): TBox; cdecl; begin Result := arr.Box; end;
function TPointArray_Boxed(const arr: TPointArray): TBox; cdecl; begin Result := arr.Boxed; end;
function TPointArray_MinMax(const arr: TPointArray): TBox; overload; cdecl; begin Result := arr.MinMax; end;
function TPointArray_Region(const arr: TPointArray): TBox; overload; cdecl; begin Result := arr.Region; end;
function TPointArray_Undupe(const arr: TPointArray): TPointArray; cdecl; begin Result := arr.Undupe; end;
function TPointArray_Unduped(const arr: TPointArray): TPointArray; cdecl; begin Result := arr.Unduped; end;
function TPointArray_Invert(const arr: TPointArray): TPointArray; cdecl; begin Result := arr.Invert; end;
function TPointArray_Inverted1(const arr: TPointArray; const arrBounds: TBox): TPointArray; overload; cdecl; begin Result := arr.Inverted(arrBounds); end;
function TPointArray_Inverted2(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Inverted; end;
function TPointArray_Inverse1(const arr: TPointArray; const arrBounds: TBox): TPointArray; overload; cdecl; begin Result := arr.Inverse(arrBounds); end;
function TPointArray_Inverse2(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Inverse; end;
function TPointArray_Edge(const arr: TPointArray; const scan8W: Boolean = False): TPointArray; cdecl; begin Result := arr.Edge(scan8W); end;
function TPointArray_FloodFill1(const arr: TPointArray; const start: TPoint; const area: TBox; const scan8W: Boolean = False): TPointArray; overload; cdecl; begin Result := arr.FloodFill(start, area, scan8W); end;
function TPointArray_FloodFill2(const arr: TPointArray; const start: TPoint; const scan8W: Boolean = False): TPointArray; overload; cdecl; begin Result := arr.FloodFill(start, scan8W); end;
function TPointArray_Xs(const arr: TPointArray): TIntegerArray; cdecl; begin Result := arr.Xs; end;
function TPointArray_Ys(const arr: TPointArray): TIntegerArray; cdecl; begin Result := arr.Ys; end;
function TPointArray_XValues(const arr: TPointArray): TIntegerArray; cdecl; begin Result := arr.XValues; end;
function TPointArray_YValues(const arr: TPointArray): TIntegerArray; cdecl; begin Result := arr.YValues; end;
function TPointArray_Horizontal(const arr: TPointArray): TRange; cdecl; begin Result := arr.Horizontal; end;
function TPointArray_Vertical(const arr: TPointArray): TRange; cdecl; begin Result := arr.Vertical; end;
function TPointArray_Unzip(const arr: TPointArray; var xArr, yArr: TIntegerArray): Integer; cdecl; begin Result := arr.Unzip(xArr, yArr); end;
function TPointArray_Zip(const xArr, yArr: TIntegerArray): TPointArray; cdecl; begin Result.Zip(xArr, yArr); end;
function TPointArray_Extent(const arr: TPointArray): TBox; overload; cdecl; begin Result := arr.Extent; end;
function TPointArray_Split1(const arr: TPointArray; const xRadius, yRadius: Double): T2DPointArray; overload; cdecl; begin Result := arr.Split(xRadius, yRadius); end;
function TPointArray_Split2(const arr: TPointArray; const radius: Double): T2DPointArray; overload; cdecl; begin Result := arr.Split(radius); end;
function TPointArray_Segment(const arr: TPointArray; const radius: Double): T2DPointArray; overload; cdecl; begin Result := arr.Segment(radius); end;
function TPointArray_Fragment(const arr: TPointArray; const radius: Double): T2DPointArray; overload; cdecl; begin Result := arr.Fragment(radius); end;
function TPointArray_Clusterize1(const arr: TPointArray; const radius: Double): T2DPointArray; overload; cdecl; begin Result := arr.Clusterize(radius); end;
function TPointArray_Clusterize2(const arr: TPointArray; const xRadius, yRadius: Double): T2DPointArray; overload; cdecl; begin Result := arr.Clusterize(xRadius, yRadius); end;
function TPointArray_XClassify(const arr: TPointArray; const pSorted: Boolean = False): T2DPointArray; overload; cdecl; begin Result := arr.XClassify(pSorted); end;
function TPointArray_YClassify(const arr: TPointArray; const pSorted: Boolean = False): T2DPointArray; overload; cdecl; begin Result := arr.YClassify(pSorted); end;
function TPointArray_Reinit(var arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Reinit; end;

function TBoxArray_X1_1(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := X1(arr); end;
function TBoxArray_X1_2(const arr: TBoxArray; const val: Integer): TIntegerArray; cdecl; begin Result := X1(arr, val); end;
function TBoxArray_X1_3(const arr: TBoxArray; const vals: TIntegerArray): TIntegerArray; cdecl; begin Result := X1(arr, vals); end;
function TBoxArray_Y1_1(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := Y1(arr); end;
function TBoxArray_Y1_2(const arr: TBoxArray; const val: Integer): TIntegerArray; cdecl; begin Result := Y1(arr, val); end;
function TBoxArray_Y1_3(const arr: TBoxArray; const vals: TIntegerArray): TIntegerArray; cdecl; begin Result := Y1(arr, vals); end;
function TBoxArray_X2_1(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := X2(arr); end;
function TBoxArray_X2_2(const arr: TBoxArray; const val: Integer): TIntegerArray; cdecl; begin Result := X2(arr, val); end;
function TBoxArray_X2_3(const arr: TBoxArray; const vals: TIntegerArray): TIntegerArray; cdecl; begin Result := X2(arr, vals); end;
function TBoxArray_Y2_1(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := Y2(arr); end;
function TBoxArray_Y2_2(const arr: TBoxArray; const val: Integer): TIntegerArray; cdecl; begin Result := Y2(arr, val); end;
function TBoxArray_Y2_3(const arr: TBoxArray; const vals: TIntegerArray): TIntegerArray; cdecl; begin Result := Y2(arr, vals); end;
function TBoxArray_X1s(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := arr.X1s; end;
function TBoxArray_Y1s(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := arr.Y1s; end;
function TBoxArray_X2s(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := arr.X2s; end;
function TBoxArray_Y2s(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := arr.Y2s; end;
function TBoxArray_X1Values(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := arr.X1Values; end;
function TBoxArray_Y1Values(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := arr.Y1Values; end;
function TBoxArray_X2Values(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := arr.X2Values; end;
function TBoxArray_Y2Values(const arr: TBoxArray): TIntegerArray; cdecl; begin Result := arr.Y2Values; end;
function TBoxArray_Unzip(const arr: TBoxArray; var x1Arr, y1Arr, x2Arr, y2Arr: TIntegerArray): Integer; cdecl; begin Result := arr.Unzip(x1Arr, y1Arr, x2Arr, y2Arr); end;
function TBoxArray_Zip(const x1Arr, y1Arr, x2Arr, y2Arr: TIntegerArray): TBoxArray; cdecl; begin Result.Zip(x1Arr, y1Arr, x2Arr, y2Arr); end;

function TRangeArray_Start1(const arr: TRangeArray): TIntegerArray; cdecl; begin Result := start(arr); end;
function TRangeArray_Start2(const arr: TRangeArray; const val: Integer): TIntegerArray; cdecl; begin Result := start(arr, val); end;
function TRangeArray_Start3(const arr: TRangeArray; const vals: TIntegerArray): TIntegerArray; cdecl; begin Result := start(arr, vals); end;
function TRangeArray_Stop1(const arr: TRangeArray): TIntegerArray; cdecl; begin Result := stop(arr); end;
function TRangeArray_Stop2(const arr: TRangeArray; const val: Integer): TIntegerArray; cdecl; begin Result := stop(arr, val); end;
function TRangeArray_Stop3(const arr: TRangeArray; const vals: TIntegerArray): TIntegerArray; cdecl; begin Result := stop(arr, vals); end;
function TRangeArray_Bounds(const arr: TRangeArray): TRange; cdecl; begin Result := arr.Bounds; end;
function TRangeArray_Normalized(const arr: TRangeArray): TRangeArray; cdecl; begin Result := arr.Normalized; end;
function TRangeArray_Range(const arr: TRangeArray): TRange; cdecl; begin Result := arr.Range; end;
function TRangeArray_Starting(const arr: TRangeArray): TIntegerArray; cdecl; begin Result := arr.Starting; end;
function TRangeArray_Stopping(const arr: TRangeArray): TIntegerArray; cdecl; begin Result := arr.Stopping; end;
function TRangeArray_TIA(const arr: TRangeArray): TIntegerArray; cdecl; begin Result := arr.TIA; end;
function TRangeArray_T2DIA(const arr: TRangeArray): T2DIntegerArray; cdecl; begin Result := arr.T2DIA; end;
function TRangeArray_Starts(const arr: TRangeArray): TIntegerArray; cdecl; begin Result := arr.Starts; end;
function TRangeArray_Stops(const arr: TRangeArray): TIntegerArray; cdecl; begin Result := arr.Stops; end;
function TRangeArray_StartValues(const arr: TRangeArray): TIntegerArray; cdecl; begin Result := arr.StartValues; end;
function TRangeArray_StopValues(const arr: TRangeArray): TIntegerArray; cdecl; begin Result := arr.StopValues; end;
function TRangeArray_Unzip(const arr: TRangeArray; var startArr, stopArr: TIntegerArray): Integer; cdecl; begin Result := arr.Unzip(startArr, stopArr); end;
function TRangeArray_Zip(const startArr, stopArr: TIntegerArray): TRangeArray; cdecl; begin Result.Zip(startArr, stopArr); end;
function TRangeArray_Gaps(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Gaps; end;

function TArray_Add1(const arr: TIntegerArray; const item: Integer; const duplicates: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add2(const arr: TDoubleArray; const item: Double; const duplicates: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add3(const arr: TStringArray; const item: string; const duplicates: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add4(const arr: TCharArray; const item: Char; const duplicates: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add5(const arr: TBooleanArray; const item: Boolean; const duplicates: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add6(const arr: TPointArray; const item: TPoint; const duplicates: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add7(const arr: TBoxArray; const item: TBox; const duplicates: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add8(const arr: TRangeArray; const item: TRange; const duplicates: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Add(item, duplicates); end;
function TArray_Add9(const arr: TIntegerArray; const items: TIntegerArray; const duplicates: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add10(const arr: TDoubleArray; const items: TDoubleArray; const duplicates: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add11(const arr: TStringArray; const items: TStringArray; const duplicates: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add12(const arr: TCharArray; const items: TCharArray; const duplicates: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add13(const arr: TBooleanArray; const items: TBooleanArray; const duplicates: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add14(const arr: TPointArray; const items: TPointArray; const duplicates: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add15(const arr: TBoxArray; const items: TBoxArray; const duplicates: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;
function TArray_Add16(const arr: TRangeArray; const items: TRangeArray; const duplicates: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Add(items, duplicates); end;

function TArray_AllEqual1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;
function TArray_AllEqual8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.AllEqual; end;

function TArray_AllSame1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;
function TArray_AllSame8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.AllSame; end;

function TArray_AllUnique1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;
function TArray_AllUnique8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.AllUnique; end;

function TArray_Any1(const arr: TIntegerArray; const null: Integer): Integer; overload; cdecl; begin Result := arr.Any(null); end;
function TArray_Any2(const arr: TDoubleArray; const null: Double): Double; overload; cdecl; begin Result := arr.Any(null); end;
function TArray_Any3(const arr: TStringArray; const null: string): string; overload; cdecl; begin Result := arr.Any(null); end;
function TArray_Any4(const arr: TCharArray; const null: Char): Char; overload; cdecl; begin Result := arr.Any(null); end;
function TArray_Any5(const arr: TBooleanArray; const null: Boolean): Boolean; overload; cdecl; begin Result := arr.Any(null); end;
function TArray_Any6(const arr: TPointArray; const null: TPoint): TPoint; overload; cdecl; begin Result := arr.Any(null); end;
function TArray_Any7(const arr: TBoxArray; const null: TBox): TBox; overload; cdecl; begin Result := arr.Any(null); end;
function TArray_Any8(const arr: TRangeArray; const null: TRange): TRange; overload; cdecl; begin Result := arr.Any(null); end;
function TArray_Any9(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Any; end;
function TArray_Any10(const arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.Any; end;
function TArray_Any11(const arr: TStringArray): string; overload; cdecl; begin Result := arr.Any; end;
function TArray_Any12(const arr: TCharArray): Char; overload; cdecl; begin Result := arr.Any; end;
function TArray_Any13(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Any; end;
function TArray_Any14(const arr: TPointArray): TPoint; overload; cdecl; begin Result := arr.Any; end;
function TArray_Any15(const arr: TBoxArray): TBox; overload; cdecl; begin Result := arr.Any; end;
function TArray_Any16(const arr: TRangeArray): TRange; overload; cdecl; begin Result := arr.Any; end;

function TArray_Append1(const arr: TIntegerArray; const item: Integer; const duplicates: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append2(const arr: TDoubleArray; const item: Double; const duplicates: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append3(const arr: TStringArray; const item: string; const duplicates: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append4(const arr: TCharArray; const item: Char; const duplicates: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append5(const arr: TBooleanArray; const item: Boolean; const duplicates: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append6(const arr: TPointArray; const item: TPoint; const duplicates: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append7(const arr: TBoxArray; const item: TBox; const duplicates: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append8(const arr: TRangeArray; const item: TRange; const duplicates: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Append(item, duplicates); end;
function TArray_Append9(const arr: TIntegerArray; const items: TIntegerArray; const duplicates: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append10(const arr: TDoubleArray; const items: TDoubleArray; const duplicates: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append11(const arr: TStringArray; const items: TStringArray; const duplicates: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append12(const arr: TCharArray; const items: TCharArray; const duplicates: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append13(const arr: TBooleanArray; const items: TBooleanArray; const duplicates: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append14(const arr: TPointArray; const items: TPointArray; const duplicates: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append15(const arr: TBoxArray; const items: TBoxArray; const duplicates: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Append(items, duplicates); end;
function TArray_Append16(const arr: TRangeArray; const items: TRangeArray; const duplicates: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Append(items, duplicates); end;

function TArray_Backwards1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Backwards; end;
function TArray_Backwards2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Backwards; end;
function TArray_Backwards3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Backwards; end;
function TArray_Backwards4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Backwards; end;
function TArray_Backwards5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Backwards; end;
function TArray_Backwards6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Backwards; end;
function TArray_Backwards7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Backwards; end;
function TArray_Backwards8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Backwards; end;

function TArray_Blend1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Blend(items, index); end;
function TArray_Blend2(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Blend(items, index); end;
function TArray_Blend3(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Blend(items, index); end;
function TArray_Blend4(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Blend(items, index); end;
function TArray_Blend5(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Blend(items, index); end;
function TArray_Blend6(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Blend(items, index); end;
function TArray_Blend7(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Blend(items, index); end;
function TArray_Blend8(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Blend(items, index); end;

function TArray_Blit1(var arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Blit(items, index); end;
function TArray_Blit2(var arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Blit(items, index); end;
function TArray_Blit3(var arr: TStringArray; const items: TStringArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Blit(items, index); end;
function TArray_Blit4(var arr: TCharArray; const items: TCharArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Blit(items, index); end;
function TArray_Blit5(var arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Blit(items, index); end;
function TArray_Blit6(var arr: TPointArray; const items: TPointArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Blit(items, index); end;
function TArray_Blit7(var arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Blit(items, index); end;
function TArray_Blit8(var arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Blit(items, index); end;

function TArray_Build1(const item: Integer; const aSize: Integer = 1): TIntegerArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build2(const item: Double; const aSize: Integer = 1): TDoubleArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build3(const item: string; const aSize: Integer = 1): TStringArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build4(const item: Char; const aSize: Integer = 1): TCharArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build5(const item: Boolean; const aSize: Integer = 1): TBooleanArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build6(const item: TPoint; const aSize: Integer = 1): TPointArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build7(const item: TBox; const aSize: Integer = 1): TBoxArray; overload; cdecl; begin Result.Build(item, aSize); end;
function TArray_Build8(const item: TRange; const aSize: Integer = 1): TRangeArray; overload; cdecl; begin Result.Build(item, aSize); end;

function TArray_BuiltWith1(const arr, blocks: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(blocks); end;
function TArray_BuiltWith2(const arr, blocks: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(blocks); end;
function TArray_BuiltWith3(const arr, blocks: TStringArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(blocks); end;
function TArray_BuiltWith4(const arr, blocks: TCharArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(blocks); end;
function TArray_BuiltWith5(const arr, blocks: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(blocks); end;
function TArray_BuiltWith6(const arr, blocks: TPointArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(blocks); end;
function TArray_BuiltWith7(const arr, blocks: TBoxArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(blocks); end;
function TArray_BuiltWith8(const arr, blocks: TRangeArray): Boolean; overload; cdecl; begin Result := arr.BuiltWith(blocks); end;

function TArray_MadeOf1(const arr, allowed: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.MadeOf(allowed); end;
function TArray_MadeOf2(const arr, allowed: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.MadeOf(allowed); end;
function TArray_MadeOf3(const arr, allowed: TStringArray): Boolean; overload; cdecl; begin Result := arr.MadeOf(allowed); end;
function TArray_MadeOf4(const arr, allowed: TCharArray): Boolean; overload; cdecl; begin Result := arr.MadeOf(allowed); end;
function TArray_MadeOf5(const arr, allowed: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.MadeOf(allowed); end;
function TArray_MadeOf6(const arr, allowed: TPointArray): Boolean; overload; cdecl; begin Result := arr.MadeOf(allowed); end;
function TArray_MadeOf7(const arr, allowed: TBoxArray): Boolean; overload; cdecl; begin Result := arr.MadeOf(allowed); end;
function TArray_MadeOf8(const arr, allowed: TRangeArray): Boolean; overload; cdecl; begin Result := arr.MadeOf(allowed); end;

function TArray_FreeOf1(const arr, forbidden: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.FreeOf(forbidden); end;
function TArray_FreeOf2(const arr, forbidden: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.FreeOf(forbidden); end;
function TArray_FreeOf3(const arr, forbidden: TStringArray): Boolean; overload; cdecl; begin Result := arr.FreeOf(forbidden); end;
function TArray_FreeOf4(const arr, forbidden: TCharArray): Boolean; overload; cdecl; begin Result := arr.FreeOf(forbidden); end;
function TArray_FreeOf5(const arr, forbidden: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.FreeOf(forbidden); end;
function TArray_FreeOf6(const arr, forbidden: TPointArray): Boolean; overload; cdecl; begin Result := arr.FreeOf(forbidden); end;
function TArray_FreeOf7(const arr, forbidden: TBoxArray): Boolean; overload; cdecl; begin Result := arr.FreeOf(forbidden); end;
function TArray_FreeOf8(const arr, forbidden: TRangeArray): Boolean; overload; cdecl; begin Result := arr.FreeOf(forbidden); end;

function TArray_BuiltWithout1(const arr, forbidden: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout2(const arr, forbidden: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout3(const arr, forbidden: TStringArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout4(const arr, forbidden: TCharArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout5(const arr, forbidden: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout6(const arr, forbidden: TPointArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout7(const arr, forbidden: TBoxArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;
function TArray_BuiltWithout8(const arr, forbidden: TRangeArray): Boolean; overload; cdecl; begin Result := arr.BuiltWithout(forbidden); end;

function TArray_Classes1(const arr: TIntegerArray): T2DIntegerArray; overload; cdecl; begin Result := arr.Classes; end;
function TArray_Classes2(const arr: TDoubleArray): T2DDoubleArray; overload; cdecl; begin Result := arr.Classes; end;
function TArray_Classes3(const arr: TStringArray): T2DStringArray; overload; cdecl; begin Result := arr.Classes; end;
function TArray_Classes4(const arr: TCharArray): T2DCharArray; overload; cdecl; begin Result := arr.Classes; end;
function TArray_Classes5(const arr: TBooleanArray): T2DBooleanArray; overload; cdecl; begin Result := arr.Classes; end;
function TArray_Classes6(const arr: TPointArray): T2DPointArray; overload; cdecl; begin Result := arr.Classes; end;
function TArray_Classes7(const arr: TBoxArray): T2DBoxArray; overload; cdecl; begin Result := arr.Classes; end;
function TArray_Classes8(const arr: TRangeArray): T2DRangeArray; overload; cdecl; begin Result := arr.Classes; end;
function TArray_Classes9(const arr: TIntegerArray; const weight: TIntegerArray): T2DIntegerArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes10(const arr: TDoubleArray; const weight: TIntegerArray): T2DDoubleArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes11(const arr: TStringArray; const weight: TIntegerArray): T2DStringArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes12(const arr: TCharArray; const weight: TIntegerArray): T2DCharArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes13(const arr: TBooleanArray; const weight: TIntegerArray): T2DBooleanArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes14(const arr: TPointArray; const weight: TIntegerArray): T2DPointArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes15(const arr: TBoxArray; const weight: TIntegerArray): T2DBoxArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes16(const arr: TRangeArray; const weight: TIntegerArray): T2DRangeArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes17(const arr: TIntegerArray; const weight: TDoubleArray): T2DIntegerArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes18(const arr: TDoubleArray; const weight: TDoubleArray): T2DDoubleArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes19(const arr: TStringArray; const weight: TDoubleArray): T2DStringArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes20(const arr: TCharArray; const weight: TDoubleArray): T2DCharArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes21(const arr: TBooleanArray; const weight: TDoubleArray): T2DBooleanArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes22(const arr: TPointArray; const weight: TDoubleArray): T2DPointArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes23(const arr: TBoxArray; const weight: TDoubleArray): T2DBoxArray; overload; cdecl; begin Result := arr.Classes(weight); end;
function TArray_Classes24(const arr: TRangeArray; const weight: TDoubleArray): T2DRangeArray; overload; cdecl; begin Result := arr.Classes(weight); end;

function TArray_Classify1(const arr: TIntegerArray): T2DIntegerArray; overload; cdecl; begin Result := arr.Classify; end;
function TArray_Classify2(const arr: TDoubleArray): T2DDoubleArray; overload; cdecl; begin Result := arr.Classify; end;
function TArray_Classify3(const arr: TStringArray): T2DStringArray; overload; cdecl; begin Result := arr.Classify; end;
function TArray_Classify4(const arr: TCharArray): T2DCharArray; overload; cdecl; begin Result := arr.Classify; end;
function TArray_Classify5(const arr: TBooleanArray): T2DBooleanArray; overload; cdecl; begin Result := arr.Classify; end;
function TArray_Classify6(const arr: TPointArray): T2DPointArray; overload; cdecl; begin Result := arr.Classify; end;
function TArray_Classify7(const arr: TBoxArray): T2DBoxArray; overload; cdecl; begin Result := arr.Classify; end;
function TArray_Classify8(const arr: TRangeArray): T2DRangeArray; overload; cdecl; begin Result := arr.Classify; end;
function TArray_Classify9(const arr: TIntegerArray; const weight: TIntegerArray): T2DIntegerArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify10(const arr: TDoubleArray; const weight: TIntegerArray): T2DDoubleArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify11(const arr: TStringArray; const weight: TIntegerArray): T2DStringArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify12(const arr: TCharArray; const weight: TIntegerArray): T2DCharArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify13(const arr: TBooleanArray; const weight: TIntegerArray): T2DBooleanArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify14(const arr: TPointArray; const weight: TIntegerArray): T2DPointArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify15(const arr: TBoxArray; const weight: TIntegerArray): T2DBoxArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify16(const arr: TRangeArray; const weight: TIntegerArray): T2DRangeArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify17(const arr: TIntegerArray; const weight: TDoubleArray): T2DIntegerArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify18(const arr: TDoubleArray; const weight: TDoubleArray): T2DDoubleArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify19(const arr: TStringArray; const weight: TDoubleArray): T2DStringArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify20(const arr: TCharArray; const weight: TDoubleArray): T2DCharArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify21(const arr: TBooleanArray; const weight: TDoubleArray): T2DBooleanArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify22(const arr: TPointArray; const weight: TDoubleArray): T2DPointArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify23(const arr: TBoxArray; const weight: TDoubleArray): T2DBoxArray; overload; cdecl; begin Result := arr.Classify(weight); end;
function TArray_Classify24(const arr: TRangeArray; const weight: TDoubleArray): T2DRangeArray; overload; cdecl; begin Result := arr.Classify(weight); end;

function TArray_Clear1(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear2(var arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear3(var arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear4(var arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear5(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear6(var arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear7(var arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;
function TArray_Clear8(var arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Clear; end;

function TArray_Clone1(const arr: TIntegerArray; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone2(const arr: TDoubleArray; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone3(const arr: TStringArray; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone4(const arr: TCharArray; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone5(const arr: TBooleanArray; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone6(const arr: TPointArray; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone7(const arr: TBoxArray; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone8(const arr: TRangeArray; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Clone(index, count); end;
function TArray_Clone9(const arr: TIntegerArray; const ID: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone10(const arr: TDoubleArray; const ID: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone11(const arr: TStringArray; const ID: TIntegerArray): TStringArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone12(const arr: TCharArray; const ID: TIntegerArray): TCharArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone13(const arr: TBooleanArray; const ID: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone14(const arr: TPointArray; const ID: TIntegerArray): TPointArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone15(const arr: TBoxArray; const ID: TIntegerArray): TBoxArray; overload; cdecl; begin Result := arr.Clone(ID); end;
function TArray_Clone16(const arr: TRangeArray; const ID: TIntegerArray): TRangeArray; overload; cdecl; begin Result := arr.Clone(ID); end;

function TArray_Compact1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Compact; end;
function TArray_Compact2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Compact; end;
function TArray_Compact3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Compact; end;
function TArray_Compact4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Compact; end;
function TArray_Compact5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Compact; end;
function TArray_Compact6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Compact; end;
function TArray_Compact7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Compact; end;
function TArray_Compact8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Compact; end;

function TArray_Compacted1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Compacted; end;
function TArray_Compacted2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Compacted; end;
function TArray_Compacted3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Compacted; end;
function TArray_Compacted4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Compacted; end;
function TArray_Compacted5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Compacted; end;
function TArray_Compacted6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Compacted; end;
function TArray_Compacted7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Compacted; end;
function TArray_Compacted8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Compacted; end;

function TArray_Combine1(const arr, b: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine2(const arr, b: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine3(const arr, b: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine4(const arr, b: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine5(const arr, b: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine6(const arr, b: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine7(const arr, b: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Combine(b); end;
function TArray_Combine8(const arr, b: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Combine(b); end;

function TArray_Compress1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Compress; end;
function TArray_Compress2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Compress; end;
function TArray_Compress3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Compress; end;
function TArray_Compress4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Compress; end;
function TArray_Compress5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Compress; end;
function TArray_Compress6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Compress; end;
function TArray_Compress7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Compress; end;
function TArray_Compress8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Compress; end;

function TArray_Compressed1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Compressed; end;
function TArray_Compressed2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Compressed; end;
function TArray_Compressed3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Compressed; end;
function TArray_Compressed4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Compressed; end;
function TArray_Compressed5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Compressed; end;
function TArray_Compressed6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Compressed; end;
function TArray_Compressed7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Compressed; end;
function TArray_Compressed8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Compressed; end;

function TArray_Comprised1(const arr, items: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Comprised(items); end;
function TArray_Comprised2(const arr, items: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Comprised(items); end;
function TArray_Comprised3(const arr, items: TStringArray): Boolean; overload; cdecl; begin Result := arr.Comprised(items); end;
function TArray_Comprised4(const arr, items: TCharArray): Boolean; overload; cdecl; begin Result := arr.Comprised(items); end;
function TArray_Comprised5(const arr, items: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Comprised(items); end;
function TArray_Comprised6(const arr, items: TPointArray): Boolean; overload; cdecl; begin Result := arr.Comprised(items); end;
function TArray_Comprised7(const arr, items: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Comprised(items); end;
function TArray_Comprised8(const arr, items: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Comprised(items); end;

function TArray_Exact1(const arr, items: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Exact(items); end;
function TArray_Exact2(const arr, items: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Exact(items); end;
function TArray_Exact3(const arr, items: TStringArray): Boolean; overload; cdecl; begin Result := arr.Exact(items); end;
function TArray_Exact4(const arr, items: TCharArray): Boolean; overload; cdecl; begin Result := arr.Exact(items); end;
function TArray_Exact5(const arr, items: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Exact(items); end;
function TArray_Exact6(const arr, items: TPointArray): Boolean; overload; cdecl; begin Result := arr.Exact(items); end;
function TArray_Exact7(const arr, items: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Exact(items); end;
function TArray_Exact8(const arr, items: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Exact(items); end;

function TArray_Constant1(const arr: TIntegerArray; const item: Integer): Boolean; overload; cdecl; begin Result := arr.Constant(item); end;
function TArray_Constant2(const arr: TDoubleArray; const item: Double): Boolean; overload; cdecl; begin Result := arr.Constant(item); end;
function TArray_Constant3(const arr: TStringArray; const item: string): Boolean; overload; cdecl; begin Result := arr.Constant(item); end;
function TArray_Constant4(const arr: TCharArray; const item: Char): Boolean; overload; cdecl; begin Result := arr.Constant(item); end;
function TArray_Constant5(const arr: TBooleanArray; const item: Boolean): Boolean; overload; cdecl; begin Result := arr.Constant(item); end;
function TArray_Constant6(const arr: TPointArray; const item: TPoint): Boolean; overload; cdecl; begin Result := arr.Constant(item); end;
function TArray_Constant7(const arr: TBoxArray; const item: TBox): Boolean; overload; cdecl; begin Result := arr.Constant(item); end;
function TArray_Constant8(const arr: TRangeArray; const item: TRange): Boolean; overload; cdecl; begin Result := arr.Constant(item); end;
function TArray_Constant9(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Constant; end;
function TArray_Constant10(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Constant; end;
function TArray_Constant11(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Constant; end;
function TArray_Constant12(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Constant; end;
function TArray_Constant13(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Constant; end;
function TArray_Constant14(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Constant; end;
function TArray_Constant15(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Constant; end;
function TArray_Constant16(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Constant; end;

function TArray_Contains1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains3(const arr: TStringArray; const item: string; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains4(const arr: TCharArray; const item: Char; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;
function TArray_Contains8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): Boolean; overload; cdecl; begin Result := arr.Contains(item, index); end;

function TArray_Copy1(const arr: TIntegerArray; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy2(const arr: TDoubleArray; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy3(const arr: TStringArray; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy4(const arr: TCharArray; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy5(const arr: TBooleanArray; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy6(const arr: TPointArray; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy7(const arr: TBoxArray; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Copy(index, count); end;
function TArray_Copy8(const arr: TRangeArray; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Copy(index, count); end;

function TArray_Create1(const item: Integer): TIntegerArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create2(const item: Double): TDoubleArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create3(const item: string): TStringArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create4(const item: Char): TCharArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create5(const item: Boolean): TBooleanArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create6(const item: TPoint): TPointArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create7(const item: TBox): TBoxArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create8(const item: TRange): TRangeArray; overload; cdecl; begin Result.Create(item); end;
function TArray_Create9(const aSize: Integer; const item: Integer): TIntegerArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create10(const aSize: Integer; const item: Double): TDoubleArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create11(const aSize: Integer; const item: string): TStringArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create12(const aSize: Integer; const item: Char): TCharArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create13(const aSize: Integer; const item: Boolean): TBooleanArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create14(const aSize: Integer; const item: TPoint): TPointArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create15(const aSize: Integer; const item: TBox): TBoxArray; overload; cdecl; begin Result.Create(aSize, item); end;
function TArray_Create16(const aSize: Integer; const item: TRange): TRangeArray; overload; cdecl; begin Result.Create(aSize, item); end;

function TArray_Delete1(const arr: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete2(const arr: TDoubleArray; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete3(const arr: TStringArray; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete4(const arr: TCharArray; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete5(const arr: TBooleanArray; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete6(const arr: TPointArray; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete7(const arr: TBoxArray; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete8(const arr: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Delete(index); end;
function TArray_Delete9(const arr: TIntegerArray; const ID: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete10(const arr: TDoubleArray; const ID: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete11(const arr: TStringArray; const ID: TIntegerArray): TStringArray; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete12(const arr: TCharArray; const ID: TIntegerArray): TCharArray; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete13(const arr: TBooleanArray; const ID: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete14(const arr: TPointArray; const ID: TIntegerArray): TPointArray; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete15(const arr: TBoxArray; const ID: TIntegerArray): TBoxArray; overload; cdecl; begin Result := arr.Delete(ID); end;
function TArray_Delete16(const arr: TRangeArray; const ID: TIntegerArray): TRangeArray; overload; cdecl; begin Result := arr.Delete(ID); end;

function TArray_Differ1(const arr, target: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ2(const arr, target: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ3(const arr, target: TStringArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ4(const arr, target: TCharArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ5(const arr, target: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ6(const arr, target: TPointArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ7(const arr, target: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;
function TArray_Differ8(const arr, target: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Differ(target); end;

function TArray_Disordered1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Disordered; end;
function TArray_Disordered2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Disordered; end;
function TArray_Disordered3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Disordered; end;
function TArray_Disordered4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Disordered; end;
function TArray_Disordered5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Disordered; end;
function TArray_Disordered6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Disordered; end;
function TArray_Disordered7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Disordered; end;
function TArray_Disordered8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Disordered; end;

function TArray_Distribute1(const arr: TIntegerArray; const parts: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute2(const arr: TDoubleArray; const parts: Integer): T2DDoubleArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute3(const arr: TStringArray; const parts: Integer): T2DStringArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute4(const arr: TCharArray; const parts: Integer): T2DCharArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute5(const arr: TBooleanArray; const parts: Integer): T2DBooleanArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute6(const arr: TPointArray; const parts: Integer): T2DPointArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute7(const arr: TBoxArray; const parts: Integer): T2DBoxArray; overload; cdecl; begin Result := arr.Distribute(parts); end;
function TArray_Distribute8(const arr: TRangeArray; const parts: Integer): T2DRangeArray; overload; cdecl; begin Result := arr.Distribute(parts); end;

function TArray_Drop1(const arr: TIntegerArray; const item: Integer; const eraseDuplicates: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Drop(item, eraseDuplicates); end;
function TArray_Drop2(const arr: TDoubleArray; const item: Double; const eraseDuplicates: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Drop(item, eraseDuplicates); end;
function TArray_Drop3(const arr: TStringArray; const item: string; const eraseDuplicates: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Drop(item, eraseDuplicates); end;
function TArray_Drop4(const arr: TCharArray; const item: Char; const eraseDuplicates: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Drop(item, eraseDuplicates); end;
function TArray_Drop5(const arr: TBooleanArray; const item: Boolean; const eraseDuplicates: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Drop(item, eraseDuplicates); end;
function TArray_Drop6(const arr: TPointArray; const item: TPoint; const eraseDuplicates: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Drop(item, eraseDuplicates); end;
function TArray_Drop7(const arr: TBoxArray; const item: TBox; const eraseDuplicates: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Drop(item, eraseDuplicates); end;
function TArray_Drop8(const arr: TRangeArray; const item: TRange; const eraseDuplicates: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Drop(item, eraseDuplicates); end;

function TArray_Dump1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump2(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump3(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump4(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump5(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump6(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump7(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Dump(items, index); end;
function TArray_Dump8(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Dump(items, index); end;

function TArray_Dupe1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Dupe; end;
function TArray_Dupe8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Dupe; end;

function TArray_Duplicate1(const arr: TIntegerArray; const xTimes: Integer = 1): TIntegerArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate2(const arr: TDoubleArray; const xTimes: Integer = 1): TDoubleArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate3(const arr: TStringArray; const xTimes: Integer = 1): TStringArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate4(const arr: TCharArray; const xTimes: Integer = 1): TCharArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate5(const arr: TBooleanArray; const xTimes: Integer = 1): TBooleanArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate6(const arr: TPointArray; const xTimes: Integer = 1): TPointArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate7(const arr: TBoxArray; const xTimes: Integer = 1): TBoxArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;
function TArray_Duplicate8(const arr: TRangeArray; const xTimes: Integer = 1): TRangeArray; overload; cdecl; begin Result := arr.Duplicate(xTimes); end;

function TArray_Elements1(const arr: TIntegerArray; const returnIDs: TIntegerArray; const returnSort: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Elements(returnIDs, returnSort); end;
function TArray_Elements2(const arr: TDoubleArray; const returnIDs: TIntegerArray; const returnSort: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Elements(returnIDs, returnSort); end;
function TArray_Elements3(const arr: TStringArray; const returnIDs: TIntegerArray; const returnSort: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Elements(returnIDs, returnSort); end;
function TArray_Elements4(const arr: TCharArray; const returnIDs: TIntegerArray; const returnSort: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Elements(returnIDs, returnSort); end;
function TArray_Elements5(const arr: TBooleanArray; const returnIDs: TIntegerArray; const returnSort: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Elements(returnIDs, returnSort); end;
function TArray_Elements6(const arr: TPointArray; const returnIDs: TIntegerArray; const returnSort: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Elements(returnIDs, returnSort); end;
function TArray_Elements7(const arr: TBoxArray; const returnIDs: TIntegerArray; const returnSort: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Elements(returnIDs, returnSort); end;
function TArray_Elements8(const arr: TRangeArray; const returnIDs: TIntegerArray; const returnSort: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Elements(returnIDs, returnSort); end;

function TArray_Emplace1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Emplace(item, index); end;
function TArray_Emplace2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Emplace(item, index); end;
function TArray_Emplace3(const arr: TStringArray; const item: string; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Emplace(item, index); end;
function TArray_Emplace4(const arr: TCharArray; const item: Char; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Emplace(item, index); end;
function TArray_Emplace5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Emplace(item, index); end;
function TArray_Emplace6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Emplace(item, index); end;
function TArray_Emplace7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Emplace(item, index); end;
function TArray_Emplace8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Emplace(item, index); end;

function TArray_Empty1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function TArray_Empty8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;

function TArray_Equal1(const arr, target: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal2(const arr, target: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal3(const arr, target: TStringArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal4(const arr, target: TCharArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal5(const arr, target: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal6(const arr, target: TPointArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal7(const arr, target: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;
function TArray_Equal8(const arr, target: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Equal(target); end;

function TArray_Erase1(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647; const all: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase2(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647; const all: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase3(const arr: TStringArray; const item: string; const index: Integer = 2147483647; const all: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase4(const arr: TCharArray; const item: Char; const index: Integer = 2147483647; const all: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647; const all: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase6(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647; const all: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase7(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647; const all: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase8(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647; const all: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Erase(item, index, all); end;
function TArray_Erase9(const arr: TIntegerArray; const item: Integer; const all: Boolean): TIntegerArray; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase10(const arr: TDoubleArray; const item: Double; const all: Boolean): TDoubleArray; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase11(const arr: TStringArray; const item: string; const all: Boolean): TStringArray; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase12(const arr: TCharArray; const item: Char; const all: Boolean): TCharArray; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase13(const arr: TBooleanArray; const item: Boolean; const all: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase14(const arr: TPointArray; const item: TPoint; const all: Boolean): TPointArray; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase15(const arr: TBoxArray; const item: TBox; const all: Boolean): TBoxArray; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase16(const arr: TRangeArray; const item: TRange; const all: Boolean): TRangeArray; overload; cdecl; begin Result := arr.Erase(item, all); end;
function TArray_Erase17(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647; const all: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase18(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647; const all: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase19(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647; const all: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase20(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647; const all: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase21(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647; const all: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase22(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647; const all: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase23(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647; const all: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase24(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647; const all: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Erase(items, index, all); end;
function TArray_Erase25(const arr: TIntegerArray; const items: TIntegerArray; const all: Boolean): TIntegerArray; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase26(const arr: TDoubleArray; const items: TDoubleArray; const all: Boolean): TDoubleArray; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase27(const arr: TStringArray; const items: TStringArray; const all: Boolean): TStringArray; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase28(const arr: TCharArray; const items: TCharArray; const all: Boolean): TCharArray; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase29(const arr: TBooleanArray; const items: TBooleanArray; const all: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase30(const arr: TPointArray; const items: TPointArray; const all: Boolean): TPointArray; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase31(const arr: TBoxArray; const items: TBoxArray; const all: Boolean): TBoxArray; overload; cdecl; begin Result := arr.Erase(items, all); end;
function TArray_Erase32(const arr: TRangeArray; const items: TRangeArray; const all: Boolean): TRangeArray; overload; cdecl; begin Result := arr.Erase(items, all); end;

function TArray_Excessive1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;
function TArray_Excessive8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Excessive; end;

function TArray_Exch1(var arr: TIntegerArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch2(var arr: TDoubleArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch3(var arr: TStringArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch4(var arr: TCharArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch5(var arr: TBooleanArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch6(var arr: TPointArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch7(var arr: TBoxArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;
function TArray_Exch8(var arr: TRangeArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exch(aIndex, bIndex); end;

function TArray_Exchange1(var arr: TIntegerArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange2(var arr: TDoubleArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange3(var arr: TStringArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange4(var arr: TCharArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange5(var arr: TBooleanArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange6(var arr: TPointArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange7(var arr: TBoxArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange8(var arr: TRangeArray; const aIndex, bIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Exchange(aIndex, bIndex); end;
function TArray_Exchange9(var arr, b: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Exchange(b); end;
function TArray_Exchange10(var arr, b: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Exchange(b); end;
function TArray_Exchange11(var arr, b: TStringArray): Integer; overload; cdecl; begin Result := arr.Exchange(b); end;
function TArray_Exchange12(var arr, b: TCharArray): Integer; overload; cdecl; begin Result := arr.Exchange(b); end;
function TArray_Exchange13(var arr, b: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Exchange(b); end;
function TArray_Exchange14(var arr, b: TPointArray): Integer; overload; cdecl; begin Result := arr.Exchange(b); end;
function TArray_Exchange15(var arr, b: TBoxArray): Integer; overload; cdecl; begin Result := arr.Exchange(b); end;
function TArray_Exchange16(var arr, b: TRangeArray): Integer; overload; cdecl; begin Result := arr.Exchange(b); end;

function TArray_Exclude1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Exclude(items, index); end;
function TArray_Exclude2(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Exclude(items, index); end;
function TArray_Exclude3(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Exclude(items, index); end;
function TArray_Exclude4(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Exclude(items, index); end;
function TArray_Exclude5(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Exclude(items, index); end;
function TArray_Exclude6(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Exclude(items, index); end;
function TArray_Exclude7(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Exclude(items, index); end;
function TArray_Exclude8(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Exclude(items, index); end;

function TArray_Exists1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Exists; end;
function TArray_Exists2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Exists; end;
function TArray_Exists3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Exists; end;
function TArray_Exists4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Exists; end;
function TArray_Exists5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Exists; end;
function TArray_Exists6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Exists; end;
function TArray_Exists7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Exists; end;
function TArray_Exists8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Exists; end;

function TArray_Extend1(const arr: TIntegerArray; const item: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend2(const arr: TDoubleArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend3(const arr: TStringArray; const item: string): TStringArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend4(const arr: TCharArray; const item: Char): TCharArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend5(const arr: TBooleanArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend6(const arr: TPointArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend7(const arr: TBoxArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend8(const arr: TRangeArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := arr.Extend(item); end;
function TArray_Extend9(const arr: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend10(const arr: TDoubleArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend11(const arr: TStringArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend12(const arr: TCharArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend13(const arr: TBooleanArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend14(const arr: TPointArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend15(const arr: TBoxArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Extend(items); end;
function TArray_Extend16(const arr: TRangeArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Extend(items); end;

function TArray_Extract1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract3(const arr: TStringArray; const item: string; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract4(const arr: TCharArray; const item: Char; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Extract(item, index); end;
function TArray_Extract9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Extract(items, index); end;
function TArray_Extract16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Extract(items, index); end;

function TArray_ExtractEvery1(const arr: TIntegerArray; const X: Integer = 1; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery2(const arr: TDoubleArray; const X: Integer = 1; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery3(const arr: TStringArray; const X: Integer = 1; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery4(const arr: TCharArray; const X: Integer = 1; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery5(const arr: TBooleanArray; const X: Integer = 1; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery6(const arr: TPointArray; const X: Integer = 1; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery7(const arr: TBoxArray; const X: Integer = 1; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;
function TArray_ExtractEvery8(const arr: TRangeArray; const X: Integer = 1; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.ExtractEvery(X, index); end;

function TArray_ExtractIDs1(const arr: TIntegerArray; const allowed: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.ExtractIDs(allowed); end;
function TArray_ExtractIDs2(const arr: TDoubleArray; const allowed: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := arr.ExtractIDs(allowed); end;
function TArray_ExtractIDs3(const arr: TStringArray; const allowed: TIntegerArray): TStringArray; overload; cdecl; begin Result := arr.ExtractIDs(allowed); end;
function TArray_ExtractIDs4(const arr: TCharArray; const allowed: TIntegerArray): TCharArray; overload; cdecl; begin Result := arr.ExtractIDs(allowed); end;
function TArray_ExtractIDs5(const arr: TBooleanArray; const allowed: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := arr.ExtractIDs(allowed); end;
function TArray_ExtractIDs6(const arr: TPointArray; const allowed: TIntegerArray): TPointArray; overload; cdecl; begin Result := arr.ExtractIDs(allowed); end;
function TArray_ExtractIDs7(const arr: TBoxArray; const allowed: TIntegerArray): TBoxArray; overload; cdecl; begin Result := arr.ExtractIDs(allowed); end;
function TArray_ExtractIDs8(const arr: TRangeArray; const allowed: TIntegerArray): TRangeArray; overload; cdecl; begin Result := arr.ExtractIDs(allowed); end;

function TArray_ExtractIndexes1(const arr: TIntegerArray; const allowed: TIntegerArray; const aSorted: Boolean = False): TIntegerArray; overload; cdecl; begin Result := arr.ExtractIndexes(allowed, aSorted); end;
function TArray_ExtractIndexes2(const arr: TDoubleArray; const allowed: TIntegerArray; const aSorted: Boolean = False): TDoubleArray; overload; cdecl; begin Result := arr.ExtractIndexes(allowed, aSorted); end;
function TArray_ExtractIndexes3(const arr: TStringArray; const allowed: TIntegerArray; const aSorted: Boolean = False): TStringArray; overload; cdecl; begin Result := arr.ExtractIndexes(allowed, aSorted); end;
function TArray_ExtractIndexes4(const arr: TCharArray; const allowed: TIntegerArray; const aSorted: Boolean = False): TCharArray; overload; cdecl; begin Result := arr.ExtractIndexes(allowed, aSorted); end;
function TArray_ExtractIndexes5(const arr: TBooleanArray; const allowed: TIntegerArray; const aSorted: Boolean = False): TBooleanArray; overload; cdecl; begin Result := arr.ExtractIndexes(allowed, aSorted); end;
function TArray_ExtractIndexes6(const arr: TPointArray; const allowed: TIntegerArray; const aSorted: Boolean = False): TPointArray; overload; cdecl; begin Result := arr.ExtractIndexes(allowed, aSorted); end;
function TArray_ExtractIndexes7(const arr: TBoxArray; const allowed: TIntegerArray; const aSorted: Boolean = False): TBoxArray; overload; cdecl; begin Result := arr.ExtractIndexes(allowed, aSorted); end;
function TArray_ExtractIndexes8(const arr: TRangeArray; const allowed: TIntegerArray; const aSorted: Boolean = False): TRangeArray; overload; cdecl; begin Result := arr.ExtractIndexes(allowed, aSorted); end;

function TArray_Feed1(const arr: TIntegerArray; const item: Integer; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Feed(item, allowDuplicates); end;
function TArray_Feed2(const arr: TDoubleArray; const item: Double; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Feed(item, allowDuplicates); end;
function TArray_Feed3(const arr: TStringArray; const item: string; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Feed(item, allowDuplicates); end;
function TArray_Feed4(const arr: TCharArray; const item: Char; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Feed(item, allowDuplicates); end;
function TArray_Feed5(const arr: TBooleanArray; const item: Boolean; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Feed(item, allowDuplicates); end;
function TArray_Feed6(const arr: TPointArray; const item: TPoint; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Feed(item, allowDuplicates); end;
function TArray_Feed7(const arr: TBoxArray; const item: TBox; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Feed(item, allowDuplicates); end;
function TArray_Feed8(const arr: TRangeArray; const item: TRange; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Feed(item, allowDuplicates); end;

function TArray_Fill1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill2(const arr: TDoubleArray; const item: Double; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill3(const arr: TStringArray; const item: string; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill4(const arr: TCharArray; const item: Char; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill6(const arr: TPointArray; const item: TPoint; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill7(const arr: TBoxArray; const item: TBox; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill8(const arr: TRangeArray; const item: TRange; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Fill(item, index, count); end;
function TArray_Fill9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;
function TArray_Fill16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Fill(items, index, count); end;

function TArray_Filter1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter3(const arr: TStringArray; const item: string; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter4(const arr: TCharArray; const item: Char; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Filter(item, index); end;
function TArray_Filter9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Filter(items, index); end;
function TArray_Filter16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Filter(items, index); end;

function TArray_FilterEvery1(const arr: TIntegerArray; const X: Integer = 1; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery2(const arr: TDoubleArray; const X: Integer = 1; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery3(const arr: TStringArray; const X: Integer = 1; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery4(const arr: TCharArray; const X: Integer = 1; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery5(const arr: TBooleanArray; const X: Integer = 1; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery6(const arr: TPointArray; const X: Integer = 1; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery7(const arr: TBoxArray; const X: Integer = 1; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;
function TArray_FilterEvery8(const arr: TRangeArray; const X: Integer = 1; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.FilterEvery(X, index); end;

function TArray_FilterIDs1(const arr: TIntegerArray; const forbidden: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.FilterIDs(forbidden); end;
function TArray_FilterIDs2(const arr: TDoubleArray; const forbidden: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := arr.FilterIDs(forbidden); end;
function TArray_FilterIDs3(const arr: TStringArray; const forbidden: TIntegerArray): TStringArray; overload; cdecl; begin Result := arr.FilterIDs(forbidden); end;
function TArray_FilterIDs4(const arr: TCharArray; const forbidden: TIntegerArray): TCharArray; overload; cdecl; begin Result := arr.FilterIDs(forbidden); end;
function TArray_FilterIDs5(const arr: TBooleanArray; const forbidden: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := arr.FilterIDs(forbidden); end;
function TArray_FilterIDs6(const arr: TPointArray; const forbidden: TIntegerArray): TPointArray; overload; cdecl; begin Result := arr.FilterIDs(forbidden); end;
function TArray_FilterIDs7(const arr: TBoxArray; const forbidden: TIntegerArray): TBoxArray; overload; cdecl; begin Result := arr.FilterIDs(forbidden); end;
function TArray_FilterIDs8(const arr: TRangeArray; const forbidden: TIntegerArray): TRangeArray; overload; cdecl; begin Result := arr.FilterIDs(forbidden); end;

function TArray_FilterIndexes1(const arr: TIntegerArray; const forbidden: TIntegerArray; const fSorted: Boolean = False): TIntegerArray; overload; cdecl; begin Result := arr.FilterIndexes(forbidden, fSorted); end;
function TArray_FilterIndexes2(const arr: TDoubleArray; const forbidden: TIntegerArray; const fSorted: Boolean = False): TDoubleArray; overload; cdecl; begin Result := arr.FilterIndexes(forbidden, fSorted); end;
function TArray_FilterIndexes3(const arr: TStringArray; const forbidden: TIntegerArray; const fSorted: Boolean = False): TStringArray; overload; cdecl; begin Result := arr.FilterIndexes(forbidden, fSorted); end;
function TArray_FilterIndexes4(const arr: TCharArray; const forbidden: TIntegerArray; const fSorted: Boolean = False): TCharArray; overload; cdecl; begin Result := arr.FilterIndexes(forbidden, fSorted); end;
function TArray_FilterIndexes5(const arr: TBooleanArray; const forbidden: TIntegerArray; const fSorted: Boolean = False): TBooleanArray; overload; cdecl; begin Result := arr.FilterIndexes(forbidden, fSorted); end;
function TArray_FilterIndexes6(const arr: TPointArray; const forbidden: TIntegerArray; const fSorted: Boolean = False): TPointArray; overload; cdecl; begin Result := arr.FilterIndexes(forbidden, fSorted); end;
function TArray_FilterIndexes7(const arr: TBoxArray; const forbidden: TIntegerArray; const fSorted: Boolean = False): TBoxArray; overload; cdecl; begin Result := arr.FilterIndexes(forbidden, fSorted); end;
function TArray_FilterIndexes8(const arr: TRangeArray; const forbidden: TIntegerArray; const fSorted: Boolean = False): TRangeArray; overload; cdecl; begin Result := arr.FilterIndexes(forbidden, fSorted); end;

function TArray_Find1(const arr: TIntegerArray; const ID: TRange; const item: Integer): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find2(const arr: TDoubleArray; const ID: TRange; const item: Double): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find3(const arr: TStringArray; const ID: TRange; const item: string): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find4(const arr: TCharArray; const ID: TRange; const item: Char): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find5(const arr: TBooleanArray; const ID: TRange; const item: Boolean): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find6(const arr: TPointArray; const ID: TRange; const item: TPoint): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find7(const arr: TBoxArray; const ID: TRange; const item: TBox): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find8(const arr: TRangeArray; const ID: TRange; const item: TRange): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find9(const arr: TIntegerArray; const ID: TIntegerArray; const item: Integer): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find10(const arr: TDoubleArray; const ID: TIntegerArray; const item: Double): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find11(const arr: TStringArray; const ID: TIntegerArray; const item: string): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find12(const arr: TCharArray; const ID: TIntegerArray; const item: Char): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find13(const arr: TBooleanArray; const ID: TIntegerArray; const item: Boolean): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find14(const arr: TPointArray; const ID: TIntegerArray; const item: TPoint): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find15(const arr: TBoxArray; const ID: TIntegerArray; const item: TBox): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find16(const arr: TRangeArray; const ID: TIntegerArray; const item: TRange): Integer; overload; cdecl; begin Result := arr.Find(ID, item); end;
function TArray_Find17(const arr: TIntegerArray; const ID: TRange; const items: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find18(const arr: TDoubleArray; const ID: TRange; const items: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find19(const arr: TStringArray; const ID: TRange; const items: TStringArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find20(const arr: TCharArray; const ID: TRange; const items: TCharArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find21(const arr: TBooleanArray; const ID: TRange; const items: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find22(const arr: TPointArray; const ID: TRange; const items: TPointArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find23(const arr: TBoxArray; const ID: TRange; const items: TBoxArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find24(const arr: TRangeArray; const ID: TRange; const items: TRangeArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find25(const arr: TIntegerArray; const ID: TIntegerArray; const items: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find26(const arr: TDoubleArray; const ID: TIntegerArray; const items: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find27(const arr: TStringArray; const ID: TIntegerArray; const items: TStringArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find28(const arr: TCharArray; const ID: TIntegerArray; const items: TCharArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find29(const arr: TBooleanArray; const ID: TIntegerArray; const items: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find30(const arr: TPointArray; const ID: TIntegerArray; const items: TPointArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find31(const arr: TBoxArray; const ID: TIntegerArray; const items: TBoxArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;
function TArray_Find32(const arr: TRangeArray; const ID: TIntegerArray; const items: TRangeArray): Integer; overload; cdecl; begin Result := arr.Find(ID, items); end;

function TArray_First1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.First; end;
function TArray_First2(const arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.First; end;
function TArray_First3(const arr: TStringArray): Integer; overload; cdecl; begin Result := arr.First; end;
function TArray_First4(const arr: TCharArray): Integer; overload; cdecl; begin Result := arr.First; end;
function TArray_First5(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.First; end;
function TArray_First6(const arr: TPointArray): Integer; overload; cdecl; begin Result := arr.First; end;
function TArray_First7(const arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.First; end;
function TArray_First8(const arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.First; end;
function TArray_First9(const arr: TIntegerArray; const item: Integer): Integer; overload; cdecl; begin Result := arr.First(item); end;
function TArray_First10(const arr: TDoubleArray; const item: Double): Integer; overload; cdecl; begin Result := arr.First(item); end;
function TArray_First11(const arr: TStringArray; const item: string): Integer; overload; cdecl; begin Result := arr.First(item); end;
function TArray_First12(const arr: TCharArray; const item: Char): Integer; overload; cdecl; begin Result := arr.First(item); end;
function TArray_First13(const arr: TBooleanArray; const item: Boolean): Integer; overload; cdecl; begin Result := arr.First(item); end;
function TArray_First14(const arr: TPointArray; const item: TPoint): Integer; overload; cdecl; begin Result := arr.First(item); end;
function TArray_First15(const arr: TBoxArray; const item: TBox): Integer; overload; cdecl; begin Result := arr.First(item); end;
function TArray_First16(const arr: TRangeArray; const item: TRange): Integer; overload; cdecl; begin Result := arr.First(item); end;
function TArray_First17(const arr: TIntegerArray; const items: TIntegerArray): Integer; overload; cdecl; begin Result := arr.First(items); end;
function TArray_First18(const arr: TDoubleArray; const items: TDoubleArray): Integer; overload; cdecl; begin Result := arr.First(items); end;
function TArray_First19(const arr: TStringArray; const items: TStringArray): Integer; overload; cdecl; begin Result := arr.First(items); end;
function TArray_First20(const arr: TCharArray; const items: TCharArray): Integer; overload; cdecl; begin Result := arr.First(items); end;
function TArray_First21(const arr: TBooleanArray; const items: TBooleanArray): Integer; overload; cdecl; begin Result := arr.First(items); end;
function TArray_First22(const arr: TPointArray; const items: TPointArray): Integer; overload; cdecl; begin Result := arr.First(items); end;
function TArray_First23(const arr: TBoxArray; const items: TBoxArray): Integer; overload; cdecl; begin Result := arr.First(items); end;
function TArray_First24(const arr: TRangeArray; const items: TRangeArray): Integer; overload; cdecl; begin Result := arr.First(items); end;

function TArray_Fits1(const arr: TIntegerArray; const maxValue: Integer): Boolean; overload; cdecl; begin Result := arr.Fits(maxValue); end;
function TArray_Fits2(const arr: TDoubleArray; const maxValue: Integer): Boolean; overload; cdecl; begin Result := arr.Fits(maxValue); end;
function TArray_Fits3(const arr: TStringArray; const maxValue: Integer): Boolean; overload; cdecl; begin Result := arr.Fits(maxValue); end;
function TArray_Fits4(const arr: TCharArray; const maxValue: Integer): Boolean; overload; cdecl; begin Result := arr.Fits(maxValue); end;
function TArray_Fits5(const arr: TBooleanArray; const maxValue: Integer): Boolean; overload; cdecl; begin Result := arr.Fits(maxValue); end;
function TArray_Fits6(const arr: TPointArray; const maxValue: Integer): Boolean; overload; cdecl; begin Result := arr.Fits(maxValue); end;
function TArray_Fits7(const arr: TBoxArray; const maxValue: Integer): Boolean; overload; cdecl; begin Result := arr.Fits(maxValue); end;
function TArray_Fits8(const arr: TRangeArray; const maxValue: Integer): Boolean; overload; cdecl; begin Result := arr.Fits(maxValue); end;
function TArray_Fits9(const arr: TIntegerArray; const target: TRange): Boolean; overload; cdecl; begin Result := arr.Fits(target); end;
function TArray_Fits10(const arr: TDoubleArray; const target: TRange): Boolean; overload; cdecl; begin Result := arr.Fits(target); end;
function TArray_Fits11(const arr: TStringArray; const target: TRange): Boolean; overload; cdecl; begin Result := arr.Fits(target); end;
function TArray_Fits12(const arr: TCharArray; const target: TRange): Boolean; overload; cdecl; begin Result := arr.Fits(target); end;
function TArray_Fits13(const arr: TBooleanArray; const target: TRange): Boolean; overload; cdecl; begin Result := arr.Fits(target); end;
function TArray_Fits14(const arr: TPointArray; const target: TRange): Boolean; overload; cdecl; begin Result := arr.Fits(target); end;
function TArray_Fits15(const arr: TBoxArray; const target: TRange): Boolean; overload; cdecl; begin Result := arr.Fits(target); end;
function TArray_Fits16(const arr: TRangeArray; const target: TRange): Boolean; overload; cdecl; begin Result := arr.Fits(target); end;

function TArray_Flip1(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip2(var arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip3(var arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip4(var arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip5(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip6(var arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip7(var arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;
function TArray_Flip8(var arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Flip; end;

function TArray_Free1(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Free; end;
function TArray_Free2(var arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Free; end;
function TArray_Free3(var arr: TStringArray): Integer; overload; cdecl; begin Result := arr.Free; end;
function TArray_Free4(var arr: TCharArray): Integer; overload; cdecl; begin Result := arr.Free; end;
function TArray_Free5(var arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Free; end;
function TArray_Free6(var arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Free; end;
function TArray_Free7(var arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.Free; end;
function TArray_Free8(var arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.Free; end;

function TArray_FromLeft1(const arr: TIntegerArray; const count: Integer; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft2(const arr: TDoubleArray; const count: Integer; const index: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft3(const arr: TStringArray; const count: Integer; const index: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft4(const arr: TCharArray; const count: Integer; const index: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft5(const arr: TBooleanArray; const count: Integer; const index: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft6(const arr: TPointArray; const count: Integer; const index: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft7(const arr: TBoxArray; const count: Integer; const index: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;
function TArray_FromLeft8(const arr: TRangeArray; const count: Integer; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.FromLeft(count, index); end;

function TArray_FromRight1(const arr: TIntegerArray; const count: Integer; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight2(const arr: TDoubleArray; const count: Integer; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight3(const arr: TStringArray; const count: Integer; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight4(const arr: TCharArray; const count: Integer; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight5(const arr: TBooleanArray; const count: Integer; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight6(const arr: TPointArray; const count: Integer; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight7(const arr: TBoxArray; const count: Integer; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;
function TArray_FromRight8(const arr: TRangeArray; const count: Integer; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.FromRight(count, index); end;

function TArray_Get1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Get; end;
function TArray_Get9(const arr: TIntegerArray; const ID: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get10(const arr: TDoubleArray; const ID: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get11(const arr: TStringArray; const ID: TIntegerArray): TStringArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get12(const arr: TCharArray; const ID: TIntegerArray): TCharArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get13(const arr: TBooleanArray; const ID: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get14(const arr: TPointArray; const ID: TIntegerArray): TPointArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get15(const arr: TBoxArray; const ID: TIntegerArray): TBoxArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get16(const arr: TRangeArray; const ID: TIntegerArray): TRangeArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get17(const arr: TIntegerArray; const ID: TRange): TIntegerArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get18(const arr: TDoubleArray; const ID: TRange): TDoubleArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get19(const arr: TStringArray; const ID: TRange): TStringArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get20(const arr: TCharArray; const ID: TRange): TCharArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get21(const arr: TBooleanArray; const ID: TRange): TBooleanArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get22(const arr: TPointArray; const ID: TRange): TPointArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get23(const arr: TBoxArray; const ID: TRange): TBoxArray; overload; cdecl; begin Result := arr.Get(ID); end;
function TArray_Get24(const arr: TRangeArray; const ID: TRange): TRangeArray; overload; cdecl; begin Result := arr.Get(ID); end;

function TArray_Group1(const arr: TIntegerArray): T2DIntegerArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group2(const arr: TDoubleArray): T2DDoubleArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group3(const arr: TStringArray): T2DStringArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group4(const arr: TCharArray): T2DCharArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group5(const arr: TBooleanArray): T2DBooleanArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group6(const arr: TPointArray): T2DPointArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group7(const arr: TBoxArray): T2DBoxArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group8(const arr: TRangeArray): T2DRangeArray; overload; cdecl; begin Result := arr.Group; end;
function TArray_Group9(const arr: TIntegerArray; const weight: TIntegerArray; const wSorted: Boolean = False): T2DIntegerArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group10(const arr: TDoubleArray; const weight: TIntegerArray; const wSorted: Boolean = False): T2DDoubleArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group11(const arr: TStringArray; const weight: TIntegerArray; const wSorted: Boolean = False): T2DStringArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group12(const arr: TCharArray; const weight: TIntegerArray; const wSorted: Boolean = False): T2DCharArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group13(const arr: TBooleanArray; const weight: TIntegerArray; const wSorted: Boolean = False): T2DBooleanArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group14(const arr: TPointArray; const weight: TIntegerArray; const wSorted: Boolean = False): T2DPointArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group15(const arr: TBoxArray; const weight: TIntegerArray; const wSorted: Boolean = False): T2DBoxArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group16(const arr: TRangeArray; const weight: TIntegerArray; const wSorted: Boolean = False): T2DRangeArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group17(const arr: TIntegerArray; const weight: TDoubleArray; const wSorted: Boolean = False): T2DIntegerArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group18(const arr: TDoubleArray; const weight: TDoubleArray; const wSorted: Boolean = False): T2DDoubleArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group19(const arr: TStringArray; const weight: TDoubleArray; const wSorted: Boolean = False): T2DStringArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group20(const arr: TCharArray; const weight: TDoubleArray; const wSorted: Boolean = False): T2DCharArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group21(const arr: TBooleanArray; const weight: TDoubleArray; const wSorted: Boolean = False): T2DBooleanArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group22(const arr: TPointArray; const weight: TDoubleArray; const wSorted: Boolean = False): T2DPointArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group23(const arr: TBoxArray; const weight: TDoubleArray; const wSorted: Boolean = False): T2DBoxArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;
function TArray_Group24(const arr: TRangeArray; const weight: TDoubleArray; const wSorted: Boolean = False): T2DRangeArray; overload; cdecl; begin Result := arr.Group(weight, wSorted); end;

function TArray_Grow1(const arr: TIntegerArray; const item: Integer; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Grow(item, allowDuplicates); end;
function TArray_Grow2(const arr: TDoubleArray; const item: Double; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Grow(item, allowDuplicates); end;
function TArray_Grow3(const arr: TStringArray; const item: string; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Grow(item, allowDuplicates); end;
function TArray_Grow4(const arr: TCharArray; const item: Char; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Grow(item, allowDuplicates); end;
function TArray_Grow5(const arr: TBooleanArray; const item: Boolean; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Grow(item, allowDuplicates); end;
function TArray_Grow6(const arr: TPointArray; const item: TPoint; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Grow(item, allowDuplicates); end;
function TArray_Grow7(const arr: TBoxArray; const item: TBox; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Grow(item, allowDuplicates); end;
function TArray_Grow8(const arr: TRangeArray; const item: TRange; const allowDuplicates: Boolean = False): Integer; overload; cdecl; begin Result := arr.Grow(item, allowDuplicates); end;

function TArray_Holds1(const arr, chain: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds2(const arr, chain: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds3(const arr, chain: TStringArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds4(const arr, chain: TCharArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds5(const arr, chain: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds6(const arr, chain: TPointArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds7(const arr, chain: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;
function TArray_Holds8(const arr, chain: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Holds(chain); end;

function TArray_Homogeneous1(const arr: TIntegerArray; const item: Integer): Boolean; overload; cdecl; begin Result := arr.Homogeneous(item); end;
function TArray_Homogeneous2(const arr: TDoubleArray; const item: Double): Boolean; overload; cdecl; begin Result := arr.Homogeneous(item); end;
function TArray_Homogeneous3(const arr: TStringArray; const item: string): Boolean; overload; cdecl; begin Result := arr.Homogeneous(item); end;
function TArray_Homogeneous4(const arr: TCharArray; const item: Char): Boolean; overload; cdecl; begin Result := arr.Homogeneous(item); end;
function TArray_Homogeneous5(const arr: TBooleanArray; const item: Boolean): Boolean; overload; cdecl; begin Result := arr.Homogeneous(item); end;
function TArray_Homogeneous6(const arr: TPointArray; const item: TPoint): Boolean; overload; cdecl; begin Result := arr.Homogeneous(item); end;
function TArray_Homogeneous7(const arr: TBoxArray; const item: TBox): Boolean; overload; cdecl; begin Result := arr.Homogeneous(item); end;
function TArray_Homogeneous8(const arr: TRangeArray; const item: TRange): Boolean; overload; cdecl; begin Result := arr.Homogeneous(item); end;
function TArray_Homogeneous9(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Homogeneous; end;
function TArray_Homogeneous10(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Homogeneous; end;
function TArray_Homogeneous11(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Homogeneous; end;
function TArray_Homogeneous12(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Homogeneous; end;
function TArray_Homogeneous13(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Homogeneous; end;
function TArray_Homogeneous14(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Homogeneous; end;
function TArray_Homogeneous15(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Homogeneous; end;
function TArray_Homogeneous16(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Homogeneous; end;

function TArray_ID1(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.ID(aAscending); end;
function TArray_ID2(const arr: TDoubleArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.ID(aAscending); end;
function TArray_ID3(const arr: TStringArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.ID(aAscending); end;
function TArray_ID4(const arr: TCharArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.ID(aAscending); end;
function TArray_ID5(const arr: TBooleanArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.ID(aAscending); end;
function TArray_ID6(const arr: TPointArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.ID(aAscending); end;
function TArray_ID7(const arr: TBoxArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.ID(aAscending); end;
function TArray_ID8(const arr: TRangeArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.ID(aAscending); end;

function TArray_IDs1(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs2(const arr: TDoubleArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs3(const arr: TStringArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs4(const arr: TCharArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs5(const arr: TBooleanArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs6(const arr: TPointArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs7(const arr: TBoxArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs8(const arr: TRangeArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.IDs(aAscending); end;
function TArray_IDs9(const arr: TIntegerArray; const ID: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs10(const arr: TDoubleArray; const ID: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs11(const arr: TStringArray; const ID: TIntegerArray): TStringArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs12(const arr: TCharArray; const ID: TIntegerArray): TCharArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs13(const arr: TBooleanArray; const ID: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs14(const arr: TPointArray; const ID: TIntegerArray): TPointArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs15(const arr: TBoxArray; const ID: TIntegerArray): TBoxArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs16(const arr: TRangeArray; const ID: TIntegerArray): TRangeArray; overload; cdecl; begin Result := arr.IDs(ID); end;
function TArray_IDs17(const arr: TIntegerArray; const ID: TIntegerArray; const item: Integer): TIntegerArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs18(const arr: TDoubleArray; const ID: TIntegerArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs19(const arr: TStringArray; const ID: TIntegerArray; const item: string): TStringArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs20(const arr: TCharArray; const ID: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs21(const arr: TBooleanArray; const ID: TIntegerArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs22(const arr: TPointArray; const ID: TIntegerArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs23(const arr: TBoxArray; const ID: TIntegerArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs24(const arr: TRangeArray; const ID: TIntegerArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := arr.IDs(ID, item); end;
function TArray_IDs25(const arr: TIntegerArray; const ID: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs26(const arr: TDoubleArray; const ID: TIntegerArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs27(const arr: TStringArray; const ID: TIntegerArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs28(const arr: TCharArray; const ID: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs29(const arr: TBooleanArray; const ID: TIntegerArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs30(const arr: TPointArray; const ID: TIntegerArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs31(const arr: TBoxArray; const ID: TIntegerArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;
function TArray_IDs32(const arr: TRangeArray; const ID: TIntegerArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.IDs(ID, items); end;

function TArray_Includes1(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes2(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes3(const arr: TStringArray; const item: string; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes4(const arr: TCharArray; const item: Char; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes6(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes7(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;
function TArray_Includes8(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Includes(item, index); end;

function TArray_Indexed1(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexed(aAscending); end;
function TArray_Indexed2(const arr: TDoubleArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexed(aAscending); end;
function TArray_Indexed3(const arr: TStringArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexed(aAscending); end;
function TArray_Indexed4(const arr: TCharArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexed(aAscending); end;
function TArray_Indexed5(const arr: TBooleanArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexed(aAscending); end;
function TArray_Indexed6(const arr: TPointArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexed(aAscending); end;
function TArray_Indexed7(const arr: TBoxArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexed(aAscending); end;
function TArray_Indexed8(const arr: TRangeArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexed(aAscending); end;

function TArray_Indexes1(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexes(aAscending); end;
function TArray_Indexes2(const arr: TDoubleArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexes(aAscending); end;
function TArray_Indexes3(const arr: TStringArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexes(aAscending); end;
function TArray_Indexes4(const arr: TCharArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexes(aAscending); end;
function TArray_Indexes5(const arr: TBooleanArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexes(aAscending); end;
function TArray_Indexes6(const arr: TPointArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexes(aAscending); end;
function TArray_Indexes7(const arr: TBoxArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexes(aAscending); end;
function TArray_Indexes8(const arr: TRangeArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indexes(aAscending); end;

function TArray_Indices1(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indices(aAscending); end;
function TArray_Indices2(const arr: TDoubleArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indices(aAscending); end;
function TArray_Indices3(const arr: TStringArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indices(aAscending); end;
function TArray_Indices4(const arr: TCharArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indices(aAscending); end;
function TArray_Indices5(const arr: TBooleanArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indices(aAscending); end;
function TArray_Indices6(const arr: TPointArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indices(aAscending); end;
function TArray_Indices7(const arr: TBoxArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indices(aAscending); end;
function TArray_Indices8(const arr: TRangeArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Indices(aAscending); end;

function TArray_Keep1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep2(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep3(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep4(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep5(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep6(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep7(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Keep(items, index); end;
function TArray_Keep8(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Keep(items, index); end;

function TArray_Kill1(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Kill; end;
function TArray_Kill2(var arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Kill; end;
function TArray_Kill3(var arr: TStringArray): Integer; overload; cdecl; begin Result := arr.Kill; end;
function TArray_Kill4(var arr: TCharArray): Integer; overload; cdecl; begin Result := arr.Kill; end;
function TArray_Kill5(var arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Kill; end;
function TArray_Kill6(var arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Kill; end;
function TArray_Kill7(var arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.Kill; end;
function TArray_Kill8(var arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.Kill; end;

function TArray_Last1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Last; end;
function TArray_Last2(const arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Last; end;
function TArray_Last3(const arr: TStringArray): Integer; overload; cdecl; begin Result := arr.Last; end;
function TArray_Last4(const arr: TCharArray): Integer; overload; cdecl; begin Result := arr.Last; end;
function TArray_Last5(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Last; end;
function TArray_Last6(const arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Last; end;
function TArray_Last7(const arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.Last; end;
function TArray_Last8(const arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.Last; end;
function TArray_Last9(const arr: TIntegerArray; const item: Integer): Integer; overload; cdecl; begin Result := arr.Last(item); end;
function TArray_Last10(const arr: TDoubleArray; const item: Double): Integer; overload; cdecl; begin Result := arr.Last(item); end;
function TArray_Last11(const arr: TStringArray; const item: string): Integer; overload; cdecl; begin Result := arr.Last(item); end;
function TArray_Last12(const arr: TCharArray; const item: Char): Integer; overload; cdecl; begin Result := arr.Last(item); end;
function TArray_Last13(const arr: TBooleanArray; const item: Boolean): Integer; overload; cdecl; begin Result := arr.Last(item); end;
function TArray_Last14(const arr: TPointArray; const item: TPoint): Integer; overload; cdecl; begin Result := arr.Last(item); end;
function TArray_Last15(const arr: TBoxArray; const item: TBox): Integer; overload; cdecl; begin Result := arr.Last(item); end;
function TArray_Last16(const arr: TRangeArray; const item: TRange): Integer; overload; cdecl; begin Result := arr.Last(item); end;
function TArray_Last17(const arr: TIntegerArray; const items: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Last(items); end;
function TArray_Last18(const arr: TDoubleArray; const items: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Last(items); end;
function TArray_Last19(const arr: TStringArray; const items: TStringArray): Integer; overload; cdecl; begin Result := arr.Last(items); end;
function TArray_Last20(const arr: TCharArray; const items: TCharArray): Integer; overload; cdecl; begin Result := arr.Last(items); end;
function TArray_Last21(const arr: TBooleanArray; const items: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Last(items); end;
function TArray_Last22(const arr: TPointArray; const items: TPointArray): Integer; overload; cdecl; begin Result := arr.Last(items); end;
function TArray_Last23(const arr: TBoxArray; const items: TBoxArray): Integer; overload; cdecl; begin Result := arr.Last(items); end;
function TArray_Last24(const arr: TRangeArray; const items: TRangeArray): Integer; overload; cdecl; begin Result := arr.Last(items); end;

function TArray_LeastCommon1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.LeastCommon; end;
function TArray_LeastCommon2(const arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.LeastCommon; end;
function TArray_LeastCommon3(const arr: TStringArray): string; overload; cdecl; begin Result := arr.LeastCommon; end;
function TArray_LeastCommon4(const arr: TCharArray): Char; overload; cdecl; begin Result := arr.LeastCommon; end;
function TArray_LeastCommon5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.LeastCommon; end;
function TArray_LeastCommon6(const arr: TPointArray): TPoint; overload; cdecl; begin Result := arr.LeastCommon; end;
function TArray_LeastCommon7(const arr: TBoxArray): TBox; overload; cdecl; begin Result := arr.LeastCommon; end;
function TArray_LeastCommon8(const arr: TRangeArray): TRange; overload; cdecl; begin Result := arr.LeastCommon; end;

function TArray_LeastFrequent1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent2(const arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent3(const arr: TStringArray): string; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent4(const arr: TCharArray): Char; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent6(const arr: TPointArray): TPoint; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent7(const arr: TBoxArray): TBox; overload; cdecl; begin Result := arr.LeastFrequent; end;
function TArray_LeastFrequent8(const arr: TRangeArray): TRange; overload; cdecl; begin Result := arr.LeastFrequent; end;

function TArray_Len1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len2(const arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len3(const arr: TStringArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len4(const arr: TCharArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len5(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len6(const arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len7(const arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.Len; end;
function TArray_Len8(const arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.Len; end;

function TArray_Loc1(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc2(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc3(const arr: TStringArray; const item: string; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc4(const arr: TCharArray; const item: Char; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc6(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc7(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc8(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(item, index); end;
function TArray_Loc9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc11(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc12(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc14(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;
function TArray_Loc16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Loc(items, index); end;

function TArray_Location1(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location2(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location3(const arr: TStringArray; const item: string; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location4(const arr: TCharArray; const item: Char; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location6(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location7(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location8(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(item, index); end;
function TArray_Location9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location11(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location12(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location14(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;
function TArray_Location16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647): Integer; overload; cdecl; begin Result := arr.Location(items, index); end;

function TArray_Locations1(const arr: TIntegerArray; const item: Integer; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations2(const arr: TDoubleArray; const item: Double; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations3(const arr: TStringArray; const item: string; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations4(const arr: TCharArray; const item: Char; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations6(const arr: TPointArray; const item: TPoint; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations7(const arr: TBoxArray; const item: TBox; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations8(const arr: TRangeArray; const item: TRange; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(item, index); end;
function TArray_Locations9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations11(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations12(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations14(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Locations(items, index); end;
function TArray_Locations17(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Locations; end;
function TArray_Locations18(const arr: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := arr.Locations; end;
function TArray_Locations19(const arr: TStringArray): TIntegerArray; overload; cdecl; begin Result := arr.Locations; end;
function TArray_Locations20(const arr: TCharArray): TIntegerArray; overload; cdecl; begin Result := arr.Locations; end;
function TArray_Locations21(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.Locations; end;
function TArray_Locations22(const arr: TPointArray): TIntegerArray; overload; cdecl; begin Result := arr.Locations; end;
function TArray_Locations23(const arr: TBoxArray): TIntegerArray; overload; cdecl; begin Result := arr.Locations; end;
function TArray_Locations24(const arr: TRangeArray): TIntegerArray; overload; cdecl; begin Result := arr.Locations; end;

function TArray_Mix1(var arr: TIntegerArray; const mixings: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(mixings); end;
function TArray_Mix2(var arr: TDoubleArray; const mixings: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(mixings); end;
function TArray_Mix3(var arr: TStringArray; const mixings: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(mixings); end;
function TArray_Mix4(var arr: TCharArray; const mixings: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(mixings); end;
function TArray_Mix5(var arr: TBooleanArray; const mixings: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(mixings); end;
function TArray_Mix6(var arr: TPointArray; const mixings: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(mixings); end;
function TArray_Mix7(var arr: TBoxArray; const mixings: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(mixings); end;
function TArray_Mix8(var arr: TRangeArray; const mixings: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Mix(mixings); end;

function TArray_Mixed1(const arr: TIntegerArray; const mixings: Integer = 1): TIntegerArray; overload; cdecl; begin Result := arr.Mixed(mixings); end;
function TArray_Mixed2(const arr: TDoubleArray; const mixings: Integer = 1): TDoubleArray; overload; cdecl; begin Result := arr.Mixed(mixings); end;
function TArray_Mixed3(const arr: TStringArray; const mixings: Integer = 1): TStringArray; overload; cdecl; begin Result := arr.Mixed(mixings); end;
function TArray_Mixed4(const arr: TCharArray; const mixings: Integer = 1): TCharArray; overload; cdecl; begin Result := arr.Mixed(mixings); end;
function TArray_Mixed5(const arr: TBooleanArray; const mixings: Integer = 1): TBooleanArray; overload; cdecl; begin Result := arr.Mixed(mixings); end;
function TArray_Mixed6(const arr: TPointArray; const mixings: Integer = 1): TPointArray; overload; cdecl; begin Result := arr.Mixed(mixings); end;
function TArray_Mixed7(const arr: TBoxArray; const mixings: Integer = 1): TBoxArray; overload; cdecl; begin Result := arr.Mixed(mixings); end;
function TArray_Mixed8(const arr: TRangeArray; const mixings: Integer = 1): TRangeArray; overload; cdecl; begin Result := arr.Mixed(mixings); end;

function TArray_MostCommon1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.MostCommon; end;
function TArray_MostCommon2(const arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.MostCommon; end;
function TArray_MostCommon3(const arr: TStringArray): string; overload; cdecl; begin Result := arr.MostCommon; end;
function TArray_MostCommon4(const arr: TCharArray): Char; overload; cdecl; begin Result := arr.MostCommon; end;
function TArray_MostCommon5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.MostCommon; end;
function TArray_MostCommon6(const arr: TPointArray): TPoint; overload; cdecl; begin Result := arr.MostCommon; end;
function TArray_MostCommon7(const arr: TBoxArray): TBox; overload; cdecl; begin Result := arr.MostCommon; end;
function TArray_MostCommon8(const arr: TRangeArray): TRange; overload; cdecl; begin Result := arr.MostCommon; end;

function TArray_MostFrequent1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent2(const arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent3(const arr: TStringArray): string; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent4(const arr: TCharArray): Char; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent6(const arr: TPointArray): TPoint; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent7(const arr: TBoxArray): TBox; overload; cdecl; begin Result := arr.MostFrequent; end;
function TArray_MostFrequent8(const arr: TRangeArray): TRange; overload; cdecl; begin Result := arr.MostFrequent; end;

function TArray_Next1(const arr: TIntegerArray; const index: Integer; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next2(const arr: TDoubleArray; const index: Integer; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next3(const arr: TStringArray; const index: Integer; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next4(const arr: TCharArray; const index: Integer; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next5(const arr: TBooleanArray; const index: Integer; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next6(const arr: TPointArray; const index: Integer; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next7(const arr: TBoxArray; const index: Integer; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Next(index, count); end;
function TArray_Next8(const arr: TRangeArray; const index: Integer; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Next(index, count); end;

function TArray_Occurs1(const arr: TIntegerArray; const Item: Integer; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Occurs(item, occurrence); end;
function TArray_Occurs2(const arr: TDoubleArray; const Item: Double; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Occurs(item, occurrence); end;
function TArray_Occurs3(const arr: TStringArray; const Item: string; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Occurs(item, occurrence); end;
function TArray_Occurs4(const arr: TCharArray; const Item: Char; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Occurs(item, occurrence); end;
function TArray_Occurs5(const arr: TBooleanArray; const Item: Boolean; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Occurs(item, occurrence); end;
function TArray_Occurs6(const arr: TPointArray; const Item: TPoint; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Occurs(item, occurrence); end;
function TArray_Occurs7(const arr: TBoxArray; const Item: TBox; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Occurs(item, occurrence); end;
function TArray_Occurs8(const arr: TRangeArray; const Item: TRange; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Occurs(item, occurrence); end;

function TArray_Overlay1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer; const init: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Overlay(items, index, init); end;
function TArray_Overlay2(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer; const init: Double): TDoubleArray; overload; cdecl; begin Result := arr.Overlay(items, index, init); end;
function TArray_Overlay3(const arr: TStringArray; const items: TStringArray; const index: Integer; const init: string): TStringArray; overload; cdecl; begin Result := arr.Overlay(items, index, init); end;
function TArray_Overlay4(const arr: TCharArray; const items: TCharArray; const index: Integer; const init: Char): TCharArray; overload; cdecl; begin Result := arr.Overlay(items, index, init); end;
function TArray_Overlay5(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer; const init: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Overlay(items, index, init); end;
function TArray_Overlay6(const arr: TPointArray; const items: TPointArray; const index: Integer; const init: TPoint): TPointArray; overload; cdecl; begin Result := arr.Overlay(items, index, init); end;
function TArray_Overlay7(const arr: TBoxArray; const items: TBoxArray; const index: Integer; const init: TBox): TBoxArray; overload; cdecl; begin Result := arr.Overlay(items, index, init); end;
function TArray_Overlay8(const arr: TRangeArray; const items: TRangeArray; const index: Integer; const init: TRange): TRangeArray; overload; cdecl; begin Result := arr.Overlay(items, index, init); end;
function TArray_Overlay9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Overlay(items, index); end;
function TArray_Overlay10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Overlay(items, index); end;
function TArray_Overlay11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Overlay(items, index); end;
function TArray_Overlay12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Overlay(items, index); end;
function TArray_Overlay13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Overlay(items, index); end;
function TArray_Overlay14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Overlay(items, index); end;
function TArray_Overlay15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Overlay(items, index); end;
function TArray_Overlay16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Overlay(items, index); end;

function TArray_Oversize1(const arr: TIntegerArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize2(const arr: TDoubleArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize3(const arr: TStringArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize4(const arr: TCharArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize5(const arr: TBooleanArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize6(const arr: TPointArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize7(const arr: TBoxArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;
function TArray_Oversize8(const arr: TRangeArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Oversize(limit); end;

function TArray_Partition1(const arr: TIntegerArray; const pSize: Integer): T2DIntegerArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition2(const arr: TDoubleArray; const pSize: Integer): T2DDoubleArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition3(const arr: TStringArray; const pSize: Integer): T2DStringArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition4(const arr: TCharArray; const pSize: Integer): T2DCharArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition5(const arr: TBooleanArray; const pSize: Integer): T2DBooleanArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition6(const arr: TPointArray; const pSize: Integer): T2DPointArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition7(const arr: TBoxArray; const pSize: Integer): T2DBoxArray; overload; cdecl; begin Result := arr.Partition(pSize); end;
function TArray_Partition8(const arr: TRangeArray; const pSize: Integer): T2DRangeArray; overload; cdecl; begin Result := arr.Partition(pSize); end;

function TArray_Patch1(var arr: TIntegerArray; const index: Integer; const items: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Patch(index, items); end;
function TArray_Patch2(var arr: TDoubleArray; const index: Integer; const items: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Patch(index, items); end;
function TArray_Patch3(var arr: TStringArray; const index: Integer; const items: TStringArray): Integer; overload; cdecl; begin Result := arr.Patch(index, items); end;
function TArray_Patch4(var arr: TCharArray; const index: Integer; const items: TCharArray): Integer; overload; cdecl; begin Result := arr.Patch(index, items); end;
function TArray_Patch5(var arr: TBooleanArray; const index: Integer; const items: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Patch(index, items); end;
function TArray_Patch6(var arr: TPointArray; const index: Integer; const items: TPointArray): Integer; overload; cdecl; begin Result := arr.Patch(index, items); end;
function TArray_Patch7(var arr: TBoxArray; const index: Integer; const items: TBoxArray): Integer; overload; cdecl; begin Result := arr.Patch(index, items); end;
function TArray_Patch8(var arr: TRangeArray; const index: Integer; const items: TRangeArray): Integer; overload; cdecl; begin Result := arr.Patch(index, items); end;

function TArray_Pick1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Pick(items, index); end;
function TArray_Pick2(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TDoubleArray; overload; cdecl; begin Result := arr.Pick(items, index); end;
function TArray_Pick3(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TStringArray; overload; cdecl; begin Result := arr.Pick(items, index); end;
function TArray_Pick4(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TCharArray; overload; cdecl; begin Result := arr.Pick(items, index); end;
function TArray_Pick5(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TBooleanArray; overload; cdecl; begin Result := arr.Pick(items, index); end;
function TArray_Pick6(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TPointArray; overload; cdecl; begin Result := arr.Pick(items, index); end;
function TArray_Pick7(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TBoxArray; overload; cdecl; begin Result := arr.Pick(items, index); end;
function TArray_Pick8(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Pick(items, index); end;

function TArray_Pop1(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop2(var arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop3(var arr: TStringArray): string; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop4(var arr: TCharArray): Char; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop5(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop6(var arr: TPointArray): TPoint; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop7(var arr: TBoxArray): TBox; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop8(var arr: TRangeArray): TRange; overload; cdecl; begin Result := arr.Pop; end;
function TArray_Pop9(var arr: TIntegerArray; const null: Integer): Integer; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop10(var arr: TDoubleArray; const null: Double): Double; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop11(var arr: TStringArray; const null: string): string; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop12(var arr: TCharArray; const null: Char): Char; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop13(var arr: TBooleanArray; const null: Boolean): Boolean; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop14(var arr: TPointArray; const null: TPoint): TPoint; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop15(var arr: TBoxArray; const null: TBox): TBox; overload; cdecl; begin Result := arr.Pop(null); end;
function TArray_Pop16(var arr: TRangeArray; const null: TRange): TRange; overload; cdecl; begin Result := arr.Pop(null); end;

function TArray_Populate1(var arr: TIntegerArray; const items: TIntegerArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate2(var arr: TDoubleArray; const items: TDoubleArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate3(var arr: TStringArray; const items: TStringArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate4(var arr: TCharArray; const items: TCharArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate5(var arr: TBooleanArray; const items: TBooleanArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate6(var arr: TPointArray; const items: TPointArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate7(var arr: TBoxArray; const items: TBoxArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate8(var arr: TRangeArray; const items: TRangeArray; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(items, times); end;
function TArray_Populate9(var arr: TIntegerArray; const item: Integer; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate10(var arr: TDoubleArray; const item: Double; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate11(var arr: TStringArray; const item: string; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate12(var arr: TCharArray; const item: Char; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate13(var arr: TBooleanArray; const item: Boolean; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate14(var arr: TPointArray; const item: TPoint; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate15(var arr: TBoxArray; const item: TBox; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;
function TArray_Populate16(var arr: TRangeArray; const item: TRange; const times: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Populate(item, times); end;

function TArray_Populated1(const arr: TIntegerArray; const population: TRange): Boolean; overload; cdecl; begin Result := arr.Populated(population); end;
function TArray_Populated2(const arr: TDoubleArray; const population: TRange): Boolean; overload; cdecl; begin Result := arr.Populated(population); end;
function TArray_Populated3(const arr: TStringArray; const population: TRange): Boolean; overload; cdecl; begin Result := arr.Populated(population); end;
function TArray_Populated4(const arr: TCharArray; const population: TRange): Boolean; overload; cdecl; begin Result := arr.Populated(population); end;
function TArray_Populated5(const arr: TBooleanArray; const population: TRange): Boolean; overload; cdecl; begin Result := arr.Populated(population); end;
function TArray_Populated6(const arr: TPointArray; const population: TRange): Boolean; overload; cdecl; begin Result := arr.Populated(population); end;
function TArray_Populated7(const arr: TBoxArray; const population: TRange): Boolean; overload; cdecl; begin Result := arr.Populated(population); end;
function TArray_Populated8(const arr: TRangeArray; const population: TRange): Boolean; overload; cdecl; begin Result := arr.Populated(population); end;
function TArray_Populated9(const arr: TIntegerArray; const populationMin: Integer = 1; const populationMax: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Populated(populationMin, populationMax); end;
function TArray_Populated10(const arr: TDoubleArray; const populationMin: Integer = 1; const populationMax: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Populated(populationMin, populationMax); end;
function TArray_Populated11(const arr: TStringArray; const populationMin: Integer = 1; const populationMax: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Populated(populationMin, populationMax); end;
function TArray_Populated12(const arr: TCharArray; const populationMin: Integer = 1; const populationMax: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Populated(populationMin, populationMax); end;
function TArray_Populated13(const arr: TBooleanArray; const populationMin: Integer = 1; const populationMax: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Populated(populationMin, populationMax); end;
function TArray_Populated14(const arr: TPointArray; const populationMin: Integer = 1; const populationMax: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Populated(populationMin, populationMax); end;
function TArray_Populated15(const arr: TBoxArray; const populationMin: Integer = 1; const populationMax: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Populated(populationMin, populationMax); end;
function TArray_Populated16(const arr: TRangeArray; const populationMin: Integer = 1; const populationMax: Integer = 2147483647): Boolean; overload; cdecl; begin Result := arr.Populated(populationMin, populationMax); end;

function TArray_Pos1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos3(const arr: TStringArray; const item: string; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos4(const arr: TCharArray; const item: Char; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(item, index); end;
function TArray_Pos9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;
function TArray_Pos16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Pos(items, index); end;

function TArray_Position1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position3(const arr: TStringArray; const item: string; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position4(const arr: TCharArray; const item: Char; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(item, index); end;
function TArray_Position9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;
function TArray_Position16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): Integer; overload; cdecl; begin Result := arr.Position(items, index); end;

function TArray_Positions1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions2(const arr: TDoubleArray; const item: Double; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions3(const arr: TStringArray; const item: string; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions4(const arr: TCharArray; const item: Char; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions6(const arr: TPointArray; const item: TPoint; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions7(const arr: TBoxArray; const item: TBox; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions8(const arr: TRangeArray; const item: TRange; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(item, index); end;
function TArray_Positions9(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions10(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions11(const arr: TStringArray; const items: TStringArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions12(const arr: TCharArray; const items: TCharArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions13(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions14(const arr: TPointArray; const items: TPointArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions15(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions16(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0): TIntegerArray; overload; cdecl; begin Result := arr.Positions(items, index); end;
function TArray_Positions17(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Positions; end;
function TArray_Positions18(const arr: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := arr.Positions; end;
function TArray_Positions19(const arr: TStringArray): TIntegerArray; overload; cdecl; begin Result := arr.Positions; end;
function TArray_Positions20(const arr: TCharArray): TIntegerArray; overload; cdecl; begin Result := arr.Positions; end;
function TArray_Positions21(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.Positions; end;
function TArray_Positions22(const arr: TPointArray): TIntegerArray; overload; cdecl; begin Result := arr.Positions; end;
function TArray_Positions23(const arr: TBoxArray): TIntegerArray; overload; cdecl; begin Result := arr.Positions; end;
function TArray_Positions24(const arr: TRangeArray): TIntegerArray; overload; cdecl; begin Result := arr.Positions; end;

function TArray_Presence1(const arr: TIntegerArray; const Item: Integer; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Presence(item, occurrence); end;
function TArray_Presence2(const arr: TDoubleArray; const Item: Double; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Presence(item, occurrence); end;
function TArray_Presence3(const arr: TStringArray; const Item: string; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Presence(item, occurrence); end;
function TArray_Presence4(const arr: TCharArray; const Item: Char; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Presence(item, occurrence); end;
function TArray_Presence5(const arr: TBooleanArray; const Item: Boolean; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Presence(item, occurrence); end;
function TArray_Presence6(const arr: TPointArray; const Item: TPoint; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Presence(item, occurrence); end;
function TArray_Presence7(const arr: TBoxArray; const Item: TBox; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Presence(item, occurrence); end;
function TArray_Presence8(const arr: TRangeArray; const Item: TRange; const occurrence: Integer = 1): Boolean; overload; cdecl; begin Result := arr.Presence(item, occurrence); end;

function TArray_Previous1(const arr: TIntegerArray; const index: Integer; const count: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous2(const arr: TDoubleArray; const index: Integer; const count: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous3(const arr: TStringArray; const index: Integer; const count: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous4(const arr: TCharArray; const index: Integer; const count: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous5(const arr: TBooleanArray; const index: Integer; const count: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous6(const arr: TPointArray; const index: Integer; const count: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous7(const arr: TBoxArray; const index: Integer; const count: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Previous(index, count); end;
function TArray_Previous8(const arr: TRangeArray; const index: Integer; const count: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Previous(index, count); end;

function TArray_Pull1(var arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Pull; end;
function TArray_Pull2(var arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Pull; end;
function TArray_Pull3(var arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Pull; end;
function TArray_Pull4(var arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Pull; end;
function TArray_Pull5(var arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Pull; end;
function TArray_Pull6(var arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Pull; end;
function TArray_Pull7(var arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Pull; end;
function TArray_Pull8(var arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Pull; end;

function TArray_Put1(const arr: TIntegerArray; const ID: TIntegerArray; const item: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put2(const arr: TDoubleArray; const ID: TIntegerArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put3(const arr: TStringArray; const ID: TIntegerArray; const item: string): TStringArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put4(const arr: TCharArray; const ID: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put5(const arr: TBooleanArray; const ID: TIntegerArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put6(const arr: TPointArray; const ID: TIntegerArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put7(const arr: TBoxArray; const ID: TIntegerArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put8(const arr: TRangeArray; const ID: TIntegerArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := arr.Put(ID, item); end;
function TArray_Put9(const arr: TIntegerArray; const ID: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put10(const arr: TDoubleArray; const ID: TIntegerArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put11(const arr: TStringArray; const ID: TIntegerArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put12(const arr: TCharArray; const ID: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put13(const arr: TBooleanArray; const ID: TIntegerArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put14(const arr: TPointArray; const ID: TIntegerArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put15(const arr: TBoxArray; const ID: TIntegerArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put16(const arr: TRangeArray; const ID: TIntegerArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Put(ID, items); end;
function TArray_Put17(const arr: TIntegerArray; const index: Integer; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put18(const arr: TDoubleArray; const index: Integer; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put19(const arr: TStringArray; const index: Integer; const items: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put20(const arr: TCharArray; const index: Integer; const items: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put21(const arr: TBooleanArray; const index: Integer; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put22(const arr: TPointArray; const index: Integer; const items: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put23(const arr: TBoxArray; const index: Integer; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Put(index, items); end;
function TArray_Put24(const arr: TRangeArray; const index: Integer; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Put(index, items); end; 

function TArray_Push1(const arr: TIntegerArray; const item: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push2(const arr: TDoubleArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push3(const arr: TStringArray; const item: string): TStringArray; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push4(const arr: TCharArray; const item: Char): TCharArray; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push5(const arr: TBooleanArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push6(const arr: TPointArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push7(const arr: TBoxArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push8(const arr: TRangeArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := arr.Push(item); end;
function TArray_Push9(const arr: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push10(const arr: TDoubleArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push11(const arr: TStringArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push12(const arr: TCharArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push13(const arr: TBooleanArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push14(const arr: TPointArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push15(const arr: TBoxArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Push(items); end;
function TArray_Push16(const arr: TRangeArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Push(items); end;

function TArray_Randomized1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Randomized; end;
function TArray_Randomized2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Randomized; end;
function TArray_Randomized3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Randomized; end;
function TArray_Randomized4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Randomized; end;
function TArray_Randomized5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Randomized; end;
function TArray_Randomized6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Randomized; end;
function TArray_Randomized7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Randomized; end;
function TArray_Randomized8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Randomized; end;

function TArray_Range1(const arr: TIntegerArray; const subArray: TIntegerArray; const index: Integer = 0): TRange; overload; cdecl; begin Result := arr.Range(subArray, index); end;
function TArray_Range2(const arr: TDoubleArray; const subArray: TDoubleArray; const index: Integer = 0): TRange; overload; cdecl; begin Result := arr.Range(subArray, index); end;
function TArray_Range3(const arr: TStringArray; const subArray: TStringArray; const index: Integer = 0): TRange; overload; cdecl; begin Result := arr.Range(subArray, index); end;
function TArray_Range4(const arr: TCharArray; const subArray: TCharArray; const index: Integer = 0): TRange; overload; cdecl; begin Result := arr.Range(subArray, index); end;
function TArray_Range5(const arr: TBooleanArray; const subArray: TBooleanArray; const index: Integer = 0): TRange; overload; cdecl; begin Result := arr.Range(subArray, index); end;
function TArray_Range6(const arr: TPointArray; const subArray: TPointArray; const index: Integer = 0): TRange; overload; cdecl; begin Result := arr.Range(subArray, index); end;
function TArray_Range7(const arr: TBoxArray; const subArray: TBoxArray; const index: Integer = 0): TRange; overload; cdecl; begin Result := arr.Range(subArray, index); end;
function TArray_Range8(const arr: TRangeArray; const subArray: TRangeArray; const index: Integer = 0): TRange; overload; cdecl; begin Result := arr.Range(subArray, index); end;

function TArray_Ranges1(const arr: TIntegerArray; const subArray: TIntegerArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Ranges(subArray, index); end;
function TArray_Ranges2(const arr: TDoubleArray; const subArray: TDoubleArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Ranges(subArray, index); end;
function TArray_Ranges3(const arr: TStringArray; const subArray: TStringArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Ranges(subArray, index); end;
function TArray_Ranges4(const arr: TCharArray; const subArray: TCharArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Ranges(subArray, index); end;
function TArray_Ranges5(const arr: TBooleanArray; const subArray: TBooleanArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Ranges(subArray, index); end;
function TArray_Ranges6(const arr: TPointArray; const subArray: TPointArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Ranges(subArray, index); end;
function TArray_Ranges7(const arr: TBoxArray; const subArray: TBoxArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Ranges(subArray, index); end;
function TArray_Ranges8(const arr: TRangeArray; const subArray: TRangeArray; const index: Integer = 0): TRangeArray; overload; cdecl; begin Result := arr.Ranges(subArray, index); end;

function TArray_Recreate1(var arr: TIntegerArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function TArray_Recreate2(var arr: TDoubleArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function TArray_Recreate3(var arr: TStringArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function TArray_Recreate4(var arr: TCharArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function TArray_Recreate5(var arr: TBooleanArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function TArray_Recreate6(var arr: TPointArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function TArray_Recreate7(var arr: TBoxArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function TArray_Recreate8(var arr: TRangeArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;

function TArray_Reject1(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Reject(items, index); end;
function TArray_Reject2(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 2147483647): TDoubleArray; overload; cdecl; begin Result := arr.Reject(items, index); end;
function TArray_Reject3(const arr: TStringArray; const items: TStringArray; const index: Integer = 2147483647): TStringArray; overload; cdecl; begin Result := arr.Reject(items, index); end;
function TArray_Reject4(const arr: TCharArray; const items: TCharArray; const index: Integer = 2147483647): TCharArray; overload; cdecl; begin Result := arr.Reject(items, index); end;
function TArray_Reject5(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 2147483647): TBooleanArray; overload; cdecl; begin Result := arr.Reject(items, index); end;
function TArray_Reject6(const arr: TPointArray; const items: TPointArray; const index: Integer = 2147483647): TPointArray; overload; cdecl; begin Result := arr.Reject(items, index); end;
function TArray_Reject7(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 2147483647): TBoxArray; overload; cdecl; begin Result := arr.Reject(items, index); end;
function TArray_Reject8(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Reject(items, index); end;

function TArray_Remove1(const arr: TIntegerArray; const item: Integer; const index: Integer = 0; const all: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove2(const arr: TDoubleArray; const item: Double; const index: Integer = 0; const all: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove3(const arr: TStringArray; const item: string; const index: Integer = 0; const all: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove4(const arr: TCharArray; const item: Char; const index: Integer = 0; const all: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove5(const arr: TBooleanArray; const item: Boolean; const index: Integer = 0; const all: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove6(const arr: TPointArray; const item: TPoint; const index: Integer = 0; const all: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove7(const arr: TBoxArray; const item: TBox; const index: Integer = 0; const all: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove8(const arr: TRangeArray; const item: TRange; const index: Integer = 0; const all: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Remove(item, index, all); end;
function TArray_Remove9(const arr: TIntegerArray; const item: Integer; const all: Boolean): TIntegerArray; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove10(const arr: TDoubleArray; const item: Double; const all: Boolean): TDoubleArray; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove11(const arr: TStringArray; const item: string; const all: Boolean): TStringArray; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove12(const arr: TCharArray; const item: Char; const all: Boolean): TCharArray; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove13(const arr: TBooleanArray; const item: Boolean; const all: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove14(const arr: TPointArray; const item: TPoint; const all: Boolean): TPointArray; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove15(const arr: TBoxArray; const item: TBox; const all: Boolean): TBoxArray; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove16(const arr: TRangeArray; const item: TRange; const all: Boolean): TRangeArray; overload; cdecl; begin Result := arr.Remove(item, all); end;
function TArray_Remove17(const arr: TIntegerArray; const items: TIntegerArray; const index: Integer = 0; const all: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove18(const arr: TDoubleArray; const items: TDoubleArray; const index: Integer = 0; const all: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove19(const arr: TStringArray; const items: TStringArray; const index: Integer = 0; const all: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove20(const arr: TCharArray; const items: TCharArray; const index: Integer = 0; const all: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove21(const arr: TBooleanArray; const items: TBooleanArray; const index: Integer = 0; const all: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove22(const arr: TPointArray; const items: TPointArray; const index: Integer = 0; const all: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove23(const arr: TBoxArray; const items: TBoxArray; const index: Integer = 0; const all: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove24(const arr: TRangeArray; const items: TRangeArray; const index: Integer = 0; const all: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Remove(items, index, all); end;
function TArray_Remove25(const arr: TIntegerArray; const items: TIntegerArray; const all: Boolean): TIntegerArray; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove26(const arr: TDoubleArray; const items: TDoubleArray; const all: Boolean): TDoubleArray; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove27(const arr: TStringArray; const items: TStringArray; const all: Boolean): TStringArray; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove28(const arr: TCharArray; const items: TCharArray; const all: Boolean): TCharArray; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove29(const arr: TBooleanArray; const items: TBooleanArray; const all: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove30(const arr: TPointArray; const items: TPointArray; const all: Boolean): TPointArray; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove31(const arr: TBoxArray; const items: TBoxArray; const all: Boolean): TBoxArray; overload; cdecl; begin Result := arr.Remove(items, all); end;
function TArray_Remove32(const arr: TRangeArray; const items: TRangeArray; const all: Boolean): TRangeArray; overload; cdecl; begin Result := arr.Remove(items, all); end;

function TArray_Reposition1(var arr: TIntegerArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Reposition(oldIndex, newIndex); end;
function TArray_Reposition2(var arr: TDoubleArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Reposition(oldIndex, newIndex); end;
function TArray_Reposition3(var arr: TStringArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Reposition(oldIndex, newIndex); end;
function TArray_Reposition4(var arr: TCharArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Reposition(oldIndex, newIndex); end;
function TArray_Reposition5(var arr: TBooleanArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Reposition(oldIndex, newIndex); end;
function TArray_Reposition6(var arr: TPointArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Reposition(oldIndex, newIndex); end;
function TArray_Reposition7(var arr: TBoxArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Reposition(oldIndex, newIndex); end;
function TArray_Reposition8(var arr: TRangeArray; oldIndex, newIndex: Integer): Boolean; overload; cdecl; begin Result := arr.Reposition(oldIndex, newIndex); end;

function TArray_Reset1(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Reset; end;
function TArray_Reset2(var arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Reset; end;
function TArray_Reset3(var arr: TStringArray): Integer; overload; cdecl; begin Result := arr.Reset; end;
function TArray_Reset4(var arr: TCharArray): Integer; overload; cdecl; begin Result := arr.Reset; end;
function TArray_Reset5(var arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Reset; end;
function TArray_Reset6(var arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Reset; end;
function TArray_Reset7(var arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.Reset; end;
function TArray_Reset8(var arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.Reset; end;

function TArray_Resize1(var arr: TIntegerArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize2(var arr: TDoubleArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize3(var arr: TStringArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize4(var arr: TCharArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize5(var arr: TBooleanArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize6(var arr: TPointArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize7(var arr: TBoxArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize8(var arr: TRangeArray; const aChange: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange); end;
function TArray_Resize9(var arr: TIntegerArray; const aChange: Integer; const null: Integer): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize10(var arr: TDoubleArray; const aChange: Integer; const null: Double): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize11(var arr: TStringArray; const aChange: Integer; const null: string): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize12(var arr: TCharArray; const aChange: Integer; const null: Char): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize13(var arr: TBooleanArray; const aChange: Integer; const null: Boolean): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize14(var arr: TPointArray; const aChange: Integer; const null: TPoint): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize15(var arr: TBoxArray; const aChange: Integer; const null: TBox): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;
function TArray_Resize16(var arr: TRangeArray; const aChange: Integer; const null: TRange): Integer; overload; cdecl; begin Result := arr.Resize(aChange, null); end;

function TArray_Reverse1(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse2(var arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse3(var arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse4(var arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse5(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse6(var arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse7(var arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;
function TArray_Reverse8(var arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Reverse; end;

function TArray_Reversed1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Reversed; end;
function TArray_Reversed8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Reversed; end;

function TArray_Scan1(const arr: TIntegerArray; const ID: TRange; const item: Integer; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan2(const arr: TDoubleArray; const ID: TRange; const item: Double; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan3(const arr: TStringArray; const ID: TRange; const item: string; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan4(const arr: TCharArray; const ID: TRange; const item: Char; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan5(const arr: TBooleanArray; const ID: TRange; const item: Boolean; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan6(const arr: TPointArray; const ID: TRange; const item: TPoint; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan7(const arr: TBoxArray; const ID: TRange; const item: TBox; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan8(const arr: TRangeArray; const ID: TRange; const item: TRange; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan9(const arr: TIntegerArray; const ID: TIntegerArray; const item: Integer; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan10(const arr: TDoubleArray; const ID: TIntegerArray; const item: Double; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan11(const arr: TStringArray; const ID: TIntegerArray; const item: string; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan12(const arr: TCharArray; const ID: TIntegerArray; const item: Char; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan13(const arr: TBooleanArray; const ID: TIntegerArray; const item: Boolean; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan14(const arr: TPointArray; const ID: TIntegerArray; const item: TPoint; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan15(const arr: TBoxArray; const ID: TIntegerArray; const item: TBox; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan16(const arr: TRangeArray; const ID: TIntegerArray; const item: TRange; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, item, limit); end;
function TArray_Scan17(const arr: TIntegerArray; const ID: TRange; const items: TIntegerArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan18(const arr: TDoubleArray; const ID: TRange; const items: TDoubleArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan19(const arr: TStringArray; const ID: TRange; const items: TStringArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan20(const arr: TCharArray; const ID: TRange; const items: TCharArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan21(const arr: TBooleanArray; const ID: TRange; const items: TBooleanArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan22(const arr: TPointArray; const ID: TRange; const items: TPointArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan23(const arr: TBoxArray; const ID: TRange; const items: TBoxArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan24(const arr: TRangeArray; const ID: TRange; const items: TRangeArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan25(const arr: TIntegerArray; const ID: TIntegerArray; const items: TIntegerArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan26(const arr: TDoubleArray; const ID: TIntegerArray; const items: TDoubleArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan27(const arr: TStringArray; const ID: TIntegerArray; const items: TStringArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan28(const arr: TCharArray; const ID: TIntegerArray; const items: TCharArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan29(const arr: TBooleanArray; const ID: TIntegerArray; const items: TBooleanArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan30(const arr: TPointArray; const ID: TIntegerArray; const items: TPointArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan31(const arr: TBoxArray; const ID: TIntegerArray; const items: TBoxArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;
function TArray_Scan32(const arr: TRangeArray; const ID: TIntegerArray; const items: TRangeArray; const limit: Integer = 2147483647): TIntegerArray; overload; cdecl; begin Result := arr.Scan(ID, items, limit); end;

function TArray_Scramble1(const arr: TIntegerArray; const Swaps: Integer = -1): TIntegerArray; overload; cdecl; begin Result := arr.Scramble(Swaps); end;
function TArray_Scramble2(const arr: TDoubleArray; const Swaps: Integer = -1): TDoubleArray; overload; cdecl; begin Result := arr.Scramble(Swaps); end;
function TArray_Scramble3(const arr: TStringArray; const Swaps: Integer = -1): TStringArray; overload; cdecl; begin Result := arr.Scramble(Swaps); end;
function TArray_Scramble4(const arr: TCharArray; const Swaps: Integer = -1): TCharArray; overload; cdecl; begin Result := arr.Scramble(Swaps); end;
function TArray_Scramble5(const arr: TBooleanArray; const Swaps: Integer = -1): TBooleanArray; overload; cdecl; begin Result := arr.Scramble(Swaps); end;
function TArray_Scramble6(const arr: TPointArray; const Swaps: Integer = -1): TPointArray; overload; cdecl; begin Result := arr.Scramble(Swaps); end;
function TArray_Scramble7(const arr: TBoxArray; const Swaps: Integer = -1): TBoxArray; overload; cdecl; begin Result := arr.Scramble(Swaps); end;
function TArray_Scramble8(const arr: TRangeArray; const Swaps: Integer = -1): TRangeArray; overload; cdecl; begin Result := arr.Scramble(Swaps); end;

function TArray_Shake1(const arr: TIntegerArray; const shakes: Integer = 1): TIntegerArray; overload; cdecl; begin Result := arr.Shake(shakes); end;
function TArray_Shake2(const arr: TDoubleArray; const shakes: Integer = 1): TDoubleArray; overload; cdecl; begin Result := arr.Shake(shakes); end;
function TArray_Shake3(const arr: TStringArray; const shakes: Integer = 1): TStringArray; overload; cdecl; begin Result := arr.Shake(shakes); end;
function TArray_Shake4(const arr: TCharArray; const shakes: Integer = 1): TCharArray; overload; cdecl; begin Result := arr.Shake(shakes); end;
function TArray_Shake5(const arr: TBooleanArray; const shakes: Integer = 1): TBooleanArray; overload; cdecl; begin Result := arr.Shake(shakes); end;
function TArray_Shake6(const arr: TPointArray; const shakes: Integer = 1): TPointArray; overload; cdecl; begin Result := arr.Shake(shakes); end;
function TArray_Shake7(const arr: TBoxArray; const shakes: Integer = 1): TBoxArray; overload; cdecl; begin Result := arr.Shake(shakes); end;
function TArray_Shake8(const arr: TRangeArray; const shakes: Integer = 1): TRangeArray; overload; cdecl; begin Result := arr.Shake(shakes); end;

function TArray_Shift1(var arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift2(var arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift3(var arr: TStringArray): string; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift4(var arr: TCharArray): Char; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift5(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift6(var arr: TPointArray): TPoint; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift7(var arr: TBoxArray): TBox; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift8(var arr: TRangeArray): TRange; overload; cdecl; begin Result := arr.Shift; end;
function TArray_Shift9(var arr: TIntegerArray; const sCount: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift10(var arr: TDoubleArray; const sCount: Integer): TDoubleArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift11(var arr: TStringArray; const sCount: Integer): TStringArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift12(var arr: TCharArray; const sCount: Integer): TCharArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift13(var arr: TBooleanArray; const sCount: Integer): TBooleanArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift14(var arr: TPointArray; const sCount: Integer): TPointArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift15(var arr: TBoxArray; const sCount: Integer): TBoxArray; overload; cdecl; begin Result := arr.Shift(sCount); end;
function TArray_Shift16(var arr: TRangeArray; const sCount: Integer): TRangeArray; overload; cdecl; begin Result := arr.Shift(sCount); end;

function TArray_Shuffle1(const arr: TIntegerArray; const shuffles: Integer = 1): TIntegerArray; overload; cdecl; begin Result := arr.Shuffle(shuffles); end;
function TArray_Shuffle2(const arr: TDoubleArray; const shuffles: Integer = 1): TDoubleArray; overload; cdecl; begin Result := arr.Shuffle(shuffles); end;
function TArray_Shuffle3(const arr: TStringArray; const shuffles: Integer = 1): TStringArray; overload; cdecl; begin Result := arr.Shuffle(shuffles); end;
function TArray_Shuffle4(const arr: TCharArray; const shuffles: Integer = 1): TCharArray; overload; cdecl; begin Result := arr.Shuffle(shuffles); end;
function TArray_Shuffle5(const arr: TBooleanArray; const shuffles: Integer = 1): TBooleanArray; overload; cdecl; begin Result := arr.Shuffle(shuffles); end;
function TArray_Shuffle6(const arr: TPointArray; const shuffles: Integer = 1): TPointArray; overload; cdecl; begin Result := arr.Shuffle(shuffles); end;
function TArray_Shuffle7(const arr: TBoxArray; const shuffles: Integer = 1): TBoxArray; overload; cdecl; begin Result := arr.Shuffle(shuffles); end;
function TArray_Shuffle8(const arr: TRangeArray; const shuffles: Integer = 1): TRangeArray; overload; cdecl; begin Result := arr.Shuffle(shuffles); end;

function TArray_Size1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size2(const arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size3(const arr: TStringArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size4(const arr: TCharArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size5(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size6(const arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size7(const arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size8(const arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.Size; end;
function TArray_Size9(const arr: TIntegerArray; const aSize: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size10(const arr: TDoubleArray; const aSize: Integer): TDoubleArray; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size11(const arr: TStringArray; const aSize: Integer): TStringArray; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size12(const arr: TCharArray; const aSize: Integer): TCharArray; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size13(const arr: TBooleanArray; const aSize: Integer): TBooleanArray; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size14(const arr: TPointArray; const aSize: Integer): TPointArray; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size15(const arr: TBoxArray; const aSize: Integer): TBoxArray; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size16(const arr: TRangeArray; const aSize: Integer): TRangeArray; overload; cdecl; begin Result := arr.Size(aSize); end;
function TArray_Size17(const arr: TIntegerArray; const aSize: Integer; const null: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Size(aSize, null); end;
function TArray_Size18(const arr: TDoubleArray; const aSize: Integer; const null: Double): TDoubleArray; overload; cdecl; begin Result := arr.Size(aSize, null); end;
function TArray_Size19(const arr: TStringArray; const aSize: Integer; const null: string): TStringArray; overload; cdecl; begin Result := arr.Size(aSize, null); end;
function TArray_Size20(const arr: TCharArray; const aSize: Integer; const null: Char): TCharArray; overload; cdecl; begin Result := arr.Size(aSize, null); end;
function TArray_Size21(const arr: TBooleanArray; const aSize: Integer; const null: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Size(aSize, null); end;
function TArray_Size22(const arr: TPointArray; const aSize: Integer; const null: TPoint): TPointArray; overload; cdecl; begin Result := arr.Size(aSize, null); end;
function TArray_Size23(const arr: TBoxArray; const aSize: Integer; const null: TBox): TBoxArray; overload; cdecl; begin Result := arr.Size(aSize, null); end;
function TArray_Size24(const arr: TRangeArray; const aSize: Integer; const null: TRange): TRangeArray; overload; cdecl; begin Result := arr.Size(aSize, null); end;

function TArray_SizeBetween1(const arr: TIntegerArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween2(const arr: TDoubleArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween3(const arr: TStringArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween4(const arr: TCharArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween5(const arr: TBooleanArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween6(const arr: TPointArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween7(const arr: TBoxArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;
function TArray_SizeBetween8(const arr: TRangeArray; const sMin, sMax: Integer): Boolean; overload; cdecl; begin Result := arr.SizeBetween(sMin, sMax); end;

function TArray_SizeMax1(const arr: TIntegerArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax2(const arr: TDoubleArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax3(const arr: TStringArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax4(const arr: TCharArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax5(const arr: TBooleanArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax6(const arr: TPointArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax7(const arr: TBoxArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;
function TArray_SizeMax8(const arr: TRangeArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMax(target); end;

function TArray_SizeMin1(const arr: TIntegerArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin2(const arr: TDoubleArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin3(const arr: TStringArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin4(const arr: TCharArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin5(const arr: TBooleanArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin6(const arr: TPointArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin7(const arr: TBoxArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;
function TArray_SizeMin8(const arr: TRangeArray; const target: Integer): Boolean; overload; cdecl; begin Result := arr.SizeMin(target); end;

function TArray_Slots1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Slots; end;
function TArray_Slots2(const arr: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := arr.Slots; end;
function TArray_Slots3(const arr: TStringArray): TIntegerArray; overload; cdecl; begin Result := arr.Slots; end;
function TArray_Slots4(const arr: TCharArray): TIntegerArray; overload; cdecl; begin Result := arr.Slots; end;
function TArray_Slots5(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.Slots; end;
function TArray_Slots6(const arr: TPointArray): TIntegerArray; overload; cdecl; begin Result := arr.Slots; end;
function TArray_Slots7(const arr: TBoxArray): TIntegerArray; overload; cdecl; begin Result := arr.Slots; end;
function TArray_Slots8(const arr: TRangeArray): TIntegerArray; overload; cdecl; begin Result := arr.Slots; end;

function TArray_Some1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Some; end;
function TArray_Some2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Some; end;
function TArray_Some3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Some; end;
function TArray_Some4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Some; end;
function TArray_Some5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Some; end;
function TArray_Some6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Some; end;
function TArray_Some7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Some; end;
function TArray_Some8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Some; end;
function TArray_Some9(const arr: TIntegerArray; const amount: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Some(amount); end;
function TArray_Some10(const arr: TDoubleArray; const amount: Integer): TDoubleArray; overload; cdecl; begin Result := arr.Some(amount); end;
function TArray_Some11(const arr: TStringArray; const amount: Integer): TStringArray; overload; cdecl; begin Result := arr.Some(amount); end;
function TArray_Some12(const arr: TCharArray; const amount: Integer): TCharArray; overload; cdecl; begin Result := arr.Some(amount); end;
function TArray_Some13(const arr: TBooleanArray; const amount: Integer): TBooleanArray; overload; cdecl; begin Result := arr.Some(amount); end;
function TArray_Some14(const arr: TPointArray; const amount: Integer): TPointArray; overload; cdecl; begin Result := arr.Some(amount); end;
function TArray_Some15(const arr: TBoxArray; const amount: Integer): TBoxArray; overload; cdecl; begin Result := arr.Some(amount); end;
function TArray_Some16(const arr: TRangeArray; const amount: Integer): TRangeArray; overload; cdecl; begin Result := arr.Some(amount); end;

function TArray_Span1(const arr: TIntegerArray; const subArray: TIntegerArray; const index: Integer = 2147483647): TRange; overload; cdecl; begin Result := arr.Span(subArray, index); end;
function TArray_Span2(const arr: TDoubleArray; const subArray: TDoubleArray; const index: Integer = 2147483647): TRange; overload; cdecl; begin Result := arr.Span(subArray, index); end;
function TArray_Span3(const arr: TStringArray; const subArray: TStringArray; const index: Integer = 2147483647): TRange; overload; cdecl; begin Result := arr.Span(subArray, index); end;
function TArray_Span4(const arr: TCharArray; const subArray: TCharArray; const index: Integer = 2147483647): TRange; overload; cdecl; begin Result := arr.Span(subArray, index); end;
function TArray_Span5(const arr: TBooleanArray; const subArray: TBooleanArray; const index: Integer = 2147483647): TRange; overload; cdecl; begin Result := arr.Span(subArray, index); end;
function TArray_Span6(const arr: TPointArray; const subArray: TPointArray; const index: Integer = 2147483647): TRange; overload; cdecl; begin Result := arr.Span(subArray, index); end;
function TArray_Span7(const arr: TBoxArray; const subArray: TBoxArray; const index: Integer = 2147483647): TRange; overload; cdecl; begin Result := arr.Span(subArray, index); end;
function TArray_Span8(const arr: TRangeArray; const subArray: TRangeArray; const index: Integer = 2147483647): TRange; overload; cdecl; begin Result := arr.Span(subArray, index); end;

function TArray_Spans1(const arr: TIntegerArray; const subArray: TIntegerArray; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Spans(subArray, index); end;
function TArray_Spans2(const arr: TDoubleArray; const subArray: TDoubleArray; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Spans(subArray, index); end;
function TArray_Spans3(const arr: TStringArray; const subArray: TStringArray; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Spans(subArray, index); end;
function TArray_Spans4(const arr: TCharArray; const subArray: TCharArray; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Spans(subArray, index); end;
function TArray_Spans5(const arr: TBooleanArray; const subArray: TBooleanArray; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Spans(subArray, index); end;
function TArray_Spans6(const arr: TPointArray; const subArray: TPointArray; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Spans(subArray, index); end;
function TArray_Spans7(const arr: TBoxArray; const subArray: TBoxArray; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Spans(subArray, index); end;
function TArray_Spans8(const arr: TRangeArray; const subArray: TRangeArray; const index: Integer = 2147483647): TRangeArray; overload; cdecl; begin Result := arr.Spans(subArray, index); end;

function TArray_Strip1(const arr: TIntegerArray; const item: Integer; const eraseDuplicates: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.Strip(item, eraseDuplicates); end;
function TArray_Strip2(const arr: TDoubleArray; const item: Double; const eraseDuplicates: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.Strip(item, eraseDuplicates); end;
function TArray_Strip3(const arr: TStringArray; const item: string; const eraseDuplicates: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.Strip(item, eraseDuplicates); end;
function TArray_Strip4(const arr: TCharArray; const item: Char; const eraseDuplicates: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.Strip(item, eraseDuplicates); end;
function TArray_Strip5(const arr: TBooleanArray; const item: Boolean; const eraseDuplicates: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.Strip(item, eraseDuplicates); end;
function TArray_Strip6(const arr: TPointArray; const item: TPoint; const eraseDuplicates: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.Strip(item, eraseDuplicates); end;
function TArray_Strip7(const arr: TBoxArray; const item: TBox; const eraseDuplicates: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.Strip(item, eraseDuplicates); end;
function TArray_Strip8(const arr: TRangeArray; const item: TRange; const eraseDuplicates: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.Strip(item, eraseDuplicates); end;

function TArray_SubarrayLocation1(const arr: TIntegerArray; const pattern: TIntegerArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation2(const arr: TDoubleArray; const pattern: TDoubleArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation3(const arr: TStringArray; const pattern: TStringArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation4(const arr: TCharArray; const pattern: TCharArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation5(const arr: TBooleanArray; const pattern: TBooleanArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation6(const arr: TPointArray; const pattern: TPointArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation7(const arr: TBoxArray; const pattern: TBoxArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;
function TArray_SubarrayLocation8(const arr: TRangeArray; const pattern: TRangeArray): Integer; overload; cdecl; begin Result := arr.SubarrayLocation(pattern); end;

function TArray_SubarrayLocations1(const arr: TIntegerArray; const pattern: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations2(const arr: TDoubleArray; const pattern: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations3(const arr: TStringArray; const pattern: TStringArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations4(const arr: TCharArray; const pattern: TCharArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations5(const arr: TBooleanArray; const pattern: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations6(const arr: TPointArray; const pattern: TPointArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations7(const arr: TBoxArray; const pattern: TBoxArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;
function TArray_SubarrayLocations8(const arr: TRangeArray; const pattern: TRangeArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayLocations(pattern); end;

function TArray_SubarrayPosition1(const arr: TIntegerArray; const pattern: TIntegerArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition2(const arr: TDoubleArray; const pattern: TDoubleArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition3(const arr: TStringArray; const pattern: TStringArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition4(const arr: TCharArray; const pattern: TCharArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition5(const arr: TBooleanArray; const pattern: TBooleanArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition6(const arr: TPointArray; const pattern: TPointArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition7(const arr: TBoxArray; const pattern: TBoxArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;
function TArray_SubarrayPosition8(const arr: TRangeArray; const pattern: TRangeArray): Integer; overload; cdecl; begin Result := arr.SubarrayPosition(pattern); end;

function TArray_SubarrayPositions1(const arr: TIntegerArray; const pattern: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions2(const arr: TDoubleArray; const pattern: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions3(const arr: TStringArray; const pattern: TStringArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions4(const arr: TCharArray; const pattern: TCharArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions5(const arr: TBooleanArray; const pattern: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions6(const arr: TPointArray; const pattern: TPointArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions7(const arr: TBoxArray; const pattern: TBoxArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;
function TArray_SubarrayPositions8(const arr: TRangeArray; const pattern: TRangeArray): TIntegerArray; overload; cdecl; begin Result := arr.SubarrayPositions(pattern); end;

function TArray_Subset1(const arr, items: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Subset(items); end;
function TArray_Subset2(const arr, items: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Subset(items); end;
function TArray_Subset3(const arr, items: TStringArray): Boolean; overload; cdecl; begin Result := arr.Subset(items); end;
function TArray_Subset4(const arr, items: TCharArray): Boolean; overload; cdecl; begin Result := arr.Subset(items); end;
function TArray_Subset5(const arr, items: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Subset(items); end;
function TArray_Subset6(const arr, items: TPointArray): Boolean; overload; cdecl; begin Result := arr.Subset(items); end;
function TArray_Subset7(const arr, items: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Subset(items); end;
function TArray_Subset8(const arr, items: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Subset(items); end;

function TArray_Supply1(var arr: TIntegerArray; const item: Integer): Integer; overload; cdecl; begin Result := arr.Supply(item); end;
function TArray_Supply2(var arr: TDoubleArray; const item: Double): Integer; overload; cdecl; begin Result := arr.Supply(item); end;
function TArray_Supply3(var arr: TStringArray; const item: string): Integer; overload; cdecl; begin Result := arr.Supply(item); end;
function TArray_Supply4(var arr: TCharArray; const item: Char): Integer; overload; cdecl; begin Result := arr.Supply(item); end;
function TArray_Supply5(var arr: TBooleanArray; const item: Boolean): Integer; overload; cdecl; begin Result := arr.Supply(item); end;
function TArray_Supply6(var arr: TPointArray; const item: TPoint): Integer; overload; cdecl; begin Result := arr.Supply(item); end;
function TArray_Supply7(var arr: TBoxArray; const item: TBox): Integer; overload; cdecl; begin Result := arr.Supply(item); end;
function TArray_Supply8(var arr: TRangeArray; const item: TRange): Integer; overload; cdecl; begin Result := arr.Supply(item); end;
function TArray_Supply9(var arr: TIntegerArray; const items: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Supply(items); end;
function TArray_Supply10(var arr: TDoubleArray; const items: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Supply(items); end;
function TArray_Supply11(var arr: TStringArray; const items: TStringArray): Integer; overload; cdecl; begin Result := arr.Supply(items); end;
function TArray_Supply12(var arr: TCharArray; const items: TCharArray): Integer; overload; cdecl; begin Result := arr.Supply(items); end;
function TArray_Supply13(var arr: TBooleanArray; const items: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Supply(items); end;
function TArray_Supply14(var arr: TPointArray; const items: TPointArray): Integer; overload; cdecl; begin Result := arr.Supply(items); end;
function TArray_Supply15(var arr: TBoxArray; const items: TBoxArray): Integer; overload; cdecl; begin Result := arr.Supply(items); end;
function TArray_Supply16(var arr: TRangeArray; const items: TRangeArray): Integer; overload; cdecl; begin Result := arr.Supply(items); end;

function TArray_ToIndexes1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.ToIndexes; end;
function TArray_ToIndexes2(const arr: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := arr.ToIndexes; end;
function TArray_ToIndexes3(const arr: TStringArray): TIntegerArray; overload; cdecl; begin Result := arr.ToIndexes; end;
function TArray_ToIndexes4(const arr: TCharArray): TIntegerArray; overload; cdecl; begin Result := arr.ToIndexes; end;
function TArray_ToIndexes5(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.ToIndexes; end;
function TArray_ToIndexes6(const arr: TPointArray): TIntegerArray; overload; cdecl; begin Result := arr.ToIndexes; end;
function TArray_ToIndexes7(const arr: TBoxArray): TIntegerArray; overload; cdecl; begin Result := arr.ToIndexes; end;
function TArray_ToIndexes8(const arr: TRangeArray): TIntegerArray; overload; cdecl; begin Result := arr.ToIndexes; end;

function TArray_Trade1(var arr, b: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade2(var arr, b: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade3(var arr, b: TStringArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade4(var arr, b: TCharArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade5(var arr, b: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade6(var arr, b: TPointArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade7(var arr, b: TBoxArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;
function TArray_Trade8(var arr, b: TRangeArray): Integer; overload; cdecl; begin Result := arr.Trade(b); end;

function TArray_Undersize1(const arr: TIntegerArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize2(const arr: TDoubleArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize3(const arr: TStringArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize4(const arr: TCharArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize5(const arr: TBooleanArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize6(const arr: TPointArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize7(const arr: TBoxArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;
function TArray_Undersize8(const arr: TRangeArray; const limit: Integer): Boolean; overload; cdecl; begin Result := arr.Undersize(limit); end;

function TArray_Unduplicate1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Unduplicate; end;
function TArray_Unduplicate2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Unduplicate; end;
function TArray_Unduplicate3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Unduplicate; end;
function TArray_Unduplicate4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Unduplicate; end;
function TArray_Unduplicate5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Unduplicate; end;
function TArray_Unduplicate6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Unduplicate; end;
function TArray_Unduplicate7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Unduplicate; end;
function TArray_Unduplicate8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Unduplicate; end;

function TArray_Uniform1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Uniform; end;
function TArray_Uniform2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Uniform; end;
function TArray_Uniform3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Uniform; end;
function TArray_Uniform4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Uniform; end;
function TArray_Uniform5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Uniform; end;
function TArray_Uniform6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Uniform; end;
function TArray_Uniform7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Uniform; end;
function TArray_Uniform8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Uniform; end;
function TArray_Uniform9(const arr: TIntegerArray; const item: Integer): Boolean; overload; cdecl; begin Result := arr.Uniform(item); end;
function TArray_Uniform10(const arr: TDoubleArray; const item: Double): Boolean; overload; cdecl; begin Result := arr.Uniform(item); end;
function TArray_Uniform11(const arr: TStringArray; const item: string): Boolean; overload; cdecl; begin Result := arr.Uniform(item); end;
function TArray_Uniform12(const arr: TCharArray; const item: Char): Boolean; overload; cdecl; begin Result := arr.Uniform(item); end;
function TArray_Uniform13(const arr: TBooleanArray; const item: Boolean): Boolean; overload; cdecl; begin Result := arr.Uniform(item); end;
function TArray_Uniform14(const arr: TPointArray; const item: TPoint): Boolean; overload; cdecl; begin Result := arr.Uniform(item); end;
function TArray_Uniform15(const arr: TBoxArray; const item: TBox): Boolean; overload; cdecl; begin Result := arr.Uniform(item); end;
function TArray_Uniform16(const arr: TRangeArray; const item: TRange): Boolean; overload; cdecl; begin Result := arr.Uniform(item); end;

function TArray_Unique1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Unique; end;
function TArray_Unique8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Unique; end;

function TArray_Uniqued1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued5(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued6(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued7(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Uniqued; end;
function TArray_Uniqued8(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Uniqued; end;

function TArray_Uniques1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques2(const arr: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques3(const arr: TStringArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques4(const arr: TCharArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques5(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques6(const arr: TPointArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques7(const arr: TBoxArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;
function TArray_Uniques8(const arr: TRangeArray): TIntegerArray; overload; cdecl; begin Result := arr.Uniques; end;

function TArray_Unshift1(const arr: TIntegerArray; const item: Integer): TIntegerArray; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift2(const arr: TDoubleArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift3(const arr: TStringArray; const item: string): TStringArray; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift4(const arr: TCharArray; const item: Char): TCharArray; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift5(const arr: TBooleanArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift6(const arr: TPointArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift7(const arr: TBoxArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift8(const arr: TRangeArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := arr.Unshift(item); end;
function TArray_Unshift9(const arr: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift10(const arr: TDoubleArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift11(const arr: TStringArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift12(const arr: TCharArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift13(const arr: TBooleanArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift14(const arr: TPointArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift15(const arr: TBoxArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Unshift(items); end;
function TArray_Unshift16(const arr: TRangeArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Unshift(items); end;

function TArray_Void1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Void; end;
function TArray_Void2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Void; end;
function TArray_Void3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Void; end;
function TArray_Void4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Void; end;
function TArray_Void5(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := arr.Void; end;
function TArray_Void6(const arr: TPointArray): Boolean; overload; cdecl; begin Result := arr.Void; end;
function TArray_Void7(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := arr.Void; end;
function TArray_Void8(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := arr.Void; end;

function TArray_Waste1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Waste; end;
function TArray_Waste2(const arr: TDoubleArray): Integer; overload; cdecl; begin Result := arr.Waste; end;
function TArray_Waste3(const arr: TStringArray): Integer; overload; cdecl; begin Result := arr.Waste; end;
function TArray_Waste4(const arr: TCharArray): Integer; overload; cdecl; begin Result := arr.Waste; end;
function TArray_Waste5(const arr: TBooleanArray): Integer; overload; cdecl; begin Result := arr.Waste; end;
function TArray_Waste6(const arr: TPointArray): Integer; overload; cdecl; begin Result := arr.Waste; end;
function TArray_Waste7(const arr: TBoxArray): Integer; overload; cdecl; begin Result := arr.Waste; end;
function TArray_Waste8(const arr: TRangeArray): Integer; overload; cdecl; begin Result := arr.Waste; end;

function TArray_Sorted1(const arr: TIntegerArray; const aAscending: Boolean = True): Boolean; overload; cdecl; begin Result := arr.Sorted(aAscending); end;
function TArray_Sorted2(const arr: TDoubleArray; const aAscending: Boolean = True): Boolean; overload; cdecl; begin Result := arr.Sorted(aAscending); end;
function TArray_Sorted3(const arr: TStringArray; const aAscending: Boolean = True): Boolean; overload; cdecl; begin Result := arr.Sorted(aAscending); end;
function TArray_Sorted4(const arr: TCharArray; const aAscending: Boolean = True): Boolean; overload; cdecl; begin Result := arr.Sorted(aAscending); end;

function TArray_InOrder1(const arr: TIntegerArray; const aAscending: Boolean = True): Boolean; overload; cdecl; begin Result := arr.InOrder(aAscending); end;
function TArray_InOrder2(const arr: TDoubleArray; const aAscending: Boolean = True): Boolean; overload; cdecl; begin Result := arr.InOrder(aAscending); end;
function TArray_InOrder3(const arr: TStringArray; const aAscending: Boolean = True): Boolean; overload; cdecl; begin Result := arr.InOrder(aAscending); end;
function TArray_InOrder4(const arr: TCharArray; const aAscending: Boolean = True): Boolean; overload; cdecl; begin Result := arr.InOrder(aAscending); end;

function TArray_Orderly1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Orderly; end;
function TArray_Orderly2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Orderly; end;
function TArray_Orderly3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Orderly; end;
function TArray_Orderly4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Orderly; end;

function TArray_Ascend1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Ascend; end;
function TArray_Ascend2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Ascend; end;
function TArray_Ascend3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Ascend; end;
function TArray_Ascend4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Ascend; end;

function TArray_Descend1(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Descend; end;
function TArray_Descend2(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Descend; end;
function TArray_Descend3(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := arr.Descend; end;
function TArray_Descend4(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := arr.Descend; end;

function TArray_Ascending1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Ascending; end;
function TArray_Ascending2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Ascending; end;
function TArray_Ascending3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Ascending; end;
function TArray_Ascending4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Ascending; end;

function TArray_Descending1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Descending; end;
function TArray_Descending2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Descending; end;
function TArray_Descending3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Descending; end;
function TArray_Descending4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Descending; end;

function TArray_Decreasing1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Decreasing; end;
function TArray_Decreasing2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Decreasing; end;
function TArray_Decreasing3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Decreasing; end;
function TArray_Decreasing4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Decreasing; end;

function TArray_Increasing1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Increasing; end;
function TArray_Increasing2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Increasing; end;
function TArray_Increasing3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Increasing; end;
function TArray_Increasing4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Increasing; end;

function TArray_Downward1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Downward; end;
function TArray_Downward2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Downward; end;
function TArray_Downward3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Downward; end;
function TArray_Downward4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Downward; end;

function TArray_Upward1(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := arr.Upward; end;
function TArray_Upward2(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := arr.Upward; end;
function TArray_Upward3(const arr: TStringArray): Boolean; overload; cdecl; begin Result := arr.Upward; end;
function TArray_Upward4(const arr: TCharArray): Boolean; overload; cdecl; begin Result := arr.Upward; end;

function TArray_Lowest1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Lowest; end;
function TArray_Lowest2(const arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.Lowest; end;
function TArray_Lowest3(const arr: TStringArray): string; overload; cdecl; begin Result := arr.Lowest; end;
function TArray_Lowest4(const arr: TCharArray): Char; overload; cdecl; begin Result := arr.Lowest; end;

function TArray_Highest1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Highest; end;
function TArray_Highest2(const arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.Highest; end;
function TArray_Highest3(const arr: TStringArray): string; overload; cdecl; begin Result := arr.Highest; end;
function TArray_Highest4(const arr: TCharArray): Char; overload; cdecl;  begin Result := arr.Highest; end;

function TArray_Mini1(const arr: TIntegerArray; const aAscending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Mini(aAscending, start); end;
function TArray_Mini2(const arr: TDoubleArray; const aAscending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Mini(aAscending, start); end;
function TArray_Mini3(const arr: TStringArray; const aAscending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Mini(aAscending, start); end;
function TArray_Mini4(const arr: TCharArray; const aAscending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Mini(aAscending, start); end;
function TArray_Mini5(const arr: TIntegerArray; const start: Integer; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Mini(start, aAscending); end;
function TArray_Mini6(const arr: TDoubleArray; const start: Integer; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Mini(start, aAscending); end;
function TArray_Mini7(const arr: TStringArray; const start: Integer; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Mini(start, aAscending); end;
function TArray_Mini8(const arr: TCharArray; const start: Integer; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Mini(start, aAscending); end;

function TArray_Maxi1(const arr: TIntegerArray; const aAscending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Maxi(aAscending, start); end;
function TArray_Maxi2(const arr: TDoubleArray; const aAscending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Maxi(aAscending, start); end;
function TArray_Maxi3(const arr: TStringArray; const aAscending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Maxi(aAscending, start); end;
function TArray_Maxi4(const arr: TCharArray; const aAscending: Boolean = True; const start: Integer = -1): Integer; overload; cdecl; begin Result := arr.Maxi(aAscending, start); end;
function TArray_Maxi5(const arr: TIntegerArray; const start: Integer; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Maxi(aAscending, start); end;
function TArray_Maxi6(const arr: TDoubleArray; const start: Integer; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Maxi(aAscending, start); end;
function TArray_Maxi7(const arr: TStringArray; const start: Integer; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Maxi(aAscending, start); end;
function TArray_Maxi8(const arr: TCharArray; const start: Integer; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.Maxi(aAscending, start); end;

function TArray_Mode1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Mode; end;
function TArray_Mode2(const arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.Mode; end;
function TArray_Mode3(const arr: TStringArray): string; overload; cdecl; begin Result := arr.Mode; end;
function TArray_Mode4(const arr: TCharArray): Char; overload; cdecl; begin Result := arr.Mode; end;

function TArray_Center1(const arr: TIntegerArray): Integer; overload; cdecl; begin Result := arr.Center; end;
function TArray_Center2(const arr: TDoubleArray): Double; overload; cdecl; begin Result := arr.Center; end;
function TArray_Center3(const arr: TStringArray): string; overload; cdecl; begin Result := arr.Center; end;
function TArray_Center4(const arr: TCharArray): Char; overload; cdecl; begin Result := arr.Center; end;

function TArray_BubbleSort1(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.BubbleSort(aAscending); end;
function TArray_BubbleSort2(var arr: TDoubleArray; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.BubbleSort(aAscending); end;
function TArray_BubbleSort3(var arr: TStringArray; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.BubbleSort(aAscending); end;
function TArray_BubbleSort4(var arr: TCharArray; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.BubbleSort(aAscending); end;

function TArray_BubbleSortOptimized1(var arr: TIntegerArray; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.BubbleSortOptimized(aAscending); end;
function TArray_BubbleSortOptimized2(var arr: TDoubleArray; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.BubbleSortOptimized(aAscending); end;
function TArray_BubbleSortOptimized3(var arr: TStringArray; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.BubbleSortOptimized(aAscending); end;
function TArray_BubbleSortOptimized4(var arr: TCharArray; const aAscending: Boolean = True): Integer; overload; cdecl; begin Result := arr.BubbleSortOptimized(aAscending); end;

function TArray_QuickSorted1(const arr: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.QuickSorted(aAscending); end;
function TArray_QuickSorted2(const arr: TDoubleArray; const aAscending: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.QuickSorted(aAscending); end;
function TArray_QuickSorted3(const arr: TStringArray; const aAscending: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.QuickSorted(aAscending); end;
function TArray_QuickSorted4(const arr: TCharArray; const aAscending: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.QuickSorted(aAscending); end;

function TArray_Uniq1(const arr: TIntegerArray; const sSorted: Boolean = False): TIntegerArray; overload; cdecl; begin Result := arr.Uniq(sSorted); end;
function TArray_Uniq2(const arr: TDoubleArray; const sSorted: Boolean = False): TDoubleArray; overload; cdecl; begin Result := arr.Uniq(sSorted); end;
function TArray_Uniq3(const arr: TStringArray; const sSorted: Boolean = False): TStringArray; overload; cdecl; begin Result := arr.Uniq(sSorted); end;
function TArray_Uniq4(const arr: TCharArray; const sSorted: Boolean = False): TCharArray; overload; cdecl; begin Result := arr.Uniq(sSorted); end;

function TArray_QuickSorted5(const arr: TIntegerArray; const weight: TIntegerArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted6(const arr: TDoubleArray; const weight: TIntegerArray; const aAscending: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted7(const arr: TStringArray; const weight: TIntegerArray; const aAscending: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted8(const arr: TCharArray; const weight: TIntegerArray; const aAscending: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted9(const arr: TBooleanArray; const weight: TIntegerArray; const aAscending: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted10(const arr: TPointArray; const weight: TIntegerArray; const aAscending: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted11(const arr: TBoxArray; const weight: TIntegerArray; const aAscending: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted12(const arr: TRangeArray; const weight: TIntegerArray; const aAscending: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;

function TArray_QuickSorted13(const arr: TIntegerArray; const weight: TDoubleArray; const aAscending: Boolean = True): TIntegerArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted14(const arr: TDoubleArray; const weight: TDoubleArray; const aAscending: Boolean = True): TDoubleArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted15(const arr: TStringArray; const weight: TDoubleArray; const aAscending: Boolean = True): TStringArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted16(const arr: TCharArray; const weight: TDoubleArray; const aAscending: Boolean = True): TCharArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted17(const arr: TBooleanArray; const weight: TDoubleArray; const aAscending: Boolean = True): TBooleanArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted18(const arr: TPointArray; const weight: TDoubleArray; const aAscending: Boolean = True): TPointArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted19(const arr: TBoxArray; const weight: TDoubleArray; const aAscending: Boolean = True): TBoxArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;
function TArray_QuickSorted20(const arr: TRangeArray; const weight: TDoubleArray; const aAscending: Boolean = True): TRangeArray; overload; cdecl; begin Result := arr.QuickSorted(weight, aAscending); end;

function T1D_Create1(const item: Integer; const aSize: Integer = 1): TIntegerArray; overload; cdecl; begin Result := T1D.Create(item, aSize); end;
function T1D_Create2(const item: Double; const aSize: Integer = 1): TDoubleArray; overload; cdecl; begin Result := T1D.Create(item, aSize); end;
function T1D_Create3(const item: string; const aSize: Integer = 1): TStringArray; overload; cdecl; begin Result := T1D.Create(item, aSize); end;
function T1D_Create4(const item: Char; const aSize: Integer = 1): TCharArray; overload; cdecl; begin Result := T1D.Create(item, aSize); end;
function T1D_Create5(const item: Boolean; const aSize: Integer = 1): TBooleanArray; overload; cdecl; begin Result := T1D.Create(item, aSize); end;
function T1D_Create6(const item: TPoint; const aSize: Integer = 1): TPointArray; overload; cdecl; begin Result := T1D.Create(item, aSize); end;
function T1D_Create7(const item: TBox; const aSize: Integer = 1): TBoxArray; overload; cdecl; begin Result := T1D.Create(item, aSize); end;
function T1D_Create8(const item: TRange; const aSize: Integer = 1): TRangeArray; overload; cdecl; begin Result := T1D.Create(item, aSize); end;

function T2D_Create1(const item: Integer; const size1D: Integer = 1; const size2D: Integer = 1): T2DIntegerArray; overload; cdecl; begin Result := T2D.Create(item, size1D, size2D); end;
function T2D_Create2(const item: Double; const size1D: Integer = 1; const size2D: Integer = 1): T2DDoubleArray; overload; cdecl; begin Result := T2D.Create(item, size1D, size2D); end;
function T2D_Create3(const item: string; const size1D: Integer = 1; const size2D: Integer = 1): T2DStringArray; overload; cdecl; begin Result := T2D.Create(item, size1D, size2D); end;
function T2D_Create4(const item: Char; const size1D: Integer = 1; const size2D: Integer = 1): T2DCharArray; overload; cdecl; begin Result := T2D.Create(item, size1D, size2D); end;
function T2D_Create5(const item: Boolean; const size1D: Integer = 1; const size2D: Integer = 1): T2DBooleanArray; overload; cdecl; begin Result := T2D.Create(item, size1D, size2D); end;
function T2D_Create6(const item: TPoint; const size1D: Integer = 1; const size2D: Integer = 1): T2DPointArray; overload; cdecl; begin Result := T2D.Create(item, size1D, size2D); end;
function T2D_Create7(const item: TBox; const size1D: Integer = 1; const size2D: Integer = 1): T2DBoxArray; overload; cdecl; begin Result := T2D.Create(item, size1D, size2D); end;
function T2D_Create8(const item: TRange; const size1D: Integer = 1; const size2D: Integer = 1): T2DRangeArray; overload; cdecl; begin Result := T2D.Create(item, size1D, size2D); end;

function T2DArray_Blank1(const arr: T2DIntegerArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank2(const arr: T2DDoubleArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank3(const arr: T2DStringArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank4(const arr: T2DCharArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank5(const arr: T2DBooleanArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank6(const arr: T2DPointArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank7(const arr: T2DBoxArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;
function T2DArray_Blank8(const arr: T2DRangeArray): Boolean; overload; cdecl; begin Result := arr.Blank; end;

function T2DArray_Empty1(const arr: T2DIntegerArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty2(const arr: T2DDoubleArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty3(const arr: T2DStringArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty4(const arr: T2DCharArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty5(const arr: T2DBooleanArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty6(const arr: T2DPointArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty7(const arr: T2DBoxArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;
function T2DArray_Empty8(const arr: T2DRangeArray): Boolean; overload; cdecl; begin Result := arr.Empty; end;

function T2DArray_Flat1(const arr: T2DIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Flat; end;
function T2DArray_Flat2(const arr: T2DDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Flat; end;
function T2DArray_Flat3(const arr: T2DStringArray): TStringArray; overload; cdecl; begin Result := arr.Flat; end;
function T2DArray_Flat4(const arr: T2DCharArray): TCharArray; overload; cdecl; begin Result := arr.Flat; end;
function T2DArray_Flat5(const arr: T2DBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Flat; end;
function T2DArray_Flat6(const arr: T2DPointArray): TPointArray; overload; cdecl; begin Result := arr.Flat; end;
function T2DArray_Flat7(const arr: T2DBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Flat; end;
function T2DArray_Flat8(const arr: T2DRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Flat; end;

function T2DArray_Flatten1(const arr: T2DIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Flatten; end;
function T2DArray_Flatten2(const arr: T2DDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Flatten; end;
function T2DArray_Flatten3(const arr: T2DStringArray): TStringArray; overload; cdecl; begin Result := arr.Flatten; end;
function T2DArray_Flatten4(const arr: T2DCharArray): TCharArray; overload; cdecl; begin Result := arr.Flatten; end;
function T2DArray_Flatten5(const arr: T2DBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Flatten; end;
function T2DArray_Flatten6(const arr: T2DPointArray): TPointArray; overload; cdecl; begin Result := arr.Flatten; end;
function T2DArray_Flatten7(const arr: T2DBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Flatten; end;
function T2DArray_Flatten8(const arr: T2DRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Flatten; end;

function T2DArray_Irregular1(const arr: T2DIntegerArray): Boolean; overload; cdecl; begin Result := arr.Irregular; end;
function T2DArray_Irregular2(const arr: T2DDoubleArray): Boolean; overload; cdecl; begin Result := arr.Irregular; end;
function T2DArray_Irregular3(const arr: T2DStringArray): Boolean; overload; cdecl; begin Result := arr.Irregular; end;
function T2DArray_Irregular4(const arr: T2DCharArray): Boolean; overload; cdecl; begin Result := arr.Irregular; end;
function T2DArray_Irregular5(const arr: T2DBooleanArray): Boolean; overload; cdecl; begin Result := arr.Irregular; end;
function T2DArray_Irregular6(const arr: T2DPointArray): Boolean; overload; cdecl; begin Result := arr.Irregular; end;
function T2DArray_Irregular7(const arr: T2DBoxArray): Boolean; overload; cdecl; begin Result := arr.Irregular; end;
function T2DArray_Irregular8(const arr: T2DRangeArray): Boolean; overload; cdecl; begin Result := arr.Irregular; end;

function T2DArray_Jagged1(const arr: T2DIntegerArray): Boolean; overload; cdecl; begin Result := arr.Jagged; end;
function T2DArray_Jagged2(const arr: T2DDoubleArray): Boolean; overload; cdecl; begin Result := arr.Jagged; end;
function T2DArray_Jagged3(const arr: T2DStringArray): Boolean; overload; cdecl; begin Result := arr.Jagged; end;
function T2DArray_Jagged4(const arr: T2DCharArray): Boolean; overload; cdecl; begin Result := arr.Jagged; end;
function T2DArray_Jagged5(const arr: T2DBooleanArray): Boolean; overload; cdecl; begin Result := arr.Jagged; end;
function T2DArray_Jagged6(const arr: T2DPointArray): Boolean; overload; cdecl; begin Result := arr.Jagged; end;
function T2DArray_Jagged7(const arr: T2DBoxArray): Boolean; overload; cdecl; begin Result := arr.Jagged; end;
function T2DArray_Jagged8(const arr: T2DRangeArray): Boolean; overload; cdecl; begin Result := arr.Jagged; end;

function T2DArray_Merge1(const arr: T2DIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge2(const arr: T2DDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge3(const arr: T2DStringArray): TStringArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge4(const arr: T2DCharArray): TCharArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge5(const arr: T2DBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge6(const arr: T2DPointArray): TPointArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge7(const arr: T2DBoxArray): TBoxArray; overload; cdecl; begin Result := arr.Merge; end;
function T2DArray_Merge8(const arr: T2DRangeArray): TRangeArray; overload; cdecl; begin Result := arr.Merge; end;

function T2DArray_Ragged1(const arr: T2DIntegerArray): Boolean; overload; cdecl; begin Result := arr.Ragged; end;
function T2DArray_Ragged2(const arr: T2DDoubleArray): Boolean; overload; cdecl; begin Result := arr.Ragged; end;
function T2DArray_Ragged3(const arr: T2DStringArray): Boolean; overload; cdecl; begin Result := arr.Ragged; end;
function T2DArray_Ragged4(const arr: T2DCharArray): Boolean; overload; cdecl; begin Result := arr.Ragged; end;
function T2DArray_Ragged5(const arr: T2DBooleanArray): Boolean; overload; cdecl; begin Result := arr.Ragged; end;
function T2DArray_Ragged6(const arr: T2DPointArray): Boolean; overload; cdecl; begin Result := arr.Ragged; end;
function T2DArray_Ragged7(const arr: T2DBoxArray): Boolean; overload; cdecl; begin Result := arr.Ragged; end;
function T2DArray_Ragged8(const arr: T2DRangeArray): Boolean; overload; cdecl; begin Result := arr.Ragged; end;

function T2DArray_Size1(const arr: T2DIntegerArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size2(const arr: T2DDoubleArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size3(const arr: T2DStringArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size4(const arr: T2DCharArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size5(const arr: T2DBooleanArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size6(const arr: T2DPointArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size7(const arr: T2DBoxArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size8(const arr: T2DRangeArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Size(lengths); end;
function T2DArray_Size9(const arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size10(const arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size11(const arr: T2DStringArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size12(const arr: T2DCharArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size13(const arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size14(const arr: T2DPointArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size15(const arr: T2DBoxArray): Int64; overload; cdecl; begin Result := arr.Size; end;
function T2DArray_Size16(const arr: T2DRangeArray): Int64; overload; cdecl; begin Result := arr.Size; end;

function T2DArray_Total1(const arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := arr.Total; end;
function T2DArray_Total2(const arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := arr.Total; end;
function T2DArray_Total3(const arr: T2DStringArray): Int64; overload; cdecl; begin Result := arr.Total; end;
function T2DArray_Total4(const arr: T2DCharArray): Int64; overload; cdecl; begin Result := arr.Total; end;
function T2DArray_Total5(const arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := arr.Total; end;
function T2DArray_Total6(const arr: T2DPointArray): Int64; overload; cdecl; begin Result := arr.Total; end;
function T2DArray_Total7(const arr: T2DBoxArray): Int64; overload; cdecl; begin Result := arr.Total; end;
function T2DArray_Total8(const arr: T2DRangeArray): Int64; overload; cdecl; begin Result := arr.Total; end;

function T2DArray_Population1(const arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := arr.Population; end;
function T2DArray_Population2(const arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := arr.Population; end;
function T2DArray_Population3(const arr: T2DStringArray): Int64; overload; cdecl; begin Result := arr.Population; end;
function T2DArray_Population4(const arr: T2DCharArray): Int64; overload; cdecl; begin Result := arr.Population; end;
function T2DArray_Population5(const arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := arr.Population; end;
function T2DArray_Population6(const arr: T2DPointArray): Int64; overload; cdecl; begin Result := arr.Population; end;
function T2DArray_Population7(const arr: T2DBoxArray): Int64; overload; cdecl; begin Result := arr.Population; end;
function T2DArray_Population8(const arr: T2DRangeArray): Int64; overload; cdecl; begin Result := arr.Population; end;

function T2DArray_Census1(const arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := arr.Census; end;
function T2DArray_Census2(const arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := arr.Census; end;
function T2DArray_Census3(const arr: T2DStringArray): Int64; overload; cdecl; begin Result := arr.Census; end;
function T2DArray_Census4(const arr: T2DCharArray): Int64; overload; cdecl; begin Result := arr.Census; end;
function T2DArray_Census5(const arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := arr.Census; end;
function T2DArray_Census6(const arr: T2DPointArray): Int64; overload; cdecl; begin Result := arr.Census; end;
function T2DArray_Census7(const arr: T2DBoxArray): Int64; overload; cdecl; begin Result := arr.Census; end;
function T2DArray_Census8(const arr: T2DRangeArray): Int64; overload; cdecl; begin Result := arr.Census; end;

function T2DArray_Inventory1(const arr: T2DIntegerArray; var items: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Inventory(items); end;
function T2DArray_Inventory2(const arr: T2DDoubleArray; var items: TDoubleArray): Int64; overload; cdecl; begin Result := arr.Inventory(items); end;
function T2DArray_Inventory3(const arr: T2DStringArray; var items: TStringArray): Int64; overload; cdecl; begin Result := arr.Inventory(items); end;
function T2DArray_Inventory4(const arr: T2DCharArray; var items: TCharArray): Int64; overload; cdecl; begin Result := arr.Inventory(items); end;
function T2DArray_Inventory5(const arr: T2DBooleanArray; var items: TBooleanArray): Int64; overload; cdecl; begin Result := arr.Inventory(items); end;
function T2DArray_Inventory6(const arr: T2DPointArray; var items: TPointArray): Int64; overload; cdecl; begin Result := arr.Inventory(items); end;
function T2DArray_Inventory7(const arr: T2DBoxArray; var items: TBoxArray): Int64; overload; cdecl; begin Result := arr.Inventory(items); end;
function T2DArray_Inventory8(const arr: T2DRangeArray; var items: TRangeArray): Int64; overload; cdecl; begin Result := arr.Inventory(items); end;
function T2DArray_Inventory9(const arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := arr.Inventory; end;
function T2DArray_Inventory10(const arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := arr.Inventory; end;
function T2DArray_Inventory11(const arr: T2DStringArray): Int64; overload; cdecl; begin Result := arr.Inventory; end;
function T2DArray_Inventory12(const arr: T2DCharArray): Int64; overload; cdecl; begin Result := arr.Inventory; end;
function T2DArray_Inventory13(const arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := arr.Inventory; end;
function T2DArray_Inventory14(const arr: T2DPointArray): Int64; overload; cdecl; begin Result := arr.Inventory; end;
function T2DArray_Inventory15(const arr: T2DBoxArray): Int64; overload; cdecl; begin Result := arr.Inventory; end;
function T2DArray_Inventory16(const arr: T2DRangeArray): Int64; overload; cdecl; begin Result := arr.Inventory; end;

function T2DArray_TArray1(const arr: T2DIntegerArray): TIntegerArray; overload; cdecl; begin Result := arr.TArray; end;
function T2DArray_TArray2(const arr: T2DDoubleArray): TDoubleArray; overload; cdecl; begin Result := arr.TArray; end;
function T2DArray_TArray3(const arr: T2DStringArray): TStringArray; overload; cdecl; begin Result := arr.TArray; end;
function T2DArray_TArray4(const arr: T2DCharArray): TCharArray; overload; cdecl; begin Result := arr.TArray; end;
function T2DArray_TArray5(const arr: T2DBooleanArray): TBooleanArray; overload; cdecl; begin Result := arr.TArray; end;
function T2DArray_TArray6(const arr: T2DPointArray): TPointArray; overload; cdecl; begin Result := arr.TArray; end;
function T2DArray_TArray7(const arr: T2DBoxArray): TBoxArray; overload; cdecl; begin Result := arr.TArray; end;
function T2DArray_TArray8(const arr: T2DRangeArray): TRangeArray; overload; cdecl; begin Result := arr.TArray; end;

function T2DArray_Kill1(var arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := arr.Kill; end;
function T2DArray_Kill2(var arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := arr.Kill; end;
function T2DArray_Kill3(var arr: T2DStringArray): Int64; overload; cdecl; begin Result := arr.Kill; end;
function T2DArray_Kill4(var arr: T2DCharArray): Int64; overload; cdecl; begin Result := arr.Kill; end;
function T2DArray_Kill5(var arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := arr.Kill; end;
function T2DArray_Kill6(var arr: T2DPointArray): Int64; overload; cdecl; begin Result := arr.Kill; end;
function T2DArray_Kill7(var arr: T2DBoxArray): Int64; overload; cdecl; begin Result := arr.Kill; end;
function T2DArray_Kill8(var arr: T2DRangeArray): Int64; overload; cdecl; begin Result := arr.Kill; end;
function T2DArray_Kill9(var arr: T2DIntegerArray; const k2D: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Kill(k2D); end;
function T2DArray_Kill10(var arr: T2DDoubleArray; const k2D: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Kill(k2D); end;
function T2DArray_Kill11(var arr: T2DStringArray; const k2D: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Kill(k2D); end;
function T2DArray_Kill12(var arr: T2DCharArray; const k2D: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Kill(k2D); end;
function T2DArray_Kill13(var arr: T2DBooleanArray; const k2D: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Kill(k2D); end;
function T2DArray_Kill14(var arr: T2DPointArray; const k2D: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Kill(k2D); end;
function T2DArray_Kill15(var arr: T2DBoxArray; const k2D: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Kill(k2D); end;
function T2DArray_Kill16(var arr: T2DRangeArray; const k2D: TIntegerArray): Int64; overload; cdecl; begin Result := arr.Kill(k2D); end;

function T2DArray_Free1(var arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := arr.Free; end;
function T2DArray_Free2(var arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := arr.Free; end;
function T2DArray_Free3(var arr: T2DStringArray): Int64; overload; cdecl; begin Result := arr.Free; end;
function T2DArray_Free4(var arr: T2DCharArray): Int64; overload; cdecl; begin Result := arr.Free; end;
function T2DArray_Free5(var arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := arr.Free; end;
function T2DArray_Free6(var arr: T2DPointArray): Int64; overload; cdecl; begin Result := arr.Free; end;
function T2DArray_Free7(var arr: T2DBoxArray): Int64; overload; cdecl; begin Result := arr.Free; end;
function T2DArray_Free8(var arr: T2DRangeArray): Int64; overload; cdecl; begin Result := arr.Free; end;

function T2DArray_Reset1(var arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := arr.Reset; end;
function T2DArray_Reset2(var arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := arr.Reset; end;
function T2DArray_Reset3(var arr: T2DStringArray): Int64; overload; cdecl; begin Result := arr.Reset; end;
function T2DArray_Reset4(var arr: T2DCharArray): Int64; overload; cdecl; begin Result := arr.Reset; end;
function T2DArray_Reset5(var arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := arr.Reset; end;
function T2DArray_Reset6(var arr: T2DPointArray): Int64; overload; cdecl; begin Result := arr.Reset; end;
function T2DArray_Reset7(var arr: T2DBoxArray): Int64; overload; cdecl; begin Result := arr.Reset; end;
function T2DArray_Reset8(var arr: T2DRangeArray): Int64; overload; cdecl; begin Result := arr.Reset; end;

function T2DArray_Destroy1(var arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := arr.Destroy; end;
function T2DArray_Destroy2(var arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := arr.Destroy; end;
function T2DArray_Destroy3(var arr: T2DStringArray): Int64; overload; cdecl; begin Result := arr.Destroy; end;
function T2DArray_Destroy4(var arr: T2DCharArray): Int64; overload; cdecl; begin Result := arr.Destroy; end;
function T2DArray_Destroy5(var arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := arr.Destroy; end;
function T2DArray_Destroy6(var arr: T2DPointArray): Int64; overload; cdecl; begin Result := arr.Destroy; end;
function T2DArray_Destroy7(var arr: T2DBoxArray): Int64; overload; cdecl; begin Result := arr.Destroy; end;
function T2DArray_Destroy8(var arr: T2DRangeArray): Int64; overload; cdecl; begin Result := arr.Destroy; end;

function T2DArray_Pull1(var arr: T2DIntegerArray): T2DIntegerArray; overload; cdecl; begin Result := arr.Pull; end;
function T2DArray_Pull2(var arr: T2DDoubleArray): T2DDoubleArray; overload; cdecl; begin Result := arr.Pull; end;
function T2DArray_Pull3(var arr: T2DStringArray): T2DStringArray; overload; cdecl; begin Result := arr.Pull; end;
function T2DArray_Pull4(var arr: T2DCharArray): T2DCharArray; overload; cdecl; begin Result := arr.Pull; end;
function T2DArray_Pull5(var arr: T2DBooleanArray): T2DBooleanArray; overload; cdecl; begin Result := arr.Pull; end;
function T2DArray_Pull6(var arr: T2DPointArray): T2DPointArray; overload; cdecl; begin Result := arr.Pull; end;
function T2DArray_Pull7(var arr: T2DBoxArray): T2DBoxArray; overload; cdecl; begin Result := arr.Pull; end;
function T2DArray_Pull8(var arr: T2DRangeArray): T2DRangeArray; overload; cdecl; begin Result := arr.Pull; end;

function T2DArray_Recreate1(var arr: T2DIntegerArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function T2DArray_Recreate2(var arr: T2DDoubleArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function T2DArray_Recreate3(var arr: T2DStringArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function T2DArray_Recreate4(var arr: T2DCharArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function T2DArray_Recreate5(var arr: T2DBooleanArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function T2DArray_Recreate6(var arr: T2DPointArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function T2DArray_Recreate7(var arr: T2DBoxArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;
function T2DArray_Recreate8(var arr: T2DRangeArray; const arrSize: Integer): Boolean; overload; cdecl; begin Result := arr.Recreate(arrSize); end;