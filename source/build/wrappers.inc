function Boolean_X1(const X: Boolean; const trueX, falseX: Boolean): Boolean; overload; cdecl; begin Result := Boolean_X(X, trueX, falseX); end;
function Boolean_X2(const X: Boolean; const trueX, falseX: Int32): Int32; overload; cdecl; begin Result := Boolean_X(X, trueX, falseX); end;
function Boolean_X3(const X: Boolean; const trueX, falseX: Int64): Int64; overload; cdecl; begin Result := Boolean_X(X, trueX, falseX); end;
function Boolean_X4(const X: Boolean; const trueX, falseX: Double): Double; overload; cdecl; begin Result := Boolean_X(X, trueX, falseX); end;
function Boolean_X5(const X: Boolean; const trueX, falseX: string): string; overload; cdecl; begin Result := Boolean_X(X, trueX, falseX); end;
function Boolean_X6(const X: Boolean; const trueX, falseX: Char): Char; overload; cdecl; begin Result := Boolean_X(X, trueX, falseX); end;
function Boolean_X7(const X: Boolean; const trueX, falseX: TPoint): TPoint; overload; cdecl; begin Result := Boolean_X(X, trueX, falseX); end;
function Boolean_X8(const X: Boolean; const trueX, falseX: TBox): TBox; overload; cdecl; begin Result := Boolean_X(X, trueX, falseX); end;
function Boolean_X9(const X: Boolean; const trueX, falseX: TRange): TRange; overload; cdecl; begin Result := Boolean_X(X, trueX, falseX); end;

function String_Explode1(const str, d: string; const limit: Int32 = -1): TStringArray; overload; cdecl; begin Result := String_Explode(str, d, limit); end;
function String_Explode2(const str: string; const d: TStringArray; const limit: Int32 = -1): TStringArray; overload; cdecl; begin Result := String_Explode(str, d, limit); end;
function String_IDs1(const str: string): TIntegerArray; overload; cdecl; begin Result := String_IDs(str); end;
function String_IDs2(const str: string; const IDs: TIntegerArray): TCharArray; overload; cdecl; begin Result := String_IDs(str, IDs); end;
function String_IDs3(const str: string; const IDs: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := String_IDs(str, IDs, item); end;
function String_IDs4(const str: string; const IDs: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := String_IDs(str, IDs, items); end;

function TBox_Build1(const X1, Y1, X2, Y2: Int32): TBox; overload; cdecl; begin Result := TBox_Build(X1, Y1, X2, Y2); end;
function TBox_Build2(const a, b: TPoint): TBox; overload; cdecl; begin Result := TBox_Build(a, b); end;
function TBox_Create1(const X1, Y1, X2, Y2: Int32): TBox; overload; cdecl; begin Result := TBox_Create(X1, Y1, X2, Y2); end;
function TBox_Create2(const a, b: TPoint): TBox; overload; cdecl; begin Result := TBox_Create(a, b); end;
function TBox_Form1(const XY: Int32 = 0): TBox; overload; cdecl; begin Result := TBox_Form(XY); end;
function TBox_Form2(const XY: TPoint): TBox; overload; cdecl; begin Result := TBox_Form(XY); end;
function TBox_At1(const pt: TPoint; const radius: Int32 = 0): TBox; overload; cdecl; begin Result := TBox_At(pt, radius); end;
function TBox_At2(const pt: TPoint; const wRadius, hRadius: Int32): TBox; overload; cdecl; begin Result := TBox_At(pt, wRadius, hRadius); end;
function TBox_To1(const pt: TPoint; const size: Int32 = 1): TBox; overload; cdecl; begin Result := TBox_To(pt, size); end;
function TBox_To2(const pt: TPoint; const width, height: Int32): TBox; overload; cdecl; begin Result := TBox_At(pt, width, height); end;
function TBox_W1(const bx: TBox): Int32; overload; cdecl; begin Result := TBox_W(bx); end;
function TBox_W2(var bx: TBox; const width: Int32): Int32; overload; cdecl; begin Result := TBox_W(bx, width); end;
function TBox_Width1(const bx: TBox): Int32; overload; cdecl; begin Result := TBox_Width(bx); end;
function TBox_Width2(var bx: TBox; const width: Int32): Int32; overload; cdecl; begin Result := TBox_Width(bx, width); end;
function TBox_H1(const bx: TBox): Int32; overload; cdecl; begin Result := TBox_H(bx); end;
function TBox_H2(var bx: TBox; const height: Int32): Int32; overload; cdecl; begin Result := TBox_H(bx, height); end;
function TBox_Height1(const bx: TBox): Int32; overload; cdecl; begin Result := TBox_Height(bx); end;
function TBox_Height2(var bx: TBox; const height: Int32): Int32; overload; cdecl; begin Result := TBox_Height(bx, height); end;
function TBox_Contains1(const bx: TBox; const pt: TPoint): Boolean; overload; cdecl; begin Result := TBox_Contains(bx, pt); end;
function TBox_Contains2(const bx, x: TBox): Boolean; overload; cdecl; begin Result := TBox_Contains(bx, x); end;
function TBox_In1(const bx, area: TBox): Boolean; overload; cdecl; begin Result := TBox_In(bx, area); end;
function TBox_In2(const bx: TBox; const areas: TBoxArray): Boolean; overload; cdecl; begin Result := TBox_In(bx, areas); end;
function TBox_Inside1(const bx, area: TBox): Boolean; overload; cdecl; begin Result := TBox_Inside(bx, area); end;
function TBox_Inside2(const bx: TBox; const areas: TBoxArray): Boolean; overload; cdecl; begin Result := TBox_Inside(bx, areas); end;
function TBox_Similar1(const a, b: TBox; const maxWDiff, maxHDiff: Int32): Boolean; overload; cdecl; begin Result := TBox_Similar(a, b, maxWDiff, maxHDiff); end;
function TBox_Similar2(const a, b: TBox; const diff: Int32): Boolean; overload; cdecl; begin Result := TBox_Similar(a, b, diff); end;
function TBox_SimilarSize1(const a, b: TBox; const widthDifferency, heightDifferency: Int32): Boolean; overload; cdecl; begin Result := TBox_SimilarSize(a, b, widthDifferency, heightDifferency); end;
function TBox_SimilarSize1(const a, b: TBox; const differency: Integer): Boolean; overload; cdecl; begin Result := TBox_SimilarSize(a, b, differency); end;

function TIntegerArray_Maxi1(const arr: TIntegerArray; const ascending: Boolean = True; const start: Int32 = -1): Int32; overload; cdecl; begin Result := TIntegerArray_Maxi(arr, ascending, start); end;
function TIntegerArray_Maxi2(const arr: TIntegerArray; const start: Int32; const ascending: Boolean = True): Int32; overload; cdecl; begin Result := TIntegerArray_Maxi(arr, start, ascending); end;
function TIntegerArray_Mini1(const arr: TIntegerArray; const ascending: Boolean = True; const start: Int32 = -1): Int32; overload; cdecl; begin Result := TIntegerArray_Mini(arr, ascending, start); end;
function TIntegerArray_Mini2(const arr: TIntegerArray; const start: Int32; const ascending: Boolean = True): Int32; overload; cdecl; begin Result := TIntegerArray_Mini(arr, start, ascending); end;
function TIntegerArray_Split1(const arr: TIntegerArray; const minDiff, maxDiff: Int32): T2DIntegerArray; overload; cdecl; begin Result := TIntegerArray_Split(arr, minDiff, maxDiff); end;
function TIntegerArray_Split2(const arr: TIntegerArray; const diff: Int32): T2DIntegerArray; overload; cdecl; begin Result := TIntegerArray_Split(arr, diff); end;
function TIntegerArray_Sblit1(const arr: TIntegerArray; const minDiff, maxDiff: Int32): T2DIntegerArray; overload; cdecl; begin Result := TIntegerArray_Sblit(arr, minDiff, maxDiff); end;
function TIntegerArray_Sblit2(const arr: TIntegerArray; const diff: Int32): T2DIntegerArray; overload; cdecl; begin Result := TIntegerArray_Sblit(arr, diff); end;
function TIntegerArray_Group1(const arr: TIntegerArray; const minDiff, maxDiff: Int32): T2DIntegerArray; overload; cdecl; begin Result := TIntegerArray_Group(arr, minDiff, maxDiff); end;
function TIntegerArray_Group2(const arr: TIntegerArray; const diff: Int32): T2DIntegerArray; overload; cdecl; begin Result := TIntegerArray_Group(arr, diff); end;
function TIntegerArray_Groub1(const arr: TIntegerArray; const minDiff, maxDiff: Int32): T2DIntegerArray; overload; cdecl; begin Result := TIntegerArray_Groub(arr, minDiff, maxDiff); end;
function TIntegerArray_Groub2(const arr: TIntegerArray; const diff: Int32): T2DIntegerArray; overload; cdecl; begin Result := TIntegerArray_Groub(arr, diff); end;

function TPointArray_FloodFill1(const arr: TPointArray; const start: TPoint; const area: TBox; const scan8W: Boolean = False): TPointArray; overload; cdecl; begin Result := TPointArray_FloodFill(arr, start, scan8W); end;
function TPointArray_FloodFill2(const arr: TPointArray; const start: TPoint; const scan8W: Boolean = False): TPointArray; overload; cdecl; begin Result := TPointArray_FloodFill(arr, start, scan8W); end;

function TArray_Add_Int32(const arr: TIntegerArray; const item: Int32): TIntegerArray; overload; cdecl; begin Result := TArray_Add(arr, item); end;
function TArray_Add_Double(const arr: TDoubleArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := TArray_Add(arr, item); end;
function TArray_Add_String(const arr: TStringArray; const item: string): TStringArray; overload; cdecl; begin Result := TArray_Add(arr, item); end;
function TArray_Add_Char(const arr: TCharArray; const item: Char): TCharArray; overload; cdecl; begin Result := TArray_Add(arr, item); end;
function TArray_Add_Boolean(const arr: TBooleanArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := TArray_Add(arr, item); end;
function TArray_Add_TPoint(const arr: TPointArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := TArray_Add(arr, item); end;
function TArray_Add_TBox(const arr: TBoxArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := TArray_Add(arr, item); end;
function TArray_Add_TRange(const arr: TRangeArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := TArray_Add(arr, item); end;
function TArray_Add_Int32_1(const arr: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Add(arr, items); end;
function TArray_Add_Double_1(const arr: TDoubleArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Add(arr, items); end;
function TArray_Add_String_1(const arr: TStringArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Add(arr, items); end;
function TArray_Add_Char_1(const arr: TCharArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Add(arr, items); end;
function TArray_Add_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Add(arr, items); end;
function TArray_Add_TPoint_1(const arr: TPointArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Add(arr, items); end;
function TArray_Add_TBox_1(const arr: TBoxArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Add(arr, items); end;
function TArray_Add_TRange_1(const arr: TRangeArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Add(arr, items); end;

function TArray_AllEqual_Int32(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_Double(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_String(const arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_Char(const arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_TPoint(const arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_TBox(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;
function TArray_AllEqual_TRange(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_AllEqual(arr); end;

function TArray_AllSame_Int32(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_Double(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_String(const arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_Char(const arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_TPoint(const arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_TBox(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;
function TArray_AllSame_TRange(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_AllSame(arr); end;

function TArray_AllUnique_Int32(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_Double(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_String(const arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_Char(const arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_TPoint(const arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_TBox(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;
function TArray_AllUnique_TRange(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_AllUnique(arr); end;

function TArray_Append_Int32(var arr: TIntegerArray; const item: Int32): Int32; overload; cdecl; begin Result := TArray_Append(arr, item); end;
function TArray_Append_Double(var arr: TDoubleArray; const item: Double): Int32; overload; cdecl; begin Result := TArray_Append(arr, item); end;
function TArray_Append_String(var arr: TStringArray; const item: string): Int32; overload; cdecl; begin Result := TArray_Append(arr, item); end;
function TArray_Append_Char(var arr: TCharArray; const item: Char): Int32; overload; cdecl; begin Result := TArray_Append(arr, item); end;
function TArray_Append_Boolean(var arr: TBooleanArray; const item: Boolean): Int32; overload; cdecl; begin Result := TArray_Append(arr, item); end;
function TArray_Append_TPoint(var arr: TPointArray; const item: TPoint): Int32; overload; cdecl; begin Result := TArray_Append(arr, item); end;
function TArray_Append_TBox(var arr: TBoxArray; const item: TBox): Int32; overload; cdecl; begin Result := TArray_Append(arr, item); end;
function TArray_Append_TRange(var arr: TRangeArray; const item: TRange): Int32; overload; cdecl; begin Result := TArray_Append(arr, item); end;
function TArray_Append_Int32_1(var arr: TIntegerArray; const items: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Append(arr, items); end;
function TArray_Append_Double_1(var arr: TDoubleArray; const items: TDoubleArray): Int32; overload; cdecl; begin Result := TArray_Append(arr, items); end;
function TArray_Append_String_1(var arr: TStringArray; const items: TStringArray): Int32; overload; cdecl; begin Result := TArray_Append(arr, items); end;
function TArray_Append_Char_1(var arr: TCharArray; const items: TCharArray): Int32; overload; cdecl; begin Result := TArray_Append(arr, items); end;
function TArray_Append_Boolean_1(var arr: TBooleanArray; const items: TBooleanArray): Int32; overload; cdecl; begin Result := TArray_Append(arr, items); end;
function TArray_Append_TPoint_1(var arr: TPointArray; const items: TPointArray): Int32; overload; cdecl; begin Result := TArray_Append(arr, items); end;
function TArray_Append_TBox_1(var arr: TBoxArray; const items: TBoxArray): Int32; overload; cdecl; begin Result := TArray_Append(arr, items); end;
function TArray_Append_TRange_1(var arr: TRangeArray; const items: TRangeArray): Int32; overload; cdecl; begin Result := TArray_Append(arr, items); end;

function TArray_Build_Int32(const item: Int32; const size: Int32 = 1): TIntegerArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_Double(const item: Double; const size: Int32 = 1): TDoubleArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_String(const item: string; const size: Int32 = 1): TStringArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_Char(const item: Char; const size: Int32 = 1): TCharArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_Boolean(const item: Boolean; const size: Int32 = 1): TBooleanArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_TPoint(const item: TPoint; const size: Int32 = 1): TPointArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_TBox(const item: TBox; const size: Int32 = 1): TBoxArray; overload; cdecl; begin Result := TArray_Build(item, size); end;
function TArray_Build_TRange(const item: TRange; const size: Int32 = 1): TRangeArray; overload; cdecl; begin Result := TArray_Build(item, size); end;

function TArray_BuiltWith_Int32(const arr, allowed: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_Double(const arr, allowed: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_String(const arr, allowed: TStringArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_Char(const arr, allowed: TCharArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_Boolean(const arr, allowed: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_TPoint(const arr, allowed: TPointArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_TBox(const arr, allowed: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;
function TArray_BuiltWith_TRange(const arr, allowed: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWith(arr, allowed); end;

function TArray_BuiltWithout_Int32(const arr, forbidden: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_Double(const arr, forbidden: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_String(const arr, forbidden: TStringArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_Char(const arr, forbidden: TCharArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_Boolean(const arr, forbidden: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_TPoint(const arr, forbidden: TPointArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_TBox(const arr, forbidden: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;
function TArray_BuiltWithout_TRange(const arr, forbidden: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_BuiltWithout(arr, forbidden); end;

function TArray_Clone_Int32(const arr: TIntegerArray; const startIndex: Int32 = 0; const count: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Clone(arr, startIndex, count); end;
function TArray_Clone_Double(const arr: TDoubleArray; const startIndex: Int32 = 0; const count: Int32 = 2147483647): TDoubleArray; overload; cdecl; begin Result := TArray_Clone(arr, startIndex, count); end;
function TArray_Clone_String(const arr: TStringArray; const startIndex: Int32 = 0; const count: Int32 = 2147483647): TStringArray; overload; cdecl; begin Result := TArray_Clone(arr, startIndex, count); end;
function TArray_Clone_Char(const arr: TCharArray; const startIndex: Int32 = 0; const count: Int32 = 2147483647): TCharArray; overload; cdecl; begin Result := TArray_Clone(arr, startIndex, count); end;
function TArray_Clone_Boolean(const arr: TBooleanArray; const startIndex: Int32 = 0; const count: Int32 = 2147483647): TBooleanArray; overload; cdecl; begin Result := TArray_Clone(arr, startIndex, count); end;
function TArray_Clone_TPoint(const arr: TPointArray; const startIndex: Int32 = 0; const count: Int32 = 2147483647): TPointArray; overload; cdecl; begin Result := TArray_Clone(arr, startIndex, count); end;
function TArray_Clone_TBox(const arr: TBoxArray; const startIndex: Int32 = 0; const count: Int32 = 2147483647): TBoxArray; overload; cdecl; begin Result := TArray_Clone(arr, startIndex, count); end;
function TArray_Clone_TRange(const arr: TRangeArray; const startIndex: Int32 = 0; const count: Int32 = 2147483647): TRangeArray; overload; cdecl; begin Result := TArray_Clone(arr, startIndex, count); end;

function TArray_Combine_Int32(const a, b: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_Double(const a, b: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_String(const a, b: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_Char(const a, b: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_Boolean(const a, b: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_TPoint(const a, b: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_TBox(const a, b: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;
function TArray_Combine_TRange(const a, b: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Combine(a, b); end;

function TArray_Contains_Int32(const arr: TIntegerArray; const item: Int32; const start: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, start); end;
function TArray_Contains_Double(const arr: TDoubleArray; const item: Double; const start: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, start); end;
function TArray_Contains_String(const arr: TStringArray; const item: string; const start: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, start); end;
function TArray_Contains_Char(const arr: TCharArray; const item: Char; const start: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, start); end;
function TArray_Contains_Boolean(const arr: TBooleanArray; const item: Boolean; const start: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, start); end;
function TArray_Contains_TPoint(const arr: TPointArray; const item: TPoint; const start: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, start); end;
function TArray_Contains_TBox(const arr: TBoxArray; const item: TBox; const start: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, start); end;
function TArray_Contains_TRange(const arr: TRangeArray; const item: TRange; const start: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Contains(arr, item, start); end;

function TArray_Copy_Int32(const arr: TIntegerArray; const index: Int32 = 0; const count: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_Double(const arr: TDoubleArray; const index: Int32 = 0; const count: Int32 = 2147483647): TDoubleArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_String(const arr: TStringArray; const index: Int32 = 0; const count: Int32 = 2147483647): TStringArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_Char(const arr: TCharArray; const index: Int32 = 0; const count: Int32 = 2147483647): TCharArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_Boolean(const arr: TBooleanArray; const index: Int32 = 0; const count: Int32 = 2147483647): TBooleanArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_TPoint(const arr: TPointArray; const index: Int32 = 0; const count: Int32 = 2147483647): TPointArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_TBox(const arr: TBoxArray; const index: Int32 = 0; const count: Int32 = 2147483647): TBoxArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_TRange(const arr: TRangeArray; const index: Int32 = 0; const count: Int32 = 2147483647): TRangeArray; overload; cdecl; begin Result := TArray_Copy(arr, index, count); end;
function TArray_Copy_Int32_1(const arr: TIntegerArray; const IDs: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_Double_1(const arr: TDoubleArray; const IDs: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_String_1(const arr: TStringArray; const IDs: TIntegerArray): TStringArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_Char_1(const arr: TCharArray; const IDs: TIntegerArray): TCharArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_Boolean_1(const arr: TBooleanArray; const IDs: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_TPoint_1(const arr: TPointArray; const IDs: TIntegerArray): TPointArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_TBox_1(const arr: TBoxArray; const IDs: TIntegerArray): TBoxArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;
function TArray_Copy_TRange_1(const arr: TRangeArray; const IDs: TIntegerArray): TRangeArray; overload; cdecl; begin Result := TArray_Copy(arr, IDs); end;

function TArray_Create_Int32(const item: Int32): TIntegerArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_Double(const item: Double): TDoubleArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_String(const item: string): TStringArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_Char(const item: Char): TCharArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_Boolean(const item: Boolean): TBooleanArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_TPoint(const item: TPoint): TPointArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_TBox(const item: TBox): TBoxArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_TRange(const item: TRange): TRangeArray; overload; cdecl; begin Result := TArray_Create(item); end;
function TArray_Create_Int32_1(const size: Int32; const item: Int32): TIntegerArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_Double_1(const size: Int32; const item: Double): TDoubleArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_String_1(const size: Int32; const item: string): TStringArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_Char_1(const size: Int32; const item: Char): TCharArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_Boolean_1(const size: Int32; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_TPoint_1(const size: Int32; const item: TPoint): TPointArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_TBox_1(const size: Int32; const item: TBox): TBoxArray; overload; cdecl; begin Result := TArray_Create(size, item); end;
function TArray_Create_TRange_1(const size: Int32; const item: TRange): TRangeArray; overload; cdecl; begin Result := TArray_Create(size, item); end;

function TArray_Delete_Int32(var arr: TIntegerArray; const index: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_Double(var arr: TDoubleArray; const index: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_String(var arr: TStringArray; const index: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_Char(var arr: TCharArray; const index: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_Boolean(var arr: TBooleanArray; const index: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_TPoint(var arr: TPointArray; const index: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_TBox(var arr: TBoxArray; const index: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_TRange(var arr: TRangeArray; const index: Int32 = 0): Boolean; overload; cdecl; begin Result := TArray_Delete(arr, index); end;
function TArray_Delete_Int32_1(var arr: TIntegerArray; const IDs: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_Double_1(var arr: TDoubleArray; const IDs: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_String_1(var arr: TStringArray; const IDs: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_Char_1(var arr: TCharArray; const IDs: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_Boolean_1(var arr: TBooleanArray; const IDs: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_TPoint_1(var arr: TPointArray; const IDs: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_TBox_1(var arr: TBoxArray; const IDs: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;
function TArray_Delete_TRange_1(var arr: TRangeArray; const IDs: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Delete(arr, IDs); end;

function TArray_Differ_Int32(const arr, target: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_Double(const arr, target: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_String(const arr, target: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_Char(const arr, target: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_Boolean(const arr, target: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_TPoint(const arr, target: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_TBox(const arr, target: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;
function TArray_Differ_TRange(const arr, target: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Differ(arr, target); end;

function TArray_Distribute_Int32(const arr: TIntegerArray; const parts: Int32): T2DIntegerArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_Double(const arr: TDoubleArray; const parts: Int32): T2DDoubleArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_String(const arr: TStringArray; const parts: Int32): T2DStringArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_Char(const arr: TCharArray; const parts: Int32): T2DCharArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_Boolean(const arr: TBooleanArray; const parts: Int32): T2DBooleanArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_TPoint(const arr: TPointArray; const parts: Int32): T2DPointArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_TBox(const arr: TBoxArray; const parts: Int32): T2DBoxArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;
function TArray_Distribute_TRange(const arr: TRangeArray; const parts: Int32): T2DRangeArray; overload; cdecl; begin Result := TArray_Distribute(arr, parts); end;

function TArray_Dump_Int32(var arr: TIntegerArray; const items: TIntegerArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_Double(var arr: TDoubleArray; const items: TDoubleArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_String(var arr: TStringArray; const items: TStringArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_Char(var arr: TCharArray; const items: TCharArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_Boolean(var arr: TBooleanArray; const items: TBooleanArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_TPoint(var arr: TPointArray; const items: TPointArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_TBox(var arr: TBoxArray; const items: TBoxArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;
function TArray_Dump_TRange(var arr: TRangeArray; const items: TRangeArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Dump(arr, items, index); end;

function TArray_Dupe_Int32(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_Double(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_String(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_Char(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_Boolean(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_TPoint(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_TBox(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;
function TArray_Dupe_TRange(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Dupe(arr); end;

function TArray_Empty_Int32(const arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_Double(const arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_String(const arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_Char(const arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_TPoint(const arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_TBox(const arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;
function TArray_Empty_TRange(const arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Empty(arr); end;

function TArray_Equal_Int32(const arr, target: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_Double(const arr, target: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_String(const arr, target: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_Char(const arr, target: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_Boolean(const arr, target: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_TPoint(const arr, target: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_TBox(const arr, target: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;
function TArray_Equal_TRange(const arr, target: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Equal(arr, target); end;

function TArray_Extend_Int32(const arr: TIntegerArray; const item: Int32): TIntegerArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_Double(const arr: TDoubleArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_String(const arr: TStringArray; const item: string): TStringArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_Char(const arr: TCharArray; const item: Char): TCharArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_Boolean(const arr: TBooleanArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_TPoint(const arr: TPointArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_TBox(const arr: TBoxArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_TRange(const arr: TRangeArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := TArray_Extend(arr, item); end;
function TArray_Extend_Int32_1(const arr: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_Double_1(const arr: TDoubleArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_String_1(const arr: TStringArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_Char_1(const arr: TCharArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_TPoint_1(const arr: TPointArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_TBox_1(const arr: TBoxArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;
function TArray_Extend_TRange_1(const arr: TRangeArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Extend(arr, items); end;

function TArray_Extract_Int32(const arr: TIntegerArray; const item: Int32; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Extract(arr, item, start); end;
function TArray_Extract_Double(const arr: TDoubleArray; const item: Double; const start: Int32 = 0): TDoubleArray; overload; cdecl; begin Result := TArray_Extract(arr, item, start); end;
function TArray_Extract_String(const arr: TStringArray; const item: string; const start: Int32 = 0): TStringArray; overload; cdecl; begin Result := TArray_Extract(arr, item, start); end;
function TArray_Extract_Char(const arr: TCharArray; const item: Char; const start: Int32 = 0): TCharArray; overload; cdecl; begin Result := TArray_Extract(arr, item, start); end;
function TArray_Extract_Boolean(const arr: TBooleanArray; const item: Boolean; const start: Int32 = 0): TBooleanArray; overload; cdecl; begin Result := TArray_Extract(arr, item, start); end;
function TArray_Extract_TPoint(const arr: TPointArray; const item: TPoint; const start: Int32 = 0): TPointArray; overload; cdecl; begin Result := TArray_Extract(arr, item, start); end;
function TArray_Extract_TBox(const arr: TBoxArray; const item: TBox; const start: Int32 = 0): TBoxArray; overload; cdecl; begin Result := TArray_Extract(arr, item, start); end;
function TArray_Extract_TRange(const arr: TRangeArray; const item: TRange; const start: Int32 = 0): TRangeArray; overload; cdecl; begin Result := TArray_Extract(arr, item, start); end;
function TArray_Extract_Int32_1(const arr: TIntegerArray; const items: TIntegerArray; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Extract(arr, items, start); end;
function TArray_Extract_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const start: Int32 = 0): TDoubleArray; overload; cdecl; begin Result := TArray_Extract(arr, items, start); end;
function TArray_Extract_String_1(const arr: TStringArray; const items: TStringArray; const start: Int32 = 0): TStringArray; overload; cdecl; begin Result := TArray_Extract(arr, items, start); end;
function TArray_Extract_Char_1(const arr: TCharArray; const items: TCharArray; const start: Int32 = 0): TCharArray; overload; cdecl; begin Result := TArray_Extract(arr, items, start); end;
function TArray_Extract_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const start: Int32 = 0): TBooleanArray; overload; cdecl; begin Result := TArray_Extract(arr, items, start); end;
function TArray_Extract_TPoint_1(const arr: TPointArray; const items: TPointArray; const start: Int32 = 0): TPointArray; overload; cdecl; begin Result := TArray_Extract(arr, items, start); end;
function TArray_Extract_TBox_1(const arr: TBoxArray; const items: TBoxArray; const start: Int32 = 0): TBoxArray; overload; cdecl; begin Result := TArray_Extract(arr, items, start); end;
function TArray_Extract_TRange_1(const arr: TRangeArray; const items: TRangeArray; const start: Int32 = 0): TRangeArray; overload; cdecl; begin Result := TArray_Extract(arr, items, start); end;

function TArray_ExtractEvery_Int32(const arr: TIntegerArray; const X: Int32 = 1; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, start); end;
function TArray_ExtractEvery_Double(const arr: TDoubleArray; const X: Int32 = 1; const start: Int32 = 0): TDoubleArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, start); end;
function TArray_ExtractEvery_String(const arr: TStringArray; const X: Int32 = 1; const start: Int32 = 0): TStringArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, start); end;
function TArray_ExtractEvery_Char(const arr: TCharArray; const X: Int32 = 1; const start: Int32 = 0): TCharArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, start); end;
function TArray_ExtractEvery_Boolean(const arr: TBooleanArray; const X: Int32 = 1; const start: Int32 = 0): TBooleanArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, start); end;
function TArray_ExtractEvery_TPoint(const arr: TPointArray; const X: Int32 = 1; const start: Int32 = 0): TPointArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, start); end;
function TArray_ExtractEvery_TBox(const arr: TBoxArray; const X: Int32 = 1; const start: Int32 = 0): TBoxArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, start); end;
function TArray_ExtractEvery_TRange(const arr: TRangeArray; const X: Int32 = 1; const start: Int32 = 0): TRangeArray; overload; cdecl; begin Result := TArray_ExtractEvery(arr, X, start); end;

function TArray_Fill_Int32(const arr: TIntegerArray; const item: Int32; const start: Int32 = 0; const count: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Fill(arr, item, start, count); end;
function TArray_Fill_Double(const arr: TDoubleArray; const item: Double; const start: Int32 = 0; const count: Int32 = 2147483647): TDoubleArray; overload; cdecl; begin Result := TArray_Fill(arr, item, start, count); end;
function TArray_Fill_String(const arr: TStringArray; const item: string; const start: Int32 = 0; const count: Int32 = 2147483647): TStringArray; overload; cdecl; begin Result := TArray_Fill(arr, item, start, count); end;
function TArray_Fill_Char(const arr: TCharArray; const item: Char; const start: Int32 = 0; const count: Int32 = 2147483647): TCharArray; overload; cdecl; begin Result := TArray_Fill(arr, item, start, count); end;
function TArray_Fill_Boolean(const arr: TBooleanArray; const item: Boolean; const start: Int32 = 0; const count: Int32 = 2147483647): TBooleanArray; overload; cdecl; begin Result := TArray_Fill(arr, item, start, count); end;
function TArray_Fill_TPoint(const arr: TPointArray; const item: TPoint; const start: Int32 = 0; const count: Int32 = 2147483647): TPointArray; overload; cdecl; begin Result := TArray_Fill(arr, item, start, count); end;
function TArray_Fill_TBox(const arr: TBoxArray; const item: TBox; const start: Int32 = 0; const count: Int32 = 2147483647): TBoxArray; overload; cdecl; begin Result := TArray_Fill(arr, item, start, count); end;
function TArray_Fill_TRange(const arr: TRangeArray; const item: TRange; const start: Int32 = 0; const count: Int32 = 2147483647): TRangeArray; overload; cdecl; begin Result := TArray_Fill(arr, item, start, count); end;
function TArray_Fill_Int32_1(const arr: TIntegerArray; const items: TIntegerArray; const start: Int32 = 0; const count: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_Fill(arr, items, start, count); end;
function TArray_Fill_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const start: Int32 = 0; const count: Int32 = 2147483647): TDoubleArray; overload; cdecl; begin Result := TArray_Fill(arr, items, start, count); end;
function TArray_Fill_String_1(const arr: TStringArray; const items: TStringArray; const start: Int32 = 0; const count: Int32 = 2147483647): TStringArray; overload; cdecl; begin Result := TArray_Fill(arr, items, start, count); end;
function TArray_Fill_Char_1(const arr: TCharArray; const items: TCharArray; const start: Int32 = 0; const count: Int32 = 2147483647): TCharArray; overload; cdecl; begin Result := TArray_Fill(arr, items, start, count); end;
function TArray_Fill_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const start: Int32 = 0; const count: Int32 = 2147483647): TBooleanArray; overload; cdecl; begin Result := TArray_Fill(arr, items, start, count); end;
function TArray_Fill_TPoint_1(const arr: TPointArray; const items: TPointArray; const start: Int32 = 0; const count: Int32 = 2147483647): TPointArray; overload; cdecl; begin Result := TArray_Fill(arr, items, start, count); end;
function TArray_Fill_TBox_1(const arr: TBoxArray; const items: TBoxArray; const start: Int32 = 0; const count: Int32 = 2147483647): TBoxArray; overload; cdecl; begin Result := TArray_Fill(arr, items, start, count); end;
function TArray_Fill_TRange_1(const arr: TRangeArray; const items: TRangeArray; const start: Int32 = 0; const count: Int32 = 2147483647): TRangeArray; overload; cdecl; begin Result := TArray_Fill(arr, items, start, count); end;

function TArray_Filter_Int32(const arr: TIntegerArray; const item: Int32; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Filter(arr, item, start); end;
function TArray_Filter_Double(const arr: TDoubleArray; const item: Double; const start: Int32 = 0): TDoubleArray; overload; cdecl; begin Result := TArray_Filter(arr, item, start); end;
function TArray_Filter_String(const arr: TStringArray; const item: string; const start: Int32 = 0): TStringArray; overload; cdecl; begin Result := TArray_Filter(arr, item, start); end;
function TArray_Filter_Char(const arr: TCharArray; const item: Char; const start: Int32 = 0): TCharArray; overload; cdecl; begin Result := TArray_Filter(arr, item, start); end;
function TArray_Filter_Boolean(const arr: TBooleanArray; const item: Boolean; const start: Int32 = 0): TBooleanArray; overload; cdecl; begin Result := TArray_Filter(arr, item, start); end;
function TArray_Filter_TPoint(const arr: TPointArray; const item: TPoint; const start: Int32 = 0): TPointArray; overload; cdecl; begin Result := TArray_Filter(arr, item, start); end;
function TArray_Filter_TBox(const arr: TBoxArray; const item: TBox; const start: Int32 = 0): TBoxArray; overload; cdecl; begin Result := TArray_Filter(arr, item, start); end;
function TArray_Filter_TRange(const arr: TRangeArray; const item: TRange; const start: Int32 = 0): TRangeArray; overload; cdecl; begin Result := TArray_Filter(arr, item, start); end;
function TArray_Filter_Int32_1(const arr: TIntegerArray; const items: TIntegerArray; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Filter(arr, items, start); end;
function TArray_Filter_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const start: Int32 = 0): TDoubleArray; overload; cdecl; begin Result := TArray_Filter(arr, items, start); end;
function TArray_Filter_String_1(const arr: TStringArray; const items: TStringArray; const start: Int32 = 0): TStringArray; overload; cdecl; begin Result := TArray_Filter(arr, items, start); end;
function TArray_Filter_Char_1(const arr: TCharArray; const items: TCharArray; const start: Int32 = 0): TCharArray; overload; cdecl; begin Result := TArray_Filter(arr, items, start); end;
function TArray_Filter_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const start: Int32 = 0): TBooleanArray; overload; cdecl; begin Result := TArray_Filter(arr, items, start); end;
function TArray_Filter_TPoint_1(const arr: TPointArray; const items: TPointArray; const start: Int32 = 0): TPointArray; overload; cdecl; begin Result := TArray_Filter(arr, items, start); end;
function TArray_Filter_TBox_1(const arr: TBoxArray; const items: TBoxArray; const start: Int32 = 0): TBoxArray; overload; cdecl; begin Result := TArray_Filter(arr, items, start); end;
function TArray_Filter_TRange_1(const arr: TRangeArray; const items: TRangeArray; const start: Int32 = 0): TRangeArray; overload; cdecl; begin Result := TArray_Filter(arr, items, start); end;

function TArray_FilterEvery_Int32(const arr: TIntegerArray; const X: Int32 = 1; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, start); end;
function TArray_FilterEvery_Double(const arr: TDoubleArray; const X: Int32 = 1; const start: Int32 = 0): TDoubleArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, start); end;
function TArray_FilterEvery_String(const arr: TStringArray; const X: Int32 = 1; const start: Int32 = 0): TStringArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, start); end;
function TArray_FilterEvery_Char(const arr: TCharArray; const X: Int32 = 1; const start: Int32 = 0): TCharArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, start); end;
function TArray_FilterEvery_Boolean(const arr: TBooleanArray; const X: Int32 = 1; const start: Int32 = 0): TBooleanArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, start); end;
function TArray_FilterEvery_TPoint(const arr: TPointArray; const X: Int32 = 1; const start: Int32 = 0): TPointArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, start); end;
function TArray_FilterEvery_TBox(const arr: TBoxArray; const X: Int32 = 1; const start: Int32 = 0): TBoxArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, start); end;
function TArray_FilterEvery_TRange(const arr: TRangeArray; const X: Int32 = 1; const start: Int32 = 0): TRangeArray; overload; cdecl; begin Result := TArray_FilterEvery(arr, X, start); end;

function TArray_Flip_Int32(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_Double(var arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_String(var arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_Char(var arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_Boolean(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_TPoint(var arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_TBox(var arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;
function TArray_Flip_TRange(var arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Flip(arr); end;

function TArray_Get_Int32(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_Double(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_String(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_Char(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_Boolean(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_TPoint(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_TBox(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_TRange(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Get(arr); end;
function TArray_Get_Int32_1(const arr: TIntegerArray; const IDs: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_Double_1(const arr: TDoubleArray; const IDs: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_String_1(const arr: TStringArray; const IDs: TIntegerArray): TStringArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_Char_1(const arr: TCharArray; const IDs: TIntegerArray): TCharArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_Boolean_1(const arr: TBooleanArray; const IDs: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_TPoint_1(const arr: TPointArray; const IDs: TIntegerArray): TPointArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_TBox_1(const arr: TBoxArray; const IDs: TIntegerArray): TBoxArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;
function TArray_Get_TRange_1(const arr: TRangeArray; const IDs: TIntegerArray): TRangeArray; overload; cdecl; begin Result := TArray_Get(arr, IDs); end;

function TArray_Group_Int32(const arr: TIntegerArray): T2DIntegerArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_Double(const arr: TDoubleArray): T2DDoubleArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_String(const arr: TStringArray): T2DStringArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_Char(const arr: TCharArray): T2DCharArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_Boolean(const arr: TBooleanArray): T2DBooleanArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_TPoint(const arr: TPointArray): T2DPointArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_TBox(const arr: TBoxArray): T2DBoxArray; overload; cdecl; begin Result := TArray_Group(arr); end;
function TArray_Group_TRange(const arr: TRangeArray): T2DRangeArray; overload; cdecl; begin Result := TArray_Group(arr); end;

function TArray_Holds_Int32(const arr, chain: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_Double(const arr, chain: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_String(const arr, chain: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_Char(const arr, chain: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_Boolean(const arr, chain: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_TPoint(const arr, chain: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_TBox(const arr, chain: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;
function TArray_Holds_TRange(const arr, chain: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Holds(arr, chain); end;

function TArray_IDs_Int32(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_Double(const arr: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_String(const arr: TStringArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_Char(const arr: TCharArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_Boolean(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_TPoint(const arr: TPointArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_TBox(const arr: TBoxArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_TRange(const arr: TRangeArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr); end;
function TArray_IDs_Int32_1(const arr: TIntegerArray; const IDs: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_Double_1(const arr: TDoubleArray; const IDs: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_String_1(const arr: TStringArray; const IDs: TIntegerArray): TStringArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_Char_1(const arr: TCharArray; const IDs: TIntegerArray): TCharArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_Boolean_1(const arr: TBooleanArray; const IDs: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_TPoint_1(const arr: TPointArray; const IDs: TIntegerArray): TPointArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_TBox_1(const arr: TBoxArray; const IDs: TIntegerArray): TBoxArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_TRange_1(const arr: TRangeArray; const IDs: TIntegerArray): TRangeArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs); end;
function TArray_IDs_Int32_2(const arr: TIntegerArray; const IDs: TIntegerArray; const item: Int32): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_Double_2(const arr: TDoubleArray; const IDs: TIntegerArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_String_2(const arr: TStringArray; const IDs: TIntegerArray; const item: string): TStringArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_Char_2(const arr: TCharArray; const IDs: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_Boolean_2(const arr: TBooleanArray; const IDs: TIntegerArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_TPoint_2(const arr: TPointArray; const IDs: TIntegerArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_TBox_2(const arr: TBoxArray; const IDs: TIntegerArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_TRange_2(const arr: TRangeArray; const IDs: TIntegerArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, item); end;
function TArray_IDs_Int32_3(const arr: TIntegerArray; const IDs: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_Double_3(const arr: TDoubleArray; const IDs: TIntegerArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_String_3(const arr: TStringArray; const IDs: TIntegerArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_Char_3(const arr: TCharArray; const IDs: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_Boolean_3(const arr: TBooleanArray; const IDs: TIntegerArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_TPoint_3(const arr: TPointArray; const IDs: TIntegerArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_TBox_3(const arr: TBoxArray; const IDs: TIntegerArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;
function TArray_IDs_TRange_3(const arr: TRangeArray; const IDs: TIntegerArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_IDs(arr, IDs, items); end;

function TArray_Includes_Int32(const arr: TIntegerArray; const item: Int32; const start: Int32 = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, start); end;
function TArray_Includes_Double(const arr: TDoubleArray; const item: Double; const start: Int32 = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, start); end;
function TArray_Includes_String(const arr: TStringArray; const item: string; const start: Int32 = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, start); end;
function TArray_Includes_Char(const arr: TCharArray; const item: Char; const start: Int32 = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, start); end;
function TArray_Includes_Boolean(const arr: TBooleanArray; const item: Boolean; const start: Int32 = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, start); end;
function TArray_Includes_TPoint(const arr: TPointArray; const item: TPoint; const start: Int32 = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, start); end;
function TArray_Includes_TBox(const arr: TBoxArray; const item: TBox; const start: Int32 = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, start); end;
function TArray_Includes_TRange(const arr: TRangeArray; const item: TRange; const start: Int32 = 2147483647): Boolean; overload; cdecl; begin Result := TArray_Includes(arr, item, start); end;

function TArray_Keep_Int32(var arr: TIntegerArray; const items: TIntegerArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_Double(var arr: TDoubleArray; const items: TDoubleArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_String(var arr: TStringArray; const items: TStringArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_Char(var arr: TCharArray; const items: TCharArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_Boolean(var arr: TBooleanArray; const items: TBooleanArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_TPoint(var arr: TPointArray; const items: TPointArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_TBox(var arr: TBoxArray; const items: TBoxArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;
function TArray_Keep_TRange(var arr: TRangeArray; const items: TRangeArray; const index: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Keep(arr, items, index); end;

function TArray_LeastFrequent_Int32(const arr: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_Double(const arr: TDoubleArray): Double; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_String(const arr: TStringArray): string; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_Char(const arr: TCharArray): Char; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_TPoint(const arr: TPointArray): TPoint; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_TBox(const arr: TBoxArray): TBox; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;
function TArray_LeastFrequent_TRange(const arr: TRangeArray): TRange; overload; cdecl; begin Result := TArray_LeastFrequent(arr); end;

function TArray_MostFrequent_Int32(const arr: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_Double(const arr: TDoubleArray): Double; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_String(const arr: TStringArray): string; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_Char(const arr: TCharArray): Char; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_Boolean(const arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_TPoint(const arr: TPointArray): TPoint; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_TBox(const arr: TBoxArray): TBox; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;
function TArray_MostFrequent_TRange(const arr: TRangeArray): TRange; overload; cdecl; begin Result := TArray_MostFrequent(arr); end;

function TArray_Move_Int32(var arr: TIntegerArray; oldIndex, newIndex: Int32): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_Double(var arr: TDoubleArray; oldIndex, newIndex: Int32): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_String(var arr: TStringArray; oldIndex, newIndex: Int32): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_Char(var arr: TCharArray; oldIndex, newIndex: Int32): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_Boolean(var arr: TBooleanArray; oldIndex, newIndex: Int32): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_TPoint(var arr: TPointArray; oldIndex, newIndex: Int32): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_TBox(var arr: TBoxArray; oldIndex, newIndex: Int32): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;
function TArray_Move_TRange(var arr: TRangeArray; oldIndex, newIndex: Int32): Boolean; overload; cdecl; begin Result := TArray_Move(arr, oldIndex, newIndex); end;

function TArray_Oversize_Int32(const arr: TIntegerArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_Double(const arr: TDoubleArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_String(const arr: TStringArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_Char(const arr: TCharArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_Boolean(const arr: TBooleanArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_TPoint(const arr: TPointArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_TBox(const arr: TBoxArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;
function TArray_Oversize_TRange(const arr: TRangeArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Oversize(arr, limit); end;

function TArray_Partition_Int32(const arr: TIntegerArray; const size: Int32): T2DIntegerArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_Double(const arr: TDoubleArray; const size: Int32): T2DDoubleArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_String(const arr: TStringArray; const size: Int32): T2DStringArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_Char(const arr: TCharArray; const size: Int32): T2DCharArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_Boolean(const arr: TBooleanArray; const size: Int32): T2DBooleanArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_TPoint(const arr: TPointArray; const size: Int32): T2DPointArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_TBox(const arr: TBoxArray; const size: Int32): T2DBoxArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;
function TArray_Partition_TRange(const arr: TRangeArray; const size: Int32): T2DRangeArray; overload; cdecl; begin Result := TArray_Partition(arr, size); end;

function TArray_Pick_Int32(var arr: TIntegerArray; const IDs: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_Double(var arr: TDoubleArray; const IDs: TIntegerArray): TDoubleArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_String(var arr: TStringArray; const IDs: TIntegerArray): TStringArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_Char(var arr: TCharArray; const IDs: TIntegerArray): TCharArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_Boolean(var arr: TBooleanArray; const IDs: TIntegerArray): TBooleanArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_TPoint(var arr: TPointArray; const IDs: TIntegerArray): TPointArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_TBox(var arr: TBoxArray; const IDs: TIntegerArray): TBoxArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;
function TArray_Pick_TRange(var arr: TRangeArray; const IDs: TIntegerArray): TRangeArray; overload; cdecl; begin Result := TArray_Pick(arr, IDs); end;

function TArray_Pop_Int32(var arr: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_Double(var arr: TDoubleArray): Double; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_String(var arr: TStringArray): string; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_Char(var arr: TCharArray): Char; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_Boolean(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_TPoint(var arr: TPointArray): TPoint; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_TBox(var arr: TBoxArray): TBox; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_TRange(var arr: TRangeArray): TRange; overload; cdecl; begin Result := TArray_Pop(arr); end;
function TArray_Pop_Int32_1(var arr: TIntegerArray; const null: Int32): Int32; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_Double_1(var arr: TDoubleArray; const null: Double): Double; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_String_1(var arr: TStringArray; const null: string): string; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_Char_1(var arr: TCharArray; const null: Char): Char; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_Boolean_1(var arr: TBooleanArray; const null: Boolean): Boolean; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_TPoint_1(var arr: TPointArray; const null: TPoint): TPoint; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_TBox_1(var arr: TBoxArray; const null: TBox): TBox; overload; cdecl; begin Result := TArray_Pop(arr, null); end;
function TArray_Pop_TRange_1(var arr: TRangeArray; const null: TRange): TRange; overload; cdecl; begin Result := TArray_Pop(arr, null); end;

function TArray_Pos_Int32(const arr: TIntegerArray; const item: Int32; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, item, start); end;
function TArray_Pos_Double(const arr: TDoubleArray; const item: Double; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, item, start); end;
function TArray_Pos_String(const arr: TStringArray; const item: string; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, item, start); end;
function TArray_Pos_Char(const arr: TCharArray; const item: Char; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, item, start); end;
function TArray_Pos_Boolean(const arr: TBooleanArray; const item: Boolean; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, item, start); end;
function TArray_Pos_TPoint(const arr: TPointArray; const item: TPoint; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, item, start); end;
function TArray_Pos_TBox(const arr: TBoxArray; const item: TBox; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, item, start); end;
function TArray_Pos_TRange(const arr: TRangeArray; const item: TRange; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, item, start); end;
function TArray_Pos_Int32_1(const arr: TIntegerArray; const items: TIntegerArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, items, start); end;
function TArray_Pos_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, items, start); end;
function TArray_Pos_String_1(const arr: TStringArray; const items: TStringArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, items, start); end;
function TArray_Pos_Char_1(const arr: TCharArray; const items: TCharArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, items, start); end;
function TArray_Pos_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, items, start); end;
function TArray_Pos_TPoint_1(const arr: TPointArray; const items: TPointArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, items, start); end;
function TArray_Pos_TBox_1(const arr: TBoxArray; const items: TBoxArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, items, start); end;
function TArray_Pos_TRange_1(const arr: TRangeArray; const items: TRangeArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Pos(arr, items, start); end;

function TArray_Position_Int32(const arr: TIntegerArray; const item: Int32; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, item, start); end;
function TArray_Position_Double(const arr: TDoubleArray; const item: Double; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, item, start); end;
function TArray_Position_String(const arr: TStringArray; const item: string; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, item, start); end;
function TArray_Position_Char(const arr: TCharArray; const item: Char; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, item, start); end;
function TArray_Position_Boolean(const arr: TBooleanArray; const item: Boolean; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, item, start); end;
function TArray_Position_TPoint(const arr: TPointArray; const item: TPoint; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, item, start); end;
function TArray_Position_TBox(const arr: TBoxArray; const item: TBox; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, item, start); end;
function TArray_Position_TRange(const arr: TRangeArray; const item: TRange; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, item, start); end;
function TArray_Position_Int32_1(const arr: TIntegerArray; const items: TIntegerArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, items, start); end;
function TArray_Position_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, items, start); end;
function TArray_Position_String_1(const arr: TStringArray; const items: TStringArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, items, start); end;
function TArray_Position_Char_1(const arr: TCharArray; const items: TCharArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, items, start); end;
function TArray_Position_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, items, start); end;
function TArray_Position_TPoint_1(const arr: TPointArray; const items: TPointArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, items, start); end;
function TArray_Position_TBox_1(const arr: TBoxArray; const items: TBoxArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, items, start); end;
function TArray_Position_TRange_1(const arr: TRangeArray; const items: TRangeArray; const start: Int32 = 0): Int32; overload; cdecl; begin Result := TArray_Position(arr, items, start); end;

function TArray_Positions_Int32(const arr: TIntegerArray; const item: Int32; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, start); end;
function TArray_Positions_Double(const arr: TDoubleArray; const item: Double; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, start); end;
function TArray_Positions_String(const arr: TStringArray; const item: string; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, start); end;
function TArray_Positions_Char(const arr: TCharArray; const item: Char; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, start); end;
function TArray_Positions_Boolean(const arr: TBooleanArray; const item: Boolean; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, start); end;
function TArray_Positions_TPoint(const arr: TPointArray; const item: TPoint; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, start); end;
function TArray_Positions_TBox(const arr: TBoxArray; const item: TBox; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, start); end;
function TArray_Positions_TRange(const arr: TRangeArray; const item: TRange; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, item, start); end;
function TArray_Positions_Int32_1(const arr: TIntegerArray; const items: TIntegerArray; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, start); end;
function TArray_Positions_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, start); end;
function TArray_Positions_String_1(const arr: TStringArray; const items: TStringArray; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, start); end;
function TArray_Positions_Char_1(const arr: TCharArray; const items: TCharArray; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, start); end;
function TArray_Positions_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, start); end;
function TArray_Positions_TPoint_1(const arr: TPointArray; const items: TPointArray; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, start); end;
function TArray_Positions_TBox_1(const arr: TBoxArray; const items: TBoxArray; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, start); end;
function TArray_Positions_TRange_1(const arr: TRangeArray; const items: TRangeArray; const start: Int32 = 0): TIntegerArray; overload; cdecl; begin Result := TArray_Positions(arr, items, start); end;

function TArray_PosLast_Int32(const arr: TIntegerArray; const item: Int32; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, item, start); end;
function TArray_PosLast_Double(const arr: TDoubleArray; const item: Double; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, item, start); end;
function TArray_PosLast_String(const arr: TStringArray; const item: string; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, item, start); end;
function TArray_PosLast_Char(const arr: TCharArray; const item: Char; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, item, start); end;
function TArray_PosLast_Boolean(const arr: TBooleanArray; const item: Boolean; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, item, start); end;
function TArray_PosLast_TPoint(const arr: TPointArray; const item: TPoint; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, item, start); end;
function TArray_PosLast_TBox(const arr: TBoxArray; const item: TBox; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, item, start); end;
function TArray_PosLast_TRange(const arr: TRangeArray; const item: TRange; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, item, start); end;
function TArray_PosLast_Int32_1(const arr: TIntegerArray; const items: TIntegerArray; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, items, start); end;
function TArray_PosLast_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, items, start); end;
function TArray_PosLast_String_1(const arr: TStringArray; const items: TStringArray; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, items, start); end;
function TArray_PosLast_Char_1(const arr: TCharArray; const items: TCharArray; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, items, start); end;
function TArray_PosLast_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, items, start); end;
function TArray_PosLast_TPoint_1(const arr: TPointArray; const items: TPointArray; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, items, start); end;
function TArray_PosLast_TBox_1(const arr: TBoxArray; const items: TBoxArray; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, items, start); end;
function TArray_PosLast_TRange_1(const arr: TRangeArray; const items: TRangeArray; const start: Int32 = 2147483647): Int32; overload; cdecl; begin Result := TArray_PosLast(arr, items, start); end;

function TArray_PosLasts_Int32(const arr: TIntegerArray; const item: Int32; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, start); end;
function TArray_PosLasts_Double(const arr: TDoubleArray; const item: Double; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, start); end;
function TArray_PosLasts_String(const arr: TStringArray; const item: string; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, start); end;
function TArray_PosLasts_Char(const arr: TCharArray; const item: Char; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, start); end;
function TArray_PosLasts_Boolean(const arr: TBooleanArray; const item: Boolean; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, start); end;
function TArray_PosLasts_TPoint(const arr: TPointArray; const item: TPoint; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, start); end;
function TArray_PosLasts_TBox(const arr: TBoxArray; const item: TBox; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, start); end;
function TArray_PosLasts_TRange(const arr: TRangeArray; const item: TRange; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, item, start); end;
function TArray_PosLasts_Int32_1(const arr: TIntegerArray; const items: TIntegerArray; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, start); end;
function TArray_PosLasts_Double_1(const arr: TDoubleArray; const items: TDoubleArray; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, start); end;
function TArray_PosLasts_String_1(const arr: TStringArray; const items: TStringArray; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, start); end;
function TArray_PosLasts_Char_1(const arr: TCharArray; const items: TCharArray; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, start); end;
function TArray_PosLasts_Boolean_1(const arr: TBooleanArray; const items: TBooleanArray; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, start); end;
function TArray_PosLasts_TPoint_1(const arr: TPointArray; const items: TPointArray; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, start); end;
function TArray_PosLasts_TBox_1(const arr: TBoxArray; const items: TBoxArray; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, start); end;
function TArray_PosLasts_TRange_1(const arr: TRangeArray; const items: TRangeArray; const start: Int32 = 2147483647): TIntegerArray; overload; cdecl; begin Result := TArray_PosLasts(arr, items, start); end;

function TArray_Push_Int32(var arr: TIntegerArray; const item: Int32): Int32; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_Double(var arr: TDoubleArray; const item: Double): Int32; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_String(var arr: TStringArray; const item: string): Int32; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_Char(var arr: TCharArray; const item: Char): Int32; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_Boolean(var arr: TBooleanArray; const item: Boolean): Int32; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_TPoint(var arr: TPointArray; const item: TPoint): Int32; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_TBox(var arr: TBoxArray; const item: TBox): Int32; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_TRange(var arr: TRangeArray; const item: TRange): Int32; overload; cdecl; begin Result := TArray_Push(arr, item); end;
function TArray_Push_Int32_1(var arr: TIntegerArray; const items: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_Double_1(var arr: TDoubleArray; const items: TDoubleArray): Int32; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_String_1(var arr: TStringArray; const items: TStringArray): Int32; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_Char_1(var arr: TCharArray; const items: TCharArray): Int32; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_Boolean_1(var arr: TBooleanArray; const items: TBooleanArray): Int32; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_TPoint_1(var arr: TPointArray; const items: TPointArray): Int32; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_TBox_1(var arr: TBoxArray; const items: TBoxArray): Int32; overload; cdecl; begin Result := TArray_Push(arr, items); end;
function TArray_Push_TRange_1(var arr: TRangeArray; const items: TRangeArray): Int32; overload; cdecl; begin Result := TArray_Push(arr, items); end;

function TArray_Randomize_Int32(var arr: TIntegerArray; const shuffles: Int32 = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_Double(var arr: TDoubleArray; const shuffles: Int32 = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_String(var arr: TStringArray; const shuffles: Int32 = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_Char(var arr: TCharArray; const shuffles: Int32 = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_Boolean(var arr: TBooleanArray; const shuffles: Int32 = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_TPoint(var arr: TPointArray; const shuffles: Int32 = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_TBox(var arr: TBoxArray; const shuffles: Int32 = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;
function TArray_Randomize_TRange(var arr: TRangeArray; const shuffles: Int32 = 1): Boolean; overload; cdecl; begin Result := TArray_Randomize(arr, shuffles); end;

function TArray_Remove_Int32(var arr: TIntegerArray; const item: Int32; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, start, all); end;
function TArray_Remove_Int32_1(var arr: TIntegerArray; const item: Int32; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_Double(var arr: TDoubleArray; const item: Double; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, start, all); end;
function TArray_Remove_Double_1(var arr: TDoubleArray; const item: Double; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_String(var arr: TStringArray; const item: string; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, start, all); end;
function TArray_Remove_String_1(var arr: TStringArray; const item: string; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_Char(var arr: TCharArray; const item: Char; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, start, all); end;
function TArray_Remove_Char_1(var arr: TCharArray; const item: Char; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_Boolean(var arr: TBooleanArray; const item: Boolean; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, start, all); end;
function TArray_Remove_Boolean_1(var arr: TBooleanArray; const item: Boolean; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_TPoint(var arr: TPointArray; const item: TPoint; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, start, all); end;
function TArray_Remove_TPoint_1(var arr: TPointArray; const item: TPoint; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_TBox(var arr: TBoxArray; const item: TBox; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, start, all); end;
function TArray_Remove_TBox_1(var arr: TBoxArray; const item: TBox; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_TRange(var arr: TRangeArray; const item: TRange; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, start, all); end;
function TArray_Remove_TRange_1(var arr: TRangeArray; const item: TRange; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, item, all); end;
function TArray_Remove_Int32_2(var arr: TIntegerArray; const items: TIntegerArray; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, start, all); end;
function TArray_Remove_Int32_3(var arr: TIntegerArray; const items: TIntegerArray; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_Double_2(var arr: TDoubleArray; const items: TDoubleArray; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, start, all); end;
function TArray_Remove_Double_3(var arr: TDoubleArray; const items: TDoubleArray; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_String_2(var arr: TStringArray; const items: TStringArray; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, start, all); end;
function TArray_Remove_String_3(var arr: TStringArray; const items: TStringArray; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_Char_2(var arr: TCharArray; const items: TCharArray; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, start, all); end;
function TArray_Remove_Char_3(var arr: TCharArray; const items: TCharArray; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_Boolean_2(var arr: TBooleanArray; const items: TBooleanArray; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, start, all); end;
function TArray_Remove_Boolean_3(var arr: TBooleanArray; const items: TBooleanArray; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_TPoint_2(var arr: TPointArray; const items: TPointArray; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, start, all); end;
function TArray_Remove_TPoint_3(var arr: TPointArray; const items: TPointArray; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_TBox_2(var arr: TBoxArray; const items: TBoxArray; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, start, all); end;
function TArray_Remove_TBox_3(var arr: TBoxArray; const items: TBoxArray; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;
function TArray_Remove_TRange_2(var arr: TRangeArray; const items: TRangeArray; const start: Int32 = 0; const all: Boolean = True): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, start, all); end;
function TArray_Remove_TRange_3(var arr: TRangeArray; const items: TRangeArray; const all: Boolean): Int32; overload; cdecl; begin Result := TArray_Remove(arr, items, all); end;

function TArray_Reverse_Int32(var arr: TIntegerArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_Double(var arr: TDoubleArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_String(var arr: TStringArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_Char(var arr: TCharArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_Boolean(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_TPoint(var arr: TPointArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_TBox(var arr: TBoxArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;
function TArray_Reverse_TRange(var arr: TRangeArray): Boolean; overload; cdecl; begin Result := TArray_Reverse(arr); end;

function TArray_Reversed_Int32(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_Double(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_String(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_Char(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_Boolean(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_TPoint(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_TBox(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;
function TArray_Reversed_TRange(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Reversed(arr); end;

function TArray_Set_Int32(const arr: TIntegerArray; const IDs: TIntegerArray; const item: Int32): TIntegerArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_Double(const arr: TDoubleArray; const IDs: TIntegerArray; const item: Double): TDoubleArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_String(const arr: TStringArray; const IDs: TIntegerArray; const item: string): TStringArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_Char(const arr: TCharArray; const IDs: TIntegerArray; const item: Char): TCharArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_Boolean(const arr: TBooleanArray; const IDs: TIntegerArray; const item: Boolean): TBooleanArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_TPoint(const arr: TPointArray; const IDs: TIntegerArray; const item: TPoint): TPointArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_TBox(const arr: TBoxArray; const IDs: TIntegerArray; const item: TBox): TBoxArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_TRange(const arr: TRangeArray; const IDs: TIntegerArray; const item: TRange): TRangeArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, item); end;
function TArray_Set_Int32_1(const arr: TIntegerArray; const IDs: TIntegerArray; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_Double_1(const arr: TDoubleArray; const IDs: TIntegerArray; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_String_1(const arr: TStringArray; const IDs: TIntegerArray; const items: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_Char_1(const arr: TCharArray; const IDs: TIntegerArray; const items: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_Boolean_1(const arr: TBooleanArray; const IDs: TIntegerArray; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_TPoint_1(const arr: TPointArray; const IDs: TIntegerArray; const items: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_TBox_1(const arr: TBoxArray; const IDs: TIntegerArray; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_TRange_1(const arr: TRangeArray; const IDs: TIntegerArray; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Set(arr, IDs, items); end;
function TArray_Set_Int32_2(const arr: TIntegerArray; const start: Int32; const items: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Set(arr, start, items); end;
function TArray_Set_Double_2(const arr: TDoubleArray; const start: Int32; const items: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Set(arr, start, items); end;
function TArray_Set_String_2(const arr: TStringArray; const start: Int32; const items: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Set(arr, start, items); end;
function TArray_Set_Char_2(const arr: TCharArray; const start: Int32; const items: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Set(arr, start, items); end;
function TArray_Set_Boolean_2(const arr: TBooleanArray; const start: Int32; const items: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Set(arr, start, items); end;
function TArray_Set_TPoint_2(const arr: TPointArray; const start: Int32; const items: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Set(arr, start, items); end;
function TArray_Set_TBox_2(const arr: TBoxArray; const start: Int32; const items: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Set(arr, start, items); end;
function TArray_Set_TRange_2(const arr: TRangeArray; const start: Int32; const items: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Set(arr, start, items); end;

function TArray_Shift_Int32(var arr: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_Double(var arr: TDoubleArray): Double; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_String(var arr: TStringArray): string; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_Char(var arr: TCharArray): Char; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_Boolean(var arr: TBooleanArray): Boolean; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_TPoint(var arr: TPointArray): TPoint; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_TBox(var arr: TBoxArray): TBox; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_TRange(var arr: TRangeArray): TRange; overload; cdecl; begin Result := TArray_Shift(arr); end;
function TArray_Shift_Int32_1(var arr: TIntegerArray; const shift: Int32): TIntegerArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_Double_1(var arr: TDoubleArray; const shift: Int32): TDoubleArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_String_1(var arr: TStringArray; const shift: Int32): TStringArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_Char_1(var arr: TCharArray; const shift: Int32): TCharArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_Boolean_1(var arr: TBooleanArray; const shift: Int32): TBooleanArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_TPoint_1(var arr: TPointArray; const shift: Int32): TPointArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_TBox_1(var arr: TBoxArray; const shift: Int32): TBoxArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;
function TArray_Shift_TRange_1(var arr: TRangeArray; const shift: Int32): TRangeArray; overload; cdecl; begin Result := TArray_Shift(arr, shift); end;

function TArray_Size_Int32(var arr: TIntegerArray; const size: Int32): Int32; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_Double(var arr: TDoubleArray; const size: Int32): Int32; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_String(var arr: TStringArray; const size: Int32): Int32; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_Char(var arr: TCharArray; const size: Int32): Int32; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_Boolean(var arr: TBooleanArray; const size: Int32): Int32; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_TPoint(var arr: TPointArray; const size: Int32): Int32; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_TBox(var arr: TBoxArray; const size: Int32): Int32; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_TRange(var arr: TRangeArray; const size: Int32): Int32; overload; cdecl; begin Result := TArray_Size(arr, size); end;
function TArray_Size_Int32_1(var arr: TIntegerArray; const size: Int32; const null: Int32): Int32; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_Double_1(var arr: TDoubleArray; const size: Int32; const null: Double): Int32; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_String_1(var arr: TStringArray; const size: Int32; const null: string): Int32; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_Char_1(var arr: TCharArray; const size: Int32; const null: Char): Int32; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_Boolean_1(var arr: TBooleanArray; const size: Int32; const null: Boolean): Int32; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_TPoint_1(var arr: TPointArray; const size: Int32; const null: TPoint): Int32; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_TBox_1(var arr: TBoxArray; const size: Int32; const null: TBox): Int32; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_TRange_1(var arr: TRangeArray; const size: Int32; const null: TRange): Int32; overload; cdecl; begin Result := TArray_Size(arr, size, null); end;
function TArray_Size_Int32_2(const arr: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_Double_2(const arr: TDoubleArray): Int32; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_String_2(const arr: TStringArray): Int32; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_Char_2(const arr: TCharArray): Int32; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_Boolean_2(const arr: TBooleanArray): Int32; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_TPoint_2(const arr: TPointArray): Int32; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_TBox_2(const arr: TBoxArray): Int32; overload; cdecl; begin Result := TArray_Size(arr); end;
function TArray_Size_TRange_2(const arr: TRangeArray): Int32; overload; cdecl; begin Result := TArray_Size(arr); end;

function TArray_SizeBetween_Int32(const arr: TIntegerArray; const x, y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_Double(const arr: TDoubleArray; const x, y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_String(const arr: TStringArray; const x, y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_Char(const arr: TCharArray; const x, y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_Boolean(const arr: TBooleanArray; const x, y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_TPoint(const arr: TPointArray; const x, y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_TBox(const arr: TBoxArray; const x, y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;
function TArray_SizeBetween_TRange(const arr: TRangeArray; const x, y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeBetween(arr, x, y); end;

function TArray_SizeMax_Int32(const arr: TIntegerArray; const y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_Double(const arr: TDoubleArray; const y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_String(const arr: TStringArray; const y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_Char(const arr: TCharArray; const y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_Boolean(const arr: TBooleanArray; const y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_TPoint(const arr: TPointArray; const y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_TBox(const arr: TBoxArray; const y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;
function TArray_SizeMax_TRange(const arr: TRangeArray; const y: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMax(arr, y); end;

function TArray_SizeMin_Int32(const arr: TIntegerArray; const x: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_Double(const arr: TDoubleArray; const x: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_String(const arr: TStringArray; const x: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_Char(const arr: TCharArray; const x: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_Boolean(const arr: TBooleanArray; const x: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_TPoint(const arr: TPointArray; const x: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_TBox(const arr: TBoxArray; const x: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;
function TArray_SizeMin_TRange(const arr: TRangeArray; const x: Int32): Boolean; overload; cdecl; begin Result := TArray_SizeMin(arr, x); end;

function TArray_Swap_Int32(var a, b: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_Double(var a, b: TDoubleArray): Int32; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_String(var a, b: TStringArray): Int32; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_Char(var a, b: TCharArray): Int32; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_Boolean(var a, b: TBooleanArray): Int32; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_TPoint(var a, b: TPointArray): Int32; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_TBox(var a, b: TBoxArray): Int32; overload; cdecl; begin Result := TArray_Swap(a, b); end;
function TArray_Swap_TRange(var a, b: TRangeArray): Int32; overload; cdecl; begin Result := TArray_Swap(a, b); end;

function TArray_Trade_Int32(var a, b: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_Double(var a, b: TDoubleArray): Int32; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_String(var a, b: TStringArray): Int32; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_Char(var a, b: TCharArray): Int32; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_Boolean(var a, b: TBooleanArray): Int32; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_TPoint(var a, b: TPointArray): Int32; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_TBox(var a, b: TBoxArray): Int32; overload; cdecl; begin Result := TArray_Trade(a, b); end;
function TArray_Trade_TRange(var a, b: TRangeArray): Int32; overload; cdecl; begin Result := TArray_Trade(a, b); end;

function TArray_Undersize_Int32(const arr: TIntegerArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_Double(const arr: TDoubleArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_String(const arr: TStringArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_Char(const arr: TCharArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_Boolean(const arr: TBooleanArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_TPoint(const arr: TPointArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_TBox(const arr: TBoxArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;
function TArray_Undersize_TRange(const arr: TRangeArray; const limit: Int32): Boolean; overload; cdecl; begin Result := TArray_Undersize(arr, limit); end;

function TArray_Unique_Int32(var arr: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_Double(var arr: TDoubleArray): Int32; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_String(var arr: TStringArray): Int32; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_Char(var arr: TCharArray): Int32; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_Boolean(var arr: TBooleanArray): Int32; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_TPoint(var arr: TPointArray): Int32; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_TBox(var arr: TBoxArray): Int32; overload; cdecl; begin Result := TArray_Unique(arr); end;
function TArray_Unique_TRange(var arr: TRangeArray): Int32; overload; cdecl; begin Result := TArray_Unique(arr); end;

function TArray_Uniqued_Int32(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_Double(const arr: TDoubleArray): TDoubleArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_String(const arr: TStringArray): TStringArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_Char(const arr: TCharArray): TCharArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_Boolean(const arr: TBooleanArray): TBooleanArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_TPoint(const arr: TPointArray): TPointArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_TBox(const arr: TBoxArray): TBoxArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;
function TArray_Uniqued_TRange(const arr: TRangeArray): TRangeArray; overload; cdecl; begin Result := TArray_Uniqued(arr); end;

function TArray_Uniques_Int32(const arr: TIntegerArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_Double(const arr: TDoubleArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_String(const arr: TStringArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_Char(const arr: TCharArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_Boolean(const arr: TBooleanArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_TPoint(const arr: TPointArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_TBox(const arr: TBoxArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;
function TArray_Uniques_TRange(const arr: TRangeArray): TIntegerArray; overload; cdecl; begin Result := TArray_Uniques(arr); end;

function TArray_Unshift_Int32(var arr: TIntegerArray; const item: Int32): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_Double(var arr: TDoubleArray; const item: Double): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_String(var arr: TStringArray; const item: string): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_Char(var arr: TCharArray; const item: Char): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_Boolean(var arr: TBooleanArray; const item: Boolean): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_TPoint(var arr: TPointArray; const item: TPoint): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_TBox(var arr: TBoxArray; const item: TBox): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_TRange(var arr: TRangeArray; const item: TRange): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, item); end;
function TArray_Unshift_Int32_1(var arr: TIntegerArray; const items: TIntegerArray): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_Double_1(var arr: TDoubleArray; const items: TDoubleArray): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_String_1(var arr: TStringArray; const items: TStringArray): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_Char_1(var arr: TCharArray; const items: TCharArray): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_Boolean_1(var arr: TBooleanArray; const items: TBooleanArray): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_TPoint_1(var arr: TPointArray; const items: TPointArray): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_TBox_1(var arr: TBoxArray; const items: TBoxArray): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;
function TArray_Unshift_TRange_1(var arr: TRangeArray; const items: TRangeArray): Int32; overload; cdecl; begin Result := TArray_Unshift(arr, items); end;

function T2DArray_Blank_Int32(const arr: T2DIntegerArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_Double(const arr: T2DDoubleArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_String(const arr: T2DStringArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_Char(const arr: T2DCharArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_Boolean(const arr: T2DBooleanArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_TPoint(const arr: T2DPointArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_TBox(const arr: T2DBoxArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;
function T2DArray_Blank_TRange(const arr: T2DRangeArray): Boolean; overload; cdecl; begin Result := T2DArray_Blank(arr); end;

function T2DArray_Create_Int32(const size1D, size2D: Int32; const item: Int32): T2DIntegerArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_Double(const size1D, size2D: Int32; const item: Double): T2DDoubleArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_String(const size1D, size2D: Int32; const item: string): T2DStringArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_Char(const size1D, size2D: Int32; const item: Char): T2DCharArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_Boolean(const size1D, size2D: Int32; const item: Boolean): T2DBooleanArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_TPoint(const size1D, size2D: Int32; const item: TPoint): T2DPointArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_TBox(const size1D, size2D: Int32; const item: TBox): T2DBoxArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;
function T2DArray_Create_TRange(const size1D, size2D: Int32; const item: TRange): T2DRangeArray; overload; cdecl; begin Result := T2DArray_Create(size1D, size2D, item); end;

function T2DArray_Empty_Int32(const arr: T2DIntegerArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_Double(const arr: T2DDoubleArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_String(const arr: T2DStringArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_Char(const arr: T2DCharArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_Boolean(const arr: T2DBooleanArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_TPoint(const arr: T2DPointArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_TBox(const arr: T2DBoxArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;
function T2DArray_Empty_TRange(const arr: T2DRangeArray): Boolean; overload; cdecl; begin Result := T2DArray_Empty(arr); end;

function T2DArray_Length_Int32(const arr: T2DIntegerArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_Double(const arr: T2DDoubleArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_String(const arr: T2DStringArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_Char(const arr: T2DCharArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_Boolean(const arr: T2DBooleanArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_TPoint(const arr: T2DPointArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_TBox(const arr: T2DBoxArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_TRange(const arr: T2DRangeArray; var lengths: TIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr, lengths); end;
function T2DArray_Length_Int32_1(const arr: T2DIntegerArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_Double_1(const arr: T2DDoubleArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_String_1(const arr: T2DStringArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_Char_1(const arr: T2DCharArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_Boolean_1(const arr: T2DBooleanArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_TPoint_1(const arr: T2DPointArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_TBox_1(const arr: T2DBoxArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;
function T2DArray_Length_TRange_1(const arr: T2DRangeArray): Int64; overload; cdecl; begin Result := T2DArray_Length(arr); end;

function T2DArray_Merge_Int32(const arr: T2DIntegerArray): TIntegerArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_Double(const arr: T2DDoubleArray): TDoubleArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_String(const arr: T2DStringArray): TStringArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_Char(const arr: T2DCharArray): TCharArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_Boolean(const arr: T2DBooleanArray): TBooleanArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_TPoint(const arr: T2DPointArray): TPointArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_TBox(const arr: T2DBoxArray): TBoxArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
function T2DArray_Merge_TRange(const arr: T2DRangeArray): TRangeArray; overload; cdecl; begin Result := T2DArray_Merge(arr); end;
